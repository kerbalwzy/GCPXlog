// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mongoBind.proto

package mongoPb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// a basic data structure for save date and the message was sent on the date.
type DateAndMessage struct {
	Date                 int32    `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	MessageList          [][]byte `protobuf:"bytes,2,rep,name=message_list,json=messageList,proto3" json:"message_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DateAndMessage) Reset()         { *m = DateAndMessage{} }
func (m *DateAndMessage) String() string { return proto.CompactTextString(m) }
func (*DateAndMessage) ProtoMessage()    {}
func (*DateAndMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{0}
}

func (m *DateAndMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateAndMessage.Unmarshal(m, b)
}
func (m *DateAndMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateAndMessage.Marshal(b, m, deterministic)
}
func (m *DateAndMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateAndMessage.Merge(m, src)
}
func (m *DateAndMessage) XXX_Size() int {
	return xxx_messageInfo_DateAndMessage.Size(m)
}
func (m *DateAndMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DateAndMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DateAndMessage proto.InternalMessageInfo

func (m *DateAndMessage) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *DateAndMessage) GetMessageList() [][]byte {
	if m != nil {
		return m.MessageList
	}
	return nil
}

type DelayMessage struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MessageList          [][]byte `protobuf:"bytes,2,rep,name=message_list,json=messageList,proto3" json:"message_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelayMessage) Reset()         { *m = DelayMessage{} }
func (m *DelayMessage) String() string { return proto.CompactTextString(m) }
func (*DelayMessage) ProtoMessage()    {}
func (*DelayMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{1}
}

func (m *DelayMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelayMessage.Unmarshal(m, b)
}
func (m *DelayMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelayMessage.Marshal(b, m, deterministic)
}
func (m *DelayMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayMessage.Merge(m, src)
}
func (m *DelayMessage) XXX_Size() int {
	return xxx_messageInfo_DelayMessage.Size(m)
}
func (m *DelayMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DelayMessage proto.InternalMessageInfo

func (m *DelayMessage) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelayMessage) GetMessageList() [][]byte {
	if m != nil {
		return m.MessageList
	}
	return nil
}

type UserChatHistory struct {
	JoinId               string            `protobuf:"bytes,1,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	Data                 []*DateAndMessage `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserChatHistory) Reset()         { *m = UserChatHistory{} }
func (m *UserChatHistory) String() string { return proto.CompactTextString(m) }
func (*UserChatHistory) ProtoMessage()    {}
func (*UserChatHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{2}
}

func (m *UserChatHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserChatHistory.Unmarshal(m, b)
}
func (m *UserChatHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserChatHistory.Marshal(b, m, deterministic)
}
func (m *UserChatHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserChatHistory.Merge(m, src)
}
func (m *UserChatHistory) XXX_Size() int {
	return xxx_messageInfo_UserChatHistory.Size(m)
}
func (m *UserChatHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_UserChatHistory.DiscardUnknown(m)
}

var xxx_messageInfo_UserChatHistory proto.InternalMessageInfo

func (m *UserChatHistory) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

func (m *UserChatHistory) GetData() []*DateAndMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

type GroupChatHistory struct {
	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 []*DateAndMessage `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupChatHistory) Reset()         { *m = GroupChatHistory{} }
func (m *GroupChatHistory) String() string { return proto.CompactTextString(m) }
func (*GroupChatHistory) ProtoMessage()    {}
func (*GroupChatHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{3}
}

func (m *GroupChatHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupChatHistory.Unmarshal(m, b)
}
func (m *GroupChatHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupChatHistory.Marshal(b, m, deterministic)
}
func (m *GroupChatHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupChatHistory.Merge(m, src)
}
func (m *GroupChatHistory) XXX_Size() int {
	return xxx_messageInfo_GroupChatHistory.Size(m)
}
func (m *GroupChatHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupChatHistory.DiscardUnknown(m)
}

var xxx_messageInfo_GroupChatHistory proto.InternalMessageInfo

func (m *GroupChatHistory) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupChatHistory) GetData() []*DateAndMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscriptionHistory struct {
	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 []*DateAndMessage `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscriptionHistory) Reset()         { *m = SubscriptionHistory{} }
func (m *SubscriptionHistory) String() string { return proto.CompactTextString(m) }
func (*SubscriptionHistory) ProtoMessage()    {}
func (*SubscriptionHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{4}
}

func (m *SubscriptionHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionHistory.Unmarshal(m, b)
}
func (m *SubscriptionHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionHistory.Marshal(b, m, deterministic)
}
func (m *SubscriptionHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionHistory.Merge(m, src)
}
func (m *SubscriptionHistory) XXX_Size() int {
	return xxx_messageInfo_SubscriptionHistory.Size(m)
}
func (m *SubscriptionHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionHistory.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionHistory proto.InternalMessageInfo

func (m *SubscriptionHistory) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SubscriptionHistory) GetData() []*DateAndMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserFriendsAndBlacklist struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Friends              []int64  `protobuf:"varint,2,rep,packed,name=friends,proto3" json:"friends,omitempty"`
	Blacklist            []int64  `protobuf:"varint,3,rep,packed,name=blacklist,proto3" json:"blacklist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserFriendsAndBlacklist) Reset()         { *m = UserFriendsAndBlacklist{} }
func (m *UserFriendsAndBlacklist) String() string { return proto.CompactTextString(m) }
func (*UserFriendsAndBlacklist) ProtoMessage()    {}
func (*UserFriendsAndBlacklist) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{5}
}

func (m *UserFriendsAndBlacklist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserFriendsAndBlacklist.Unmarshal(m, b)
}
func (m *UserFriendsAndBlacklist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserFriendsAndBlacklist.Marshal(b, m, deterministic)
}
func (m *UserFriendsAndBlacklist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFriendsAndBlacklist.Merge(m, src)
}
func (m *UserFriendsAndBlacklist) XXX_Size() int {
	return xxx_messageInfo_UserFriendsAndBlacklist.Size(m)
}
func (m *UserFriendsAndBlacklist) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFriendsAndBlacklist.DiscardUnknown(m)
}

var xxx_messageInfo_UserFriendsAndBlacklist proto.InternalMessageInfo

func (m *UserFriendsAndBlacklist) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserFriendsAndBlacklist) GetFriends() []int64 {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *UserFriendsAndBlacklist) GetBlacklist() []int64 {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

type UserGroupChats struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Groups               []int64  `protobuf:"varint,2,rep,packed,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGroupChats) Reset()         { *m = UserGroupChats{} }
func (m *UserGroupChats) String() string { return proto.CompactTextString(m) }
func (*UserGroupChats) ProtoMessage()    {}
func (*UserGroupChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{6}
}

func (m *UserGroupChats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserGroupChats.Unmarshal(m, b)
}
func (m *UserGroupChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserGroupChats.Marshal(b, m, deterministic)
}
func (m *UserGroupChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGroupChats.Merge(m, src)
}
func (m *UserGroupChats) XXX_Size() int {
	return xxx_messageInfo_UserGroupChats.Size(m)
}
func (m *UserGroupChats) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGroupChats.DiscardUnknown(m)
}

var xxx_messageInfo_UserGroupChats proto.InternalMessageInfo

func (m *UserGroupChats) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserGroupChats) GetGroups() []int64 {
	if m != nil {
		return m.Groups
	}
	return nil
}

type UserSubscriptions struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subscriptions        []int64  `protobuf:"varint,2,rep,packed,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserSubscriptions) Reset()         { *m = UserSubscriptions{} }
func (m *UserSubscriptions) String() string { return proto.CompactTextString(m) }
func (*UserSubscriptions) ProtoMessage()    {}
func (*UserSubscriptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{7}
}

func (m *UserSubscriptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSubscriptions.Unmarshal(m, b)
}
func (m *UserSubscriptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSubscriptions.Marshal(b, m, deterministic)
}
func (m *UserSubscriptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSubscriptions.Merge(m, src)
}
func (m *UserSubscriptions) XXX_Size() int {
	return xxx_messageInfo_UserSubscriptions.Size(m)
}
func (m *UserSubscriptions) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSubscriptions.DiscardUnknown(m)
}

var xxx_messageInfo_UserSubscriptions proto.InternalMessageInfo

func (m *UserSubscriptions) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserSubscriptions) GetSubscriptions() []int64 {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type GroupChatUsers struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Users                []int64  `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupChatUsers) Reset()         { *m = GroupChatUsers{} }
func (m *GroupChatUsers) String() string { return proto.CompactTextString(m) }
func (*GroupChatUsers) ProtoMessage()    {}
func (*GroupChatUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{8}
}

func (m *GroupChatUsers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupChatUsers.Unmarshal(m, b)
}
func (m *GroupChatUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupChatUsers.Marshal(b, m, deterministic)
}
func (m *GroupChatUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupChatUsers.Merge(m, src)
}
func (m *GroupChatUsers) XXX_Size() int {
	return xxx_messageInfo_GroupChatUsers.Size(m)
}
func (m *GroupChatUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupChatUsers.DiscardUnknown(m)
}

var xxx_messageInfo_GroupChatUsers proto.InternalMessageInfo

func (m *GroupChatUsers) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupChatUsers) GetUsers() []int64 {
	if m != nil {
		return m.Users
	}
	return nil
}

type SubscriptionUsers struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Users                []int64  `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionUsers) Reset()         { *m = SubscriptionUsers{} }
func (m *SubscriptionUsers) String() string { return proto.CompactTextString(m) }
func (*SubscriptionUsers) ProtoMessage()    {}
func (*SubscriptionUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{9}
}

func (m *SubscriptionUsers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionUsers.Unmarshal(m, b)
}
func (m *SubscriptionUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionUsers.Marshal(b, m, deterministic)
}
func (m *SubscriptionUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionUsers.Merge(m, src)
}
func (m *SubscriptionUsers) XXX_Size() int {
	return xxx_messageInfo_SubscriptionUsers.Size(m)
}
func (m *SubscriptionUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionUsers.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionUsers proto.InternalMessageInfo

func (m *SubscriptionUsers) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SubscriptionUsers) GetUsers() []int64 {
	if m != nil {
		return m.Users
	}
	return nil
}

type Id struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{10}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type IdAndMessage struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndMessage) Reset()         { *m = IdAndMessage{} }
func (m *IdAndMessage) String() string { return proto.CompactTextString(m) }
func (*IdAndMessage) ProtoMessage()    {}
func (*IdAndMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{11}
}

func (m *IdAndMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndMessage.Unmarshal(m, b)
}
func (m *IdAndMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndMessage.Marshal(b, m, deterministic)
}
func (m *IdAndMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndMessage.Merge(m, src)
}
func (m *IdAndMessage) XXX_Size() int {
	return xxx_messageInfo_IdAndMessage.Size(m)
}
func (m *IdAndMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndMessage proto.InternalMessageInfo

func (m *IdAndMessage) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type IdAndDate struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date                 int32    `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndDate) Reset()         { *m = IdAndDate{} }
func (m *IdAndDate) String() string { return proto.CompactTextString(m) }
func (*IdAndDate) ProtoMessage()    {}
func (*IdAndDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{12}
}

func (m *IdAndDate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndDate.Unmarshal(m, b)
}
func (m *IdAndDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndDate.Marshal(b, m, deterministic)
}
func (m *IdAndDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndDate.Merge(m, src)
}
func (m *IdAndDate) XXX_Size() int {
	return xxx_messageInfo_IdAndDate.Size(m)
}
func (m *IdAndDate) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndDate.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndDate proto.InternalMessageInfo

func (m *IdAndDate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndDate) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

type IdAndDateRange struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartDate            int32    `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate              int32    `protobuf:"varint,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndDateRange) Reset()         { *m = IdAndDateRange{} }
func (m *IdAndDateRange) String() string { return proto.CompactTextString(m) }
func (*IdAndDateRange) ProtoMessage()    {}
func (*IdAndDateRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{13}
}

func (m *IdAndDateRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndDateRange.Unmarshal(m, b)
}
func (m *IdAndDateRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndDateRange.Marshal(b, m, deterministic)
}
func (m *IdAndDateRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndDateRange.Merge(m, src)
}
func (m *IdAndDateRange) XXX_Size() int {
	return xxx_messageInfo_IdAndDateRange.Size(m)
}
func (m *IdAndDateRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndDateRange.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndDateRange proto.InternalMessageInfo

func (m *IdAndDateRange) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndDateRange) GetStartDate() int32 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *IdAndDateRange) GetEndDate() int32 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type JoinId struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinId) Reset()         { *m = JoinId{} }
func (m *JoinId) String() string { return proto.CompactTextString(m) }
func (*JoinId) ProtoMessage()    {}
func (*JoinId) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{14}
}

func (m *JoinId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinId.Unmarshal(m, b)
}
func (m *JoinId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinId.Marshal(b, m, deterministic)
}
func (m *JoinId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinId.Merge(m, src)
}
func (m *JoinId) XXX_Size() int {
	return xxx_messageInfo_JoinId.Size(m)
}
func (m *JoinId) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinId.DiscardUnknown(m)
}

var xxx_messageInfo_JoinId proto.InternalMessageInfo

func (m *JoinId) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type JoinIdAndMessage struct {
	JoinId               string   `protobuf:"bytes,1,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinIdAndMessage) Reset()         { *m = JoinIdAndMessage{} }
func (m *JoinIdAndMessage) String() string { return proto.CompactTextString(m) }
func (*JoinIdAndMessage) ProtoMessage()    {}
func (*JoinIdAndMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{15}
}

func (m *JoinIdAndMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinIdAndMessage.Unmarshal(m, b)
}
func (m *JoinIdAndMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinIdAndMessage.Marshal(b, m, deterministic)
}
func (m *JoinIdAndMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinIdAndMessage.Merge(m, src)
}
func (m *JoinIdAndMessage) XXX_Size() int {
	return xxx_messageInfo_JoinIdAndMessage.Size(m)
}
func (m *JoinIdAndMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinIdAndMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinIdAndMessage proto.InternalMessageInfo

func (m *JoinIdAndMessage) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

func (m *JoinIdAndMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type JoinIdAndDate struct {
	JoinId               string   `protobuf:"bytes,1,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	Date                 int32    `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinIdAndDate) Reset()         { *m = JoinIdAndDate{} }
func (m *JoinIdAndDate) String() string { return proto.CompactTextString(m) }
func (*JoinIdAndDate) ProtoMessage()    {}
func (*JoinIdAndDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{16}
}

func (m *JoinIdAndDate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinIdAndDate.Unmarshal(m, b)
}
func (m *JoinIdAndDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinIdAndDate.Marshal(b, m, deterministic)
}
func (m *JoinIdAndDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinIdAndDate.Merge(m, src)
}
func (m *JoinIdAndDate) XXX_Size() int {
	return xxx_messageInfo_JoinIdAndDate.Size(m)
}
func (m *JoinIdAndDate) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinIdAndDate.DiscardUnknown(m)
}

var xxx_messageInfo_JoinIdAndDate proto.InternalMessageInfo

func (m *JoinIdAndDate) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

func (m *JoinIdAndDate) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

type JoinIdAndDateRange struct {
	JoinId               string   `protobuf:"bytes,1,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	StartDate            int32    `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate              int32    `protobuf:"varint,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinIdAndDateRange) Reset()         { *m = JoinIdAndDateRange{} }
func (m *JoinIdAndDateRange) String() string { return proto.CompactTextString(m) }
func (*JoinIdAndDateRange) ProtoMessage()    {}
func (*JoinIdAndDateRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{17}
}

func (m *JoinIdAndDateRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinIdAndDateRange.Unmarshal(m, b)
}
func (m *JoinIdAndDateRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinIdAndDateRange.Marshal(b, m, deterministic)
}
func (m *JoinIdAndDateRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinIdAndDateRange.Merge(m, src)
}
func (m *JoinIdAndDateRange) XXX_Size() int {
	return xxx_messageInfo_JoinIdAndDateRange.Size(m)
}
func (m *JoinIdAndDateRange) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinIdAndDateRange.DiscardUnknown(m)
}

var xxx_messageInfo_JoinIdAndDateRange proto.InternalMessageInfo

func (m *JoinIdAndDateRange) GetJoinId() string {
	if m != nil {
		return m.JoinId
	}
	return ""
}

func (m *JoinIdAndDateRange) GetStartDate() int32 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *JoinIdAndDateRange) GetEndDate() int32 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type DoubleId struct {
	MainId               int64    `protobuf:"varint,1,opt,name=main_id,json=mainId,proto3" json:"main_id,omitempty"`
	OtherId              int64    `protobuf:"varint,2,opt,name=other_id,json=otherId,proto3" json:"other_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoubleId) Reset()         { *m = DoubleId{} }
func (m *DoubleId) String() string { return proto.CompactTextString(m) }
func (*DoubleId) ProtoMessage()    {}
func (*DoubleId) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{18}
}

func (m *DoubleId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleId.Unmarshal(m, b)
}
func (m *DoubleId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleId.Marshal(b, m, deterministic)
}
func (m *DoubleId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleId.Merge(m, src)
}
func (m *DoubleId) XXX_Size() int {
	return xxx_messageInfo_DoubleId.Size(m)
}
func (m *DoubleId) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleId.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleId proto.InternalMessageInfo

func (m *DoubleId) GetMainId() int64 {
	if m != nil {
		return m.MainId
	}
	return 0
}

func (m *DoubleId) GetOtherId() int64 {
	if m != nil {
		return m.OtherId
	}
	return 0
}

type XAndManagerAndUserId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ManagerId            int64    `protobuf:"varint,2,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	UserId               int64    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XAndManagerAndUserId) Reset()         { *m = XAndManagerAndUserId{} }
func (m *XAndManagerAndUserId) String() string { return proto.CompactTextString(m) }
func (*XAndManagerAndUserId) ProtoMessage()    {}
func (*XAndManagerAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{19}
}

func (m *XAndManagerAndUserId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XAndManagerAndUserId.Unmarshal(m, b)
}
func (m *XAndManagerAndUserId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XAndManagerAndUserId.Marshal(b, m, deterministic)
}
func (m *XAndManagerAndUserId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XAndManagerAndUserId.Merge(m, src)
}
func (m *XAndManagerAndUserId) XXX_Size() int {
	return xxx_messageInfo_XAndManagerAndUserId.Size(m)
}
func (m *XAndManagerAndUserId) XXX_DiscardUnknown() {
	xxx_messageInfo_XAndManagerAndUserId.DiscardUnknown(m)
}

var xxx_messageInfo_XAndManagerAndUserId proto.InternalMessageInfo

func (m *XAndManagerAndUserId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *XAndManagerAndUserId) GetManagerId() int64 {
	if m != nil {
		return m.ManagerId
	}
	return 0
}

func (m *XAndManagerAndUserId) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type EmptyResult struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResult) Reset()         { *m = EmptyResult{} }
func (m *EmptyResult) String() string { return proto.CompactTextString(m) }
func (*EmptyResult) ProtoMessage()    {}
func (*EmptyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{20}
}

func (m *EmptyResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResult.Unmarshal(m, b)
}
func (m *EmptyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResult.Marshal(b, m, deterministic)
}
func (m *EmptyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResult.Merge(m, src)
}
func (m *EmptyResult) XXX_Size() int {
	return xxx_messageInfo_EmptyResult.Size(m)
}
func (m *EmptyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResult.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResult proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DateAndMessage)(nil), "mongoPb.DateAndMessage")
	proto.RegisterType((*DelayMessage)(nil), "mongoPb.DelayMessage")
	proto.RegisterType((*UserChatHistory)(nil), "mongoPb.UserChatHistory")
	proto.RegisterType((*GroupChatHistory)(nil), "mongoPb.GroupChatHistory")
	proto.RegisterType((*SubscriptionHistory)(nil), "mongoPb.SubscriptionHistory")
	proto.RegisterType((*UserFriendsAndBlacklist)(nil), "mongoPb.UserFriendsAndBlacklist")
	proto.RegisterType((*UserGroupChats)(nil), "mongoPb.UserGroupChats")
	proto.RegisterType((*UserSubscriptions)(nil), "mongoPb.UserSubscriptions")
	proto.RegisterType((*GroupChatUsers)(nil), "mongoPb.GroupChatUsers")
	proto.RegisterType((*SubscriptionUsers)(nil), "mongoPb.SubscriptionUsers")
	proto.RegisterType((*Id)(nil), "mongoPb.Id")
	proto.RegisterType((*IdAndMessage)(nil), "mongoPb.IdAndMessage")
	proto.RegisterType((*IdAndDate)(nil), "mongoPb.IdAndDate")
	proto.RegisterType((*IdAndDateRange)(nil), "mongoPb.IdAndDateRange")
	proto.RegisterType((*JoinId)(nil), "mongoPb.JoinId")
	proto.RegisterType((*JoinIdAndMessage)(nil), "mongoPb.JoinIdAndMessage")
	proto.RegisterType((*JoinIdAndDate)(nil), "mongoPb.JoinIdAndDate")
	proto.RegisterType((*JoinIdAndDateRange)(nil), "mongoPb.JoinIdAndDateRange")
	proto.RegisterType((*DoubleId)(nil), "mongoPb.DoubleId")
	proto.RegisterType((*XAndManagerAndUserId)(nil), "mongoPb.XAndManagerAndUserId")
	proto.RegisterType((*EmptyResult)(nil), "mongoPb.EmptyResult")
}

func init() { proto.RegisterFile("mongoBind.proto", fileDescriptor_0561428ad23b023f) }

var fileDescriptor_0561428ad23b023f = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xc7, 0x11, 0x7b, 0xb5, 0xeb, 0x8b, 0xe3, 0xc4, 0xaa, 0x1b, 0x2b, 0x5e, 0x92, 0x25, 0xc2,
	0x5e, 0x04, 0x18, 0x90, 0x01, 0x1d, 0x36, 0xb4, 0x40, 0xd1, 0xce, 0x6e, 0x1a, 0x57, 0x69, 0xb2,
	0x7a, 0xca, 0xba, 0x0d, 0x7d, 0xb1, 0x80, 0x0e, 0x39, 0x47, 0x9b, 0x2c, 0x05, 0x12, 0x95, 0x21,
	0x1f, 0x74, 0xdf, 0x67, 0xe0, 0x83, 0x1e, 0xa8, 0xa7, 0x45, 0xde, 0xde, 0x99, 0xbc, 0xbb, 0x1f,
	0x79, 0xff, 0x23, 0xa9, 0x33, 0x6c, 0x2e, 0x3d, 0x77, 0xe1, 0x4d, 0x6c, 0x17, 0x1f, 0xdf, 0xfa,
	0x1e, 0xf5, 0xb4, 0x36, 0x9f, 0x98, 0xcd, 0x8d, 0x29, 0xf4, 0x4e, 0x10, 0x25, 0x63, 0x17, 0x5f,
	0x90, 0x20, 0x40, 0x0b, 0xa2, 0x69, 0xf0, 0x19, 0x46, 0x94, 0xe8, 0x6b, 0x07, 0x6b, 0x47, 0x8f,
	0x2c, 0xfe, 0x5b, 0x3b, 0x84, 0xee, 0x52, 0x98, 0xaf, 0x1c, 0x3b, 0xa0, 0x7a, 0xe3, 0xa0, 0x79,
	0xd4, 0xb5, 0xd6, 0xe5, 0xdc, 0xb9, 0x1d, 0x50, 0x63, 0x0c, 0xdd, 0x13, 0xe2, 0xa0, 0xfb, 0x08,
	0xd3, 0x83, 0x86, 0x8d, 0x39, 0xa4, 0x69, 0x35, 0x6c, 0xfc, 0x10, 0xc4, 0x2f, 0xb0, 0xf9, 0x31,
	0x20, 0xfe, 0x9b, 0x1b, 0x44, 0xdf, 0xd9, 0x01, 0xf5, 0xfc, 0x7b, 0x6d, 0x08, 0xed, 0x3f, 0x3c,
	0xdb, 0xbd, 0x92, 0xa8, 0x8e, 0xd5, 0x62, 0x43, 0x13, 0x6b, 0x5f, 0xf1, 0x5d, 0x22, 0x8e, 0x59,
	0x7f, 0x36, 0x3c, 0x96, 0xf9, 0x1c, 0xab, 0xc9, 0xf0, 0xed, 0x23, 0xe3, 0x03, 0x6c, 0x4d, 0x7d,
	0x2f, 0xbc, 0x4d, 0x93, 0xb3, 0xfb, 0xab, 0x05, 0xb4, 0xe0, 0xc9, 0x65, 0x38, 0x0f, 0xae, 0x7d,
	0xfb, 0x96, 0xda, 0x9e, 0xfb, 0xbf, 0x30, 0x11, 0x0c, 0x59, 0xf6, 0xa7, 0xbe, 0x4d, 0x5c, 0x1c,
	0x8c, 0x5d, 0x3c, 0x71, 0xd0, 0xf5, 0x9f, 0x4c, 0xab, 0x1c, 0x57, 0x87, 0xf6, 0xef, 0xc2, 0x8d,
	0xa3, 0x9b, 0x56, 0x34, 0xd4, 0x76, 0xa1, 0x33, 0x8f, 0xc2, 0xf4, 0x26, 0xb7, 0x25, 0x13, 0xc6,
	0x73, 0xe8, 0xb1, 0x25, 0x62, 0x2d, 0x82, 0x1c, 0x79, 0x1b, 0x5a, 0x0b, 0x66, 0x8d, 0xc0, 0x72,
	0x64, 0x98, 0xd0, 0x67, 0x91, 0xe9, 0xa4, 0xf3, 0xc1, 0x5f, 0xc2, 0x46, 0x90, 0x76, 0x90, 0x0c,
	0x75, 0xd2, 0xf8, 0x0e, 0x7a, 0xf1, 0x06, 0x18, 0x33, 0xcf, 0x19, 0xc0, 0xa3, 0x90, 0x19, 0x64,
	0xbc, 0x18, 0x18, 0x2f, 0xa0, 0x9f, 0x5e, 0xbe, 0x4e, 0xe8, 0x08, 0x1a, 0x26, 0xb7, 0xdd, 0x21,
	0x27, 0x24, 0xd2, 0x5d, 0x0c, 0x8c, 0xe7, 0xd0, 0x35, 0x71, 0xea, 0xf8, 0x17, 0x68, 0x2d, 0xcf,
	0xa8, 0xde, 0x38, 0x58, 0x3b, 0xea, 0x5a, 0xd1, 0xd0, 0xf8, 0x1a, 0x3a, 0x3c, 0x92, 0x55, 0x33,
	0x17, 0x16, 0xdd, 0xa2, 0x46, 0x72, 0x8b, 0x8c, 0x4f, 0xd0, 0x8b, 0x03, 0x2c, 0xe4, 0x16, 0x2c,
	0xb6, 0x07, 0x10, 0x50, 0xe4, 0xd3, 0xab, 0x54, 0x6c, 0x87, 0xcf, 0xf0, 0x45, 0x76, 0xe0, 0x31,
	0x71, 0xb1, 0x30, 0x36, 0xb9, 0xb1, 0x4d, 0x04, 0xce, 0xd8, 0x87, 0xd6, 0x99, 0xb8, 0x19, 0x4a,
	0x9a, 0x9d, 0x28, 0xcd, 0xb7, 0xb0, 0x25, 0xec, 0xa9, 0x54, 0x4b, 0x2f, 0x57, 0x79, 0xce, 0x2f,
	0x61, 0x23, 0xc6, 0xf0, 0x2d, 0x95, 0x32, 0x8a, 0x04, 0x58, 0x80, 0xa6, 0x44, 0x0b, 0x11, 0x4a,
	0x11, 0xab, 0xab, 0xf1, 0x0a, 0x1e, 0x9f, 0x78, 0xe1, 0xdc, 0x21, 0x26, 0x66, 0xf8, 0x25, 0x4a,
	0xf0, 0x4d, 0xab, 0xc5, 0x86, 0x26, 0x66, 0xf1, 0x1e, 0xbd, 0x21, 0x3e, 0xb3, 0x34, 0xb8, 0xa5,
	0xcd, 0xc7, 0x26, 0x36, 0x7e, 0x83, 0xc1, 0xaf, 0x4c, 0x28, 0xe4, 0xa2, 0x05, 0xf1, 0xc7, 0x2e,
	0x66, 0xa7, 0xcd, 0xc4, 0x45, 0xf5, 0x5a, 0x0a, 0x9f, 0x04, 0xd2, 0x91, 0x33, 0x62, 0x69, 0x76,
	0x00, 0x99, 0xad, 0x29, 0x96, 0x0e, 0x39, 0xc7, 0xd8, 0x80, 0xf5, 0xb7, 0xcb, 0x5b, 0x7a, 0x6f,
	0x91, 0x20, 0x74, 0xe8, 0xb3, 0xbf, 0x07, 0xb0, 0x75, 0x11, 0xbd, 0xd0, 0x97, 0xc4, 0xbf, 0xb3,
	0xaf, 0x89, 0x36, 0x81, 0x27, 0xb3, 0x90, 0x5e, 0xa2, 0x3b, 0xa2, 0xbc, 0xab, 0x4f, 0xe3, 0x57,
	0x24, 0x5d, 0xcb, 0xd1, 0x20, 0x9e, 0x4e, 0x81, 0xb5, 0x6f, 0x61, 0x73, 0x4a, 0xa8, 0x12, 0xbf,
	0x9e, 0x8a, 0x1f, 0x25, 0x30, 0xc5, 0xc7, 0x84, 0x6d, 0xb9, 0x74, 0xf6, 0x3d, 0xde, 0x89, 0x03,
	0xb2, 0xa7, 0xa9, 0x64, 0x07, 0x13, 0x78, 0x3a, 0x25, 0x74, 0xec, 0x38, 0x59, 0xd2, 0x66, 0x86,
	0x34, 0xd2, 0xe3, 0x89, 0xac, 0xeb, 0x39, 0xe8, 0x53, 0x42, 0x33, 0xb3, 0x93, 0x7b, 0x7e, 0x08,
	0xb6, 0xf3, 0x1b, 0x62, 0xf3, 0x15, 0xb4, 0x9f, 0x61, 0xaf, 0x8c, 0x26, 0xce, 0xe3, 0xe7, 0xc5,
	0x48, 0x6e, 0xac, 0xe0, 0x9e, 0xc2, 0x50, 0x8a, 0x96, 0xfb, 0xd6, 0xd4, 0xaa, 0xd9, 0xf7, 0xb0,
	0x2d, 0x14, 0xcb, 0x61, 0x94, 0xd2, 0x25, 0x95, 0xc8, 0xf9, 0x9d, 0xc1, 0xce, 0x94, 0xd0, 0xec,
	0xb4, 0x14, 0x4c, 0x53, 0xf7, 0xc2, 0xc5, 0xaa, 0x60, 0xfd, 0x04, 0xfb, 0xa5, 0x2c, 0x79, 0x7d,
	0xf3, 0x40, 0x21, 0x55, 0x05, 0xd5, 0x84, 0x91, 0xd4, 0xaa, 0xe8, 0x33, 0x5a, 0x4b, 0xae, 0x53,
	0x9e, 0xec, 0xd8, 0x71, 0x8a, 0x48, 0x8a, 0x62, 0xbb, 0xf1, 0xa0, 0xc8, 0x75, 0x06, 0xbb, 0x53,
	0x42, 0x0b, 0x2c, 0x15, 0xba, 0x55, 0x13, 0x3f, 0xc1, 0x61, 0x15, 0xf1, 0x5f, 0xd4, 0xab, 0x66,
	0xbf, 0x84, 0xfe, 0x2c, 0xa4, 0xe9, 0x7e, 0x01, 0x63, 0xad, 0x9f, 0xdc, 0x66, 0xf9, 0xf8, 0x95,
	0x68, 0x96, 0x8b, 0x3e, 0x21, 0xce, 0xc3, 0xa3, 0x5f, 0xf1, 0x87, 0x89, 0x45, 0xc7, 0x1d, 0x4a,
	0xad, 0xd5, 0x0b, 0xe2, 0x6b, 0xad, 0xff, 0x1e, 0x46, 0xf2, 0x02, 0x17, 0xf5, 0x4a, 0x4a, 0xc9,
	0x0f, 0x94, 0xdb, 0x5a, 0xe4, 0x6e, 0xc2, 0xfe, 0x2c, 0xa4, 0x17, 0xde, 0x1d, 0x11, 0x56, 0xd3,
	0xa5, 0x5e, 0x6c, 0x9d, 0x39, 0x61, 0xf0, 0xf0, 0x7d, 0x9d, 0xc3, 0xa1, 0x82, 0xfa, 0x10, 0xd2,
	0x53, 0xdf, 0x5b, 0xae, 0x48, 0x7b, 0x0d, 0x03, 0xa9, 0x52, 0xd2, 0xae, 0xd5, 0x92, 0xb9, 0x08,
	0x50, 0x4b, 0xe7, 0x17, 0xd0, 0x97, 0x3a, 0xa7, 0x1a, 0x46, 0x45, 0xde, 0xa1, 0x22, 0x6f, 0xca,
	0x6b, 0xc2, 0xdf, 0xc2, 0x5c, 0xc7, 0x58, 0x6b, 0xff, 0x25, 0x8c, 0x5a, 0x29, 0xbc, 0x86, 0x81,
	0x4c, 0x41, 0xed, 0x5c, 0x95, 0x2c, 0x46, 0x4a, 0x16, 0xaa, 0xe3, 0x7b, 0x2e, 0xa2, 0xda, 0xaf,
	0xb2, 0x2c, 0xf6, 0xe2, 0x98, 0xa2, 0x3e, 0xa1, 0xb2, 0x22, 0x2a, 0x6c, 0x85, 0x8a, 0x64, 0xba,
	0xe7, 0x92, 0x8a, 0x64, 0xbc, 0x7e, 0x10, 0x5f, 0xa7, 0x6c, 0x03, 0xbd, 0x72, 0x2e, 0x93, 0x62,
	0xde, 0x0a, 0xd5, 0xc9, 0x37, 0xf5, 0x25, 0xd5, 0xc9, 0x3b, 0xbe, 0x01, 0x5d, 0x1e, 0x11, 0xf6,
	0xa5, 0x8e, 0x33, 0xae, 0x77, 0xd1, 0x12, 0xc8, 0x8f, 0xa1, 0x4d, 0x57, 0x84, 0xbc, 0x83, 0xbd,
	0xe8, 0x45, 0xf5, 0x1c, 0xc7, 0xfb, 0x2b, 0xbd, 0xd7, 0x7a, 0xa4, 0x33, 0xf8, 0x42, 0x92, 0x3e,
	0xba, 0xff, 0x91, 0x35, 0x6f, 0xf1, 0x3f, 0xfb, 0xdf, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3c,
	0x09, 0x3a, 0x57, 0xff, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MongoBindServiceClient is the client API for MongoBindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MongoBindServiceClient interface {
	// methods for delay messages
	PutSaveDelayMessage(ctx context.Context, in *IdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error)
	GetDelayMessage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*DelayMessage, error)
	// methods for user chat history
	PutSaveUserChatHistory(ctx context.Context, in *JoinIdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error)
	GetAllUserChatHistory(ctx context.Context, in *JoinId, opts ...grpc.CallOption) (*UserChatHistory, error)
	GetUserChatHistoryByDate(ctx context.Context, in *JoinIdAndDate, opts ...grpc.CallOption) (*UserChatHistory, error)
	GetUserChatHistoryByDateRange(ctx context.Context, in *JoinIdAndDateRange, opts ...grpc.CallOption) (*UserChatHistory, error)
	// methods for group chat history
	PutSaveGroupChatHistory(ctx context.Context, in *IdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error)
	GetAllGroupChatHistory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GroupChatHistory, error)
	GetGroupChatHistoryByDate(ctx context.Context, in *IdAndDate, opts ...grpc.CallOption) (*GroupChatHistory, error)
	GetGroupChatHistoryByDateRange(ctx context.Context, in *IdAndDateRange, opts ...grpc.CallOption) (*GroupChatHistory, error)
	// methods for subscription messages history
	PutSaveSubscriptionHistory(ctx context.Context, in *IdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error)
	GetAllSubscriptionHistory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionHistory, error)
	GetSubscriptionHistoryByDate(ctx context.Context, in *IdAndDate, opts ...grpc.CallOption) (*SubscriptionHistory, error)
	GetSubscriptionHistoryByDateRange(ctx context.Context, in *IdAndDateRange, opts ...grpc.CallOption) (*SubscriptionHistory, error)
	// methods for user's friends, blacklist cache data
	PutUserFriendsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserFriendsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserBlacklistAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserBlacklistDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	GetUserFriendsAndBlacklist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserFriendsAndBlacklist, error)
	PutMoveFriendIntoBlacklistPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutMoveFriendOutFromBlacklistPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	// methods for the user-group-chat and user-subscription relationship cache data
	PutUserGroupChatsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserGroupChatsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	GetUserGroupChats(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserGroupChats, error)
	PutUserSubscriptionsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserSubscriptionsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	GetUserSubscriptions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserSubscriptions, error)
	PutGroupChatUsersAdd(ctx context.Context, in *XAndManagerAndUserId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutGroupChatUsersDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	GetGroupChatUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GroupChatUsers, error)
	PutSubscriptionUsersAdd(ctx context.Context, in *XAndManagerAndUserId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutSubscriptionUsersDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	GetSubscriptionUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionUsers, error)
	PutUserJoinGroupChatPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserQuitGroupChatPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserFollowSubscriptionPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
	PutUserUnFollowSubscriptionPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error)
}

type mongoBindServiceClient struct {
	cc *grpc.ClientConn
}

func NewMongoBindServiceClient(cc *grpc.ClientConn) MongoBindServiceClient {
	return &mongoBindServiceClient{cc}
}

func (c *mongoBindServiceClient) PutSaveDelayMessage(ctx context.Context, in *IdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutSaveDelayMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetDelayMessage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*DelayMessage, error) {
	out := new(DelayMessage)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetDelayMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutSaveUserChatHistory(ctx context.Context, in *JoinIdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutSaveUserChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetAllUserChatHistory(ctx context.Context, in *JoinId, opts ...grpc.CallOption) (*UserChatHistory, error) {
	out := new(UserChatHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetAllUserChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetUserChatHistoryByDate(ctx context.Context, in *JoinIdAndDate, opts ...grpc.CallOption) (*UserChatHistory, error) {
	out := new(UserChatHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetUserChatHistoryByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetUserChatHistoryByDateRange(ctx context.Context, in *JoinIdAndDateRange, opts ...grpc.CallOption) (*UserChatHistory, error) {
	out := new(UserChatHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetUserChatHistoryByDateRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutSaveGroupChatHistory(ctx context.Context, in *IdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutSaveGroupChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetAllGroupChatHistory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GroupChatHistory, error) {
	out := new(GroupChatHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetAllGroupChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetGroupChatHistoryByDate(ctx context.Context, in *IdAndDate, opts ...grpc.CallOption) (*GroupChatHistory, error) {
	out := new(GroupChatHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetGroupChatHistoryByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetGroupChatHistoryByDateRange(ctx context.Context, in *IdAndDateRange, opts ...grpc.CallOption) (*GroupChatHistory, error) {
	out := new(GroupChatHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetGroupChatHistoryByDateRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutSaveSubscriptionHistory(ctx context.Context, in *IdAndMessage, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutSaveSubscriptionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetAllSubscriptionHistory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionHistory, error) {
	out := new(SubscriptionHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetAllSubscriptionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetSubscriptionHistoryByDate(ctx context.Context, in *IdAndDate, opts ...grpc.CallOption) (*SubscriptionHistory, error) {
	out := new(SubscriptionHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetSubscriptionHistoryByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetSubscriptionHistoryByDateRange(ctx context.Context, in *IdAndDateRange, opts ...grpc.CallOption) (*SubscriptionHistory, error) {
	out := new(SubscriptionHistory)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetSubscriptionHistoryByDateRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserFriendsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserFriendsAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserFriendsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserFriendsDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserBlacklistAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserBlacklistAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserBlacklistDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserBlacklistDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetUserFriendsAndBlacklist(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserFriendsAndBlacklist, error) {
	out := new(UserFriendsAndBlacklist)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetUserFriendsAndBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutMoveFriendIntoBlacklistPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutMoveFriendIntoBlacklistPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutMoveFriendOutFromBlacklistPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutMoveFriendOutFromBlacklistPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserGroupChatsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserGroupChatsAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserGroupChatsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserGroupChatsDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetUserGroupChats(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserGroupChats, error) {
	out := new(UserGroupChats)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetUserGroupChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserSubscriptionsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserSubscriptionsAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserSubscriptionsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserSubscriptionsDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetUserSubscriptions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserSubscriptions, error) {
	out := new(UserSubscriptions)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetUserSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutGroupChatUsersAdd(ctx context.Context, in *XAndManagerAndUserId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutGroupChatUsersAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutGroupChatUsersDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutGroupChatUsersDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetGroupChatUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GroupChatUsers, error) {
	out := new(GroupChatUsers)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetGroupChatUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutSubscriptionUsersAdd(ctx context.Context, in *XAndManagerAndUserId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutSubscriptionUsersAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutSubscriptionUsersDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutSubscriptionUsersDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetSubscriptionUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionUsers, error) {
	out := new(SubscriptionUsers)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/GetSubscriptionUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserJoinGroupChatPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserJoinGroupChatPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserQuitGroupChatPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserQuitGroupChatPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserFollowSubscriptionPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserFollowSubscriptionPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) PutUserUnFollowSubscriptionPlus(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*EmptyResult, error) {
	out := new(EmptyResult)
	err := c.cc.Invoke(ctx, "/mongoPb.MongoBindService/PutUserUnFollowSubscriptionPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoBindServiceServer is the server API for MongoBindService service.
type MongoBindServiceServer interface {
	// methods for delay messages
	PutSaveDelayMessage(context.Context, *IdAndMessage) (*EmptyResult, error)
	GetDelayMessage(context.Context, *Id) (*DelayMessage, error)
	// methods for user chat history
	PutSaveUserChatHistory(context.Context, *JoinIdAndMessage) (*EmptyResult, error)
	GetAllUserChatHistory(context.Context, *JoinId) (*UserChatHistory, error)
	GetUserChatHistoryByDate(context.Context, *JoinIdAndDate) (*UserChatHistory, error)
	GetUserChatHistoryByDateRange(context.Context, *JoinIdAndDateRange) (*UserChatHistory, error)
	// methods for group chat history
	PutSaveGroupChatHistory(context.Context, *IdAndMessage) (*EmptyResult, error)
	GetAllGroupChatHistory(context.Context, *Id) (*GroupChatHistory, error)
	GetGroupChatHistoryByDate(context.Context, *IdAndDate) (*GroupChatHistory, error)
	GetGroupChatHistoryByDateRange(context.Context, *IdAndDateRange) (*GroupChatHistory, error)
	// methods for subscription messages history
	PutSaveSubscriptionHistory(context.Context, *IdAndMessage) (*EmptyResult, error)
	GetAllSubscriptionHistory(context.Context, *Id) (*SubscriptionHistory, error)
	GetSubscriptionHistoryByDate(context.Context, *IdAndDate) (*SubscriptionHistory, error)
	GetSubscriptionHistoryByDateRange(context.Context, *IdAndDateRange) (*SubscriptionHistory, error)
	// methods for user's friends, blacklist cache data
	PutUserFriendsAdd(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserFriendsDel(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserBlacklistAdd(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserBlacklistDel(context.Context, *DoubleId) (*EmptyResult, error)
	GetUserFriendsAndBlacklist(context.Context, *Id) (*UserFriendsAndBlacklist, error)
	PutMoveFriendIntoBlacklistPlus(context.Context, *DoubleId) (*EmptyResult, error)
	PutMoveFriendOutFromBlacklistPlus(context.Context, *DoubleId) (*EmptyResult, error)
	// methods for the user-group-chat and user-subscription relationship cache data
	PutUserGroupChatsAdd(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserGroupChatsDel(context.Context, *DoubleId) (*EmptyResult, error)
	GetUserGroupChats(context.Context, *Id) (*UserGroupChats, error)
	PutUserSubscriptionsAdd(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserSubscriptionsDel(context.Context, *DoubleId) (*EmptyResult, error)
	GetUserSubscriptions(context.Context, *Id) (*UserSubscriptions, error)
	PutGroupChatUsersAdd(context.Context, *XAndManagerAndUserId) (*EmptyResult, error)
	PutGroupChatUsersDel(context.Context, *DoubleId) (*EmptyResult, error)
	GetGroupChatUsers(context.Context, *Id) (*GroupChatUsers, error)
	PutSubscriptionUsersAdd(context.Context, *XAndManagerAndUserId) (*EmptyResult, error)
	PutSubscriptionUsersDel(context.Context, *DoubleId) (*EmptyResult, error)
	GetSubscriptionUsers(context.Context, *Id) (*SubscriptionUsers, error)
	PutUserJoinGroupChatPlus(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserQuitGroupChatPlus(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserFollowSubscriptionPlus(context.Context, *DoubleId) (*EmptyResult, error)
	PutUserUnFollowSubscriptionPlus(context.Context, *DoubleId) (*EmptyResult, error)
}

// UnimplementedMongoBindServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMongoBindServiceServer struct {
}

func (*UnimplementedMongoBindServiceServer) PutSaveDelayMessage(ctx context.Context, req *IdAndMessage) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSaveDelayMessage not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetDelayMessage(ctx context.Context, req *Id) (*DelayMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelayMessage not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutSaveUserChatHistory(ctx context.Context, req *JoinIdAndMessage) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSaveUserChatHistory not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetAllUserChatHistory(ctx context.Context, req *JoinId) (*UserChatHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserChatHistory not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetUserChatHistoryByDate(ctx context.Context, req *JoinIdAndDate) (*UserChatHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChatHistoryByDate not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetUserChatHistoryByDateRange(ctx context.Context, req *JoinIdAndDateRange) (*UserChatHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChatHistoryByDateRange not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutSaveGroupChatHistory(ctx context.Context, req *IdAndMessage) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSaveGroupChatHistory not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetAllGroupChatHistory(ctx context.Context, req *Id) (*GroupChatHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroupChatHistory not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetGroupChatHistoryByDate(ctx context.Context, req *IdAndDate) (*GroupChatHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupChatHistoryByDate not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetGroupChatHistoryByDateRange(ctx context.Context, req *IdAndDateRange) (*GroupChatHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupChatHistoryByDateRange not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutSaveSubscriptionHistory(ctx context.Context, req *IdAndMessage) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSaveSubscriptionHistory not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetAllSubscriptionHistory(ctx context.Context, req *Id) (*SubscriptionHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubscriptionHistory not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetSubscriptionHistoryByDate(ctx context.Context, req *IdAndDate) (*SubscriptionHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionHistoryByDate not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetSubscriptionHistoryByDateRange(ctx context.Context, req *IdAndDateRange) (*SubscriptionHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionHistoryByDateRange not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserFriendsAdd(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserFriendsAdd not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserFriendsDel(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserFriendsDel not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserBlacklistAdd(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserBlacklistAdd not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserBlacklistDel(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserBlacklistDel not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetUserFriendsAndBlacklist(ctx context.Context, req *Id) (*UserFriendsAndBlacklist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriendsAndBlacklist not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutMoveFriendIntoBlacklistPlus(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMoveFriendIntoBlacklistPlus not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutMoveFriendOutFromBlacklistPlus(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMoveFriendOutFromBlacklistPlus not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserGroupChatsAdd(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserGroupChatsAdd not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserGroupChatsDel(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserGroupChatsDel not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetUserGroupChats(ctx context.Context, req *Id) (*UserGroupChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupChats not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserSubscriptionsAdd(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserSubscriptionsAdd not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserSubscriptionsDel(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserSubscriptionsDel not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetUserSubscriptions(ctx context.Context, req *Id) (*UserSubscriptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscriptions not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutGroupChatUsersAdd(ctx context.Context, req *XAndManagerAndUserId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGroupChatUsersAdd not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutGroupChatUsersDel(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGroupChatUsersDel not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetGroupChatUsers(ctx context.Context, req *Id) (*GroupChatUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupChatUsers not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutSubscriptionUsersAdd(ctx context.Context, req *XAndManagerAndUserId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSubscriptionUsersAdd not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutSubscriptionUsersDel(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSubscriptionUsersDel not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetSubscriptionUsers(ctx context.Context, req *Id) (*SubscriptionUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionUsers not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserJoinGroupChatPlus(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserJoinGroupChatPlus not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserQuitGroupChatPlus(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserQuitGroupChatPlus not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserFollowSubscriptionPlus(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserFollowSubscriptionPlus not implemented")
}
func (*UnimplementedMongoBindServiceServer) PutUserUnFollowSubscriptionPlus(ctx context.Context, req *DoubleId) (*EmptyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserUnFollowSubscriptionPlus not implemented")
}

func RegisterMongoBindServiceServer(s *grpc.Server, srv MongoBindServiceServer) {
	s.RegisterService(&_MongoBindService_serviceDesc, srv)
}

func _MongoBindService_PutSaveDelayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutSaveDelayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutSaveDelayMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutSaveDelayMessage(ctx, req.(*IdAndMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetDelayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetDelayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetDelayMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetDelayMessage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutSaveUserChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinIdAndMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutSaveUserChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutSaveUserChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutSaveUserChatHistory(ctx, req.(*JoinIdAndMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetAllUserChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetAllUserChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetAllUserChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetAllUserChatHistory(ctx, req.(*JoinId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetUserChatHistoryByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinIdAndDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetUserChatHistoryByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetUserChatHistoryByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetUserChatHistoryByDate(ctx, req.(*JoinIdAndDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetUserChatHistoryByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinIdAndDateRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetUserChatHistoryByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetUserChatHistoryByDateRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetUserChatHistoryByDateRange(ctx, req.(*JoinIdAndDateRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutSaveGroupChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutSaveGroupChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutSaveGroupChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutSaveGroupChatHistory(ctx, req.(*IdAndMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetAllGroupChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetAllGroupChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetAllGroupChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetAllGroupChatHistory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetGroupChatHistoryByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetGroupChatHistoryByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetGroupChatHistoryByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetGroupChatHistoryByDate(ctx, req.(*IdAndDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetGroupChatHistoryByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndDateRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetGroupChatHistoryByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetGroupChatHistoryByDateRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetGroupChatHistoryByDateRange(ctx, req.(*IdAndDateRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutSaveSubscriptionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutSaveSubscriptionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutSaveSubscriptionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutSaveSubscriptionHistory(ctx, req.(*IdAndMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetAllSubscriptionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetAllSubscriptionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetAllSubscriptionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetAllSubscriptionHistory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetSubscriptionHistoryByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetSubscriptionHistoryByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetSubscriptionHistoryByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetSubscriptionHistoryByDate(ctx, req.(*IdAndDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetSubscriptionHistoryByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndDateRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetSubscriptionHistoryByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetSubscriptionHistoryByDateRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetSubscriptionHistoryByDateRange(ctx, req.(*IdAndDateRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserFriendsAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserFriendsAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserFriendsAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserFriendsAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserFriendsDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserFriendsDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserFriendsDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserFriendsDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserBlacklistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserBlacklistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserBlacklistAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserBlacklistAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserBlacklistDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserBlacklistDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserBlacklistDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserBlacklistDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetUserFriendsAndBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetUserFriendsAndBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetUserFriendsAndBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetUserFriendsAndBlacklist(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutMoveFriendIntoBlacklistPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutMoveFriendIntoBlacklistPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutMoveFriendIntoBlacklistPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutMoveFriendIntoBlacklistPlus(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutMoveFriendOutFromBlacklistPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutMoveFriendOutFromBlacklistPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutMoveFriendOutFromBlacklistPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutMoveFriendOutFromBlacklistPlus(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserGroupChatsAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserGroupChatsAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserGroupChatsAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserGroupChatsAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserGroupChatsDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserGroupChatsDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserGroupChatsDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserGroupChatsDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetUserGroupChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetUserGroupChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetUserGroupChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetUserGroupChats(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserSubscriptionsAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserSubscriptionsAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserSubscriptionsAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserSubscriptionsAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserSubscriptionsDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserSubscriptionsDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserSubscriptionsDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserSubscriptionsDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetUserSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetUserSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetUserSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetUserSubscriptions(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutGroupChatUsersAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAndManagerAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutGroupChatUsersAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutGroupChatUsersAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutGroupChatUsersAdd(ctx, req.(*XAndManagerAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutGroupChatUsersDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutGroupChatUsersDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutGroupChatUsersDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutGroupChatUsersDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetGroupChatUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetGroupChatUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetGroupChatUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetGroupChatUsers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutSubscriptionUsersAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAndManagerAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutSubscriptionUsersAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutSubscriptionUsersAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutSubscriptionUsersAdd(ctx, req.(*XAndManagerAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutSubscriptionUsersDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutSubscriptionUsersDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutSubscriptionUsersDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutSubscriptionUsersDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetSubscriptionUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetSubscriptionUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/GetSubscriptionUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetSubscriptionUsers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserJoinGroupChatPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserJoinGroupChatPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserJoinGroupChatPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserJoinGroupChatPlus(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserQuitGroupChatPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserQuitGroupChatPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserQuitGroupChatPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserQuitGroupChatPlus(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserFollowSubscriptionPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserFollowSubscriptionPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserFollowSubscriptionPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserFollowSubscriptionPlus(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_PutUserUnFollowSubscriptionPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).PutUserUnFollowSubscriptionPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongoPb.MongoBindService/PutUserUnFollowSubscriptionPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).PutUserUnFollowSubscriptionPlus(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

var _MongoBindService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mongoPb.MongoBindService",
	HandlerType: (*MongoBindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutSaveDelayMessage",
			Handler:    _MongoBindService_PutSaveDelayMessage_Handler,
		},
		{
			MethodName: "GetDelayMessage",
			Handler:    _MongoBindService_GetDelayMessage_Handler,
		},
		{
			MethodName: "PutSaveUserChatHistory",
			Handler:    _MongoBindService_PutSaveUserChatHistory_Handler,
		},
		{
			MethodName: "GetAllUserChatHistory",
			Handler:    _MongoBindService_GetAllUserChatHistory_Handler,
		},
		{
			MethodName: "GetUserChatHistoryByDate",
			Handler:    _MongoBindService_GetUserChatHistoryByDate_Handler,
		},
		{
			MethodName: "GetUserChatHistoryByDateRange",
			Handler:    _MongoBindService_GetUserChatHistoryByDateRange_Handler,
		},
		{
			MethodName: "PutSaveGroupChatHistory",
			Handler:    _MongoBindService_PutSaveGroupChatHistory_Handler,
		},
		{
			MethodName: "GetAllGroupChatHistory",
			Handler:    _MongoBindService_GetAllGroupChatHistory_Handler,
		},
		{
			MethodName: "GetGroupChatHistoryByDate",
			Handler:    _MongoBindService_GetGroupChatHistoryByDate_Handler,
		},
		{
			MethodName: "GetGroupChatHistoryByDateRange",
			Handler:    _MongoBindService_GetGroupChatHistoryByDateRange_Handler,
		},
		{
			MethodName: "PutSaveSubscriptionHistory",
			Handler:    _MongoBindService_PutSaveSubscriptionHistory_Handler,
		},
		{
			MethodName: "GetAllSubscriptionHistory",
			Handler:    _MongoBindService_GetAllSubscriptionHistory_Handler,
		},
		{
			MethodName: "GetSubscriptionHistoryByDate",
			Handler:    _MongoBindService_GetSubscriptionHistoryByDate_Handler,
		},
		{
			MethodName: "GetSubscriptionHistoryByDateRange",
			Handler:    _MongoBindService_GetSubscriptionHistoryByDateRange_Handler,
		},
		{
			MethodName: "PutUserFriendsAdd",
			Handler:    _MongoBindService_PutUserFriendsAdd_Handler,
		},
		{
			MethodName: "PutUserFriendsDel",
			Handler:    _MongoBindService_PutUserFriendsDel_Handler,
		},
		{
			MethodName: "PutUserBlacklistAdd",
			Handler:    _MongoBindService_PutUserBlacklistAdd_Handler,
		},
		{
			MethodName: "PutUserBlacklistDel",
			Handler:    _MongoBindService_PutUserBlacklistDel_Handler,
		},
		{
			MethodName: "GetUserFriendsAndBlacklist",
			Handler:    _MongoBindService_GetUserFriendsAndBlacklist_Handler,
		},
		{
			MethodName: "PutMoveFriendIntoBlacklistPlus",
			Handler:    _MongoBindService_PutMoveFriendIntoBlacklistPlus_Handler,
		},
		{
			MethodName: "PutMoveFriendOutFromBlacklistPlus",
			Handler:    _MongoBindService_PutMoveFriendOutFromBlacklistPlus_Handler,
		},
		{
			MethodName: "PutUserGroupChatsAdd",
			Handler:    _MongoBindService_PutUserGroupChatsAdd_Handler,
		},
		{
			MethodName: "PutUserGroupChatsDel",
			Handler:    _MongoBindService_PutUserGroupChatsDel_Handler,
		},
		{
			MethodName: "GetUserGroupChats",
			Handler:    _MongoBindService_GetUserGroupChats_Handler,
		},
		{
			MethodName: "PutUserSubscriptionsAdd",
			Handler:    _MongoBindService_PutUserSubscriptionsAdd_Handler,
		},
		{
			MethodName: "PutUserSubscriptionsDel",
			Handler:    _MongoBindService_PutUserSubscriptionsDel_Handler,
		},
		{
			MethodName: "GetUserSubscriptions",
			Handler:    _MongoBindService_GetUserSubscriptions_Handler,
		},
		{
			MethodName: "PutGroupChatUsersAdd",
			Handler:    _MongoBindService_PutGroupChatUsersAdd_Handler,
		},
		{
			MethodName: "PutGroupChatUsersDel",
			Handler:    _MongoBindService_PutGroupChatUsersDel_Handler,
		},
		{
			MethodName: "GetGroupChatUsers",
			Handler:    _MongoBindService_GetGroupChatUsers_Handler,
		},
		{
			MethodName: "PutSubscriptionUsersAdd",
			Handler:    _MongoBindService_PutSubscriptionUsersAdd_Handler,
		},
		{
			MethodName: "PutSubscriptionUsersDel",
			Handler:    _MongoBindService_PutSubscriptionUsersDel_Handler,
		},
		{
			MethodName: "GetSubscriptionUsers",
			Handler:    _MongoBindService_GetSubscriptionUsers_Handler,
		},
		{
			MethodName: "PutUserJoinGroupChatPlus",
			Handler:    _MongoBindService_PutUserJoinGroupChatPlus_Handler,
		},
		{
			MethodName: "PutUserQuitGroupChatPlus",
			Handler:    _MongoBindService_PutUserQuitGroupChatPlus_Handler,
		},
		{
			MethodName: "PutUserFollowSubscriptionPlus",
			Handler:    _MongoBindService_PutUserFollowSubscriptionPlus_Handler,
		},
		{
			MethodName: "PutUserUnFollowSubscriptionPlus",
			Handler:    _MongoBindService_PutUserUnFollowSubscriptionPlus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongoBind.proto",
}

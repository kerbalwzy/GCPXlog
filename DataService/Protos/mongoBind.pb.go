// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mongoBind.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// use for save or query delayed message which should sent to when user online
// at once. When the operate is saving, only need use `UserId` and `Message` fields,
// when the operate is query, only need use `UserId` and `MessageList` fields.
type DelayedMessage struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MessageList          [][]byte `protobuf:"bytes,3,rep,name=message_list,json=messageList,proto3" json:"message_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelayedMessage) Reset()         { *m = DelayedMessage{} }
func (m *DelayedMessage) String() string { return proto.CompactTextString(m) }
func (*DelayedMessage) ProtoMessage()    {}
func (*DelayedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{0}
}

func (m *DelayedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelayedMessage.Unmarshal(m, b)
}
func (m *DelayedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelayedMessage.Marshal(b, m, deterministic)
}
func (m *DelayedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayedMessage.Merge(m, src)
}
func (m *DelayedMessage) XXX_Size() int {
	return xxx_messageInfo_DelayedMessage.Size(m)
}
func (m *DelayedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DelayedMessage proto.InternalMessageInfo

func (m *DelayedMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DelayedMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DelayedMessage) GetMessageList() [][]byte {
	if m != nil {
		return m.MessageList
	}
	return nil
}

// use for add or delete one friend's id, or query all friend's id.
type UserFriend struct {
	SelfId               int64    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	FriendId             int64    `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	FriendIdList         []int64  `protobuf:"varint,3,rep,packed,name=friend_id_list,json=friendIdList,proto3" json:"friend_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserFriend) Reset()         { *m = UserFriend{} }
func (m *UserFriend) String() string { return proto.CompactTextString(m) }
func (*UserFriend) ProtoMessage()    {}
func (*UserFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{1}
}

func (m *UserFriend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserFriend.Unmarshal(m, b)
}
func (m *UserFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserFriend.Marshal(b, m, deterministic)
}
func (m *UserFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFriend.Merge(m, src)
}
func (m *UserFriend) XXX_Size() int {
	return xxx_messageInfo_UserFriend.Size(m)
}
func (m *UserFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFriend.DiscardUnknown(m)
}

var xxx_messageInfo_UserFriend proto.InternalMessageInfo

func (m *UserFriend) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *UserFriend) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *UserFriend) GetFriendIdList() []int64 {
	if m != nil {
		return m.FriendIdList
	}
	return nil
}

// use for operate the user's blacklist
type UserBlacklist struct {
	SelfId               int64    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	FriendId             int64    `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	FriendIdList         []int64  `protobuf:"varint,3,rep,packed,name=friend_id_list,json=friendIdList,proto3" json:"friend_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserBlacklist) Reset()         { *m = UserBlacklist{} }
func (m *UserBlacklist) String() string { return proto.CompactTextString(m) }
func (*UserBlacklist) ProtoMessage()    {}
func (*UserBlacklist) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{2}
}

func (m *UserBlacklist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserBlacklist.Unmarshal(m, b)
}
func (m *UserBlacklist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserBlacklist.Marshal(b, m, deterministic)
}
func (m *UserBlacklist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBlacklist.Merge(m, src)
}
func (m *UserBlacklist) XXX_Size() int {
	return xxx_messageInfo_UserBlacklist.Size(m)
}
func (m *UserBlacklist) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBlacklist.DiscardUnknown(m)
}

var xxx_messageInfo_UserBlacklist proto.InternalMessageInfo

func (m *UserBlacklist) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *UserBlacklist) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *UserBlacklist) GetFriendIdList() []int64 {
	if m != nil {
		return m.FriendIdList
	}
	return nil
}

// use for operate the group chat data
type GroupChatInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserIdList           []int64  `protobuf:"varint,3,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupChatInfo) Reset()         { *m = GroupChatInfo{} }
func (m *GroupChatInfo) String() string { return proto.CompactTextString(m) }
func (*GroupChatInfo) ProtoMessage()    {}
func (*GroupChatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{3}
}

func (m *GroupChatInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupChatInfo.Unmarshal(m, b)
}
func (m *GroupChatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupChatInfo.Marshal(b, m, deterministic)
}
func (m *GroupChatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupChatInfo.Merge(m, src)
}
func (m *GroupChatInfo) XXX_Size() int {
	return xxx_messageInfo_GroupChatInfo.Size(m)
}
func (m *GroupChatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupChatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupChatInfo proto.InternalMessageInfo

func (m *GroupChatInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupChatInfo) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupChatInfo) GetUserIdList() []int64 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

// use for operate the subscription of user
type SubscriptionInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserIdList           []int64  `protobuf:"varint,3,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionInfo) Reset()         { *m = SubscriptionInfo{} }
func (m *SubscriptionInfo) String() string { return proto.CompactTextString(m) }
func (*SubscriptionInfo) ProtoMessage()    {}
func (*SubscriptionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0561428ad23b023f, []int{4}
}

func (m *SubscriptionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionInfo.Unmarshal(m, b)
}
func (m *SubscriptionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionInfo.Marshal(b, m, deterministic)
}
func (m *SubscriptionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionInfo.Merge(m, src)
}
func (m *SubscriptionInfo) XXX_Size() int {
	return xxx_messageInfo_SubscriptionInfo.Size(m)
}
func (m *SubscriptionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionInfo proto.InternalMessageInfo

func (m *SubscriptionInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SubscriptionInfo) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SubscriptionInfo) GetUserIdList() []int64 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

func init() {
	proto.RegisterType((*DelayedMessage)(nil), "pb.DelayedMessage")
	proto.RegisterType((*UserFriend)(nil), "pb.UserFriend")
	proto.RegisterType((*UserBlacklist)(nil), "pb.UserBlacklist")
	proto.RegisterType((*GroupChatInfo)(nil), "pb.GroupChatInfo")
	proto.RegisterType((*SubscriptionInfo)(nil), "pb.SubscriptionInfo")
}

func init() { proto.RegisterFile("mongoBind.proto", fileDescriptor_0561428ad23b023f) }

var fileDescriptor_0561428ad23b023f = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0x1c, 0x29, 0x85, 0xc1, 0x35, 0xed, 0x50, 0x48, 0x30, 0x97, 0x50, 0x71, 0xc8, 0x29,
	0x42, 0x70, 0xa3, 0x95, 0x50, 0xda, 0x10, 0x2b, 0x12, 0x55, 0xa4, 0xa4, 0x5c, 0x90, 0x50, 0xe5,
	0x64, 0xc7, 0xed, 0xaa, 0x1b, 0xaf, 0xb5, 0xbb, 0xa9, 0xc4, 0x7f, 0xe6, 0x47, 0xa0, 0xb5, 0xe3,
	0x8f, 0xa4, 0x3d, 0xc4, 0x11, 0xdc, 0x3c, 0x6f, 0xde, 0x9b, 0x37, 0x5e, 0xbf, 0x35, 0xbc, 0x5c,
	0xca, 0xf8, 0x56, 0x5e, 0xf0, 0x98, 0xf5, 0x13, 0x25, 0x8d, 0x44, 0x27, 0x99, 0x9f, 0x46, 0xe0,
	0x0d, 0x49, 0x84, 0xbf, 0x89, 0x5d, 0x91, 0xd6, 0xe1, 0x2d, 0x61, 0x1b, 0x0e, 0x56, 0x9a, 0xd4,
	0x0d, 0x67, 0x9d, 0x46, 0xb7, 0xd1, 0x6b, 0x4e, 0x5b, 0xb6, 0x1c, 0x33, 0xec, 0xc0, 0xc1, 0x32,
	0xe3, 0x74, 0x9c, 0x6e, 0xa3, 0xe7, 0x4e, 0xf3, 0x12, 0xdf, 0x83, 0xbb, 0x7e, 0xbc, 0x11, 0x5c,
	0x9b, 0x4e, 0xb3, 0xdb, 0xec, 0xb9, 0xd3, 0x17, 0x6b, 0xec, 0x3b, 0xd7, 0xe6, 0xf4, 0x0e, 0xe0,
	0x87, 0x26, 0x35, 0x52, 0x9c, 0x62, 0x66, 0x3d, 0x34, 0x89, 0xa8, 0xe2, 0x61, 0xcb, 0x31, 0xc3,
	0x77, 0xf0, 0x3c, 0x4a, 0x29, 0xb6, 0xe5, 0xa4, 0xad, 0x67, 0x19, 0x30, 0x66, 0xf8, 0x01, 0xbc,
	0xa2, 0x59, 0x1a, 0x35, 0xa7, 0x6e, 0xce, 0x48, 0x9d, 0xee, 0xe1, 0xd0, 0x3a, 0x5d, 0x88, 0x70,
	0x71, 0x6f, 0x49, 0xff, 0xd5, 0xec, 0x27, 0x1c, 0x06, 0x4a, 0xae, 0x92, 0xcb, 0xbb, 0xd0, 0x8c,
	0xe3, 0x48, 0xa2, 0x07, 0x4e, 0xe1, 0xe3, 0x70, 0x56, 0x3d, 0x4d, 0x67, 0xe3, 0x34, 0xbb, 0xe0,
	0xae, 0x1b, 0xd5, 0xe9, 0x90, 0x75, 0xd3, 0xd9, 0xbf, 0xe0, 0x68, 0xb6, 0x9a, 0xeb, 0x85, 0xe2,
	0x89, 0xe1, 0x32, 0xfe, 0xc7, 0xe3, 0x3f, 0xfd, 0x69, 0xc1, 0xd1, 0x55, 0x9e, 0x88, 0x19, 0xa9,
	0x07, 0xbe, 0x20, 0x3c, 0x07, 0x9c, 0x85, 0x0f, 0xb4, 0x15, 0x09, 0xec, 0x27, 0xf3, 0xfe, 0x26,
	0xe6, 0x3f, 0x81, 0xe1, 0x19, 0x1c, 0x07, 0x64, 0xf6, 0x14, 0x7f, 0x04, 0x6f, 0xc0, 0xd8, 0x24,
	0xa6, 0x51, 0xfe, 0x09, 0x3c, 0xcb, 0x2a, 0x53, 0xe3, 0x6f, 0xd5, 0x56, 0x31, 0x24, 0x51, 0x53,
	0x11, 0x90, 0x19, 0x08, 0xb1, 0xb3, 0xe2, 0x2b, 0xb4, 0xab, 0x5b, 0x5d, 0xcb, 0x32, 0x57, 0xc7,
	0x39, 0xb5, 0x80, 0xfc, 0xc7, 0x10, 0x0e, 0xe0, 0x6d, 0x75, 0xc9, 0x91, 0x92, 0xcb, 0xba, 0x23,
	0xbe, 0x00, 0x06, 0x64, 0x8a, 0x7a, 0x12, 0xd9, 0xf6, 0xee, 0xda, 0x01, 0x63, 0x16, 0xbb, 0x96,
	0x45, 0x52, 0x33, 0xed, 0x46, 0x70, 0xfd, 0xc7, 0x10, 0x9e, 0xc3, 0xc9, 0x90, 0x44, 0x76, 0x18,
	0x72, 0x59, 0x57, 0x7d, 0x06, 0xaf, 0x02, 0x32, 0x56, 0xad, 0x27, 0x51, 0x5d, 0xf1, 0x25, 0xbc,
	0x2e, 0xd6, 0xae, 0x5e, 0x02, 0x3c, 0xb1, 0xdc, 0xed, 0x6b, 0xe1, 0x3f, 0x89, 0xe2, 0x37, 0x68,
	0x57, 0xf6, 0xdf, 0x7b, 0xcc, 0x10, 0xde, 0x94, 0x2f, 0xb2, 0xef, 0x94, 0x79, 0x2b, 0xfd, 0xe7,
	0x7e, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x65, 0xbe, 0x05, 0x64, 0x86, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MongoBindServiceClient is the client API for MongoBindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MongoBindServiceClient interface {
	SaveDelayedMessage(ctx context.Context, in *DelayedMessage, opts ...grpc.CallOption) (*DelayedMessage, error)
	GetDelayedMessage(ctx context.Context, in *DelayedMessage, opts ...grpc.CallOption) (*DelayedMessage, error)
	AddOneFriendId(ctx context.Context, in *UserFriend, opts ...grpc.CallOption) (*UserFriend, error)
	DelOneFriendId(ctx context.Context, in *UserFriend, opts ...grpc.CallOption) (*UserFriend, error)
	GetAllFriendId(ctx context.Context, in *UserFriend, opts ...grpc.CallOption) (*UserFriend, error)
	AddOneFriendToBlacklist(ctx context.Context, in *UserBlacklist, opts ...grpc.CallOption) (*UserBlacklist, error)
	DelOneFriendFromBlacklist(ctx context.Context, in *UserBlacklist, opts ...grpc.CallOption) (*UserBlacklist, error)
	GetBlacklistOfUser(ctx context.Context, in *UserBlacklist, opts ...grpc.CallOption) (*UserBlacklist, error)
	AddUserToGroupChat(ctx context.Context, in *GroupChatInfo, opts ...grpc.CallOption) (*GroupChatInfo, error)
	DelUserFromGroupChat(ctx context.Context, in *GroupChatInfo, opts ...grpc.CallOption) (*GroupChatInfo, error)
	GetUsersOfGroupChat(ctx context.Context, in *GroupChatInfo, opts ...grpc.CallOption) (*GroupChatInfo, error)
	AddUserToSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*SubscriptionInfo, error)
	DelUserFromSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*SubscriptionInfo, error)
	GetUsersOfSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*SubscriptionInfo, error)
}

type mongoBindServiceClient struct {
	cc *grpc.ClientConn
}

func NewMongoBindServiceClient(cc *grpc.ClientConn) MongoBindServiceClient {
	return &mongoBindServiceClient{cc}
}

func (c *mongoBindServiceClient) SaveDelayedMessage(ctx context.Context, in *DelayedMessage, opts ...grpc.CallOption) (*DelayedMessage, error) {
	out := new(DelayedMessage)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/SaveDelayedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetDelayedMessage(ctx context.Context, in *DelayedMessage, opts ...grpc.CallOption) (*DelayedMessage, error) {
	out := new(DelayedMessage)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/GetDelayedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) AddOneFriendId(ctx context.Context, in *UserFriend, opts ...grpc.CallOption) (*UserFriend, error) {
	out := new(UserFriend)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/AddOneFriendId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) DelOneFriendId(ctx context.Context, in *UserFriend, opts ...grpc.CallOption) (*UserFriend, error) {
	out := new(UserFriend)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/DelOneFriendId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetAllFriendId(ctx context.Context, in *UserFriend, opts ...grpc.CallOption) (*UserFriend, error) {
	out := new(UserFriend)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/GetAllFriendId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) AddOneFriendToBlacklist(ctx context.Context, in *UserBlacklist, opts ...grpc.CallOption) (*UserBlacklist, error) {
	out := new(UserBlacklist)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/AddOneFriendToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) DelOneFriendFromBlacklist(ctx context.Context, in *UserBlacklist, opts ...grpc.CallOption) (*UserBlacklist, error) {
	out := new(UserBlacklist)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/DelOneFriendFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetBlacklistOfUser(ctx context.Context, in *UserBlacklist, opts ...grpc.CallOption) (*UserBlacklist, error) {
	out := new(UserBlacklist)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/GetBlacklistOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) AddUserToGroupChat(ctx context.Context, in *GroupChatInfo, opts ...grpc.CallOption) (*GroupChatInfo, error) {
	out := new(GroupChatInfo)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/AddUserToGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) DelUserFromGroupChat(ctx context.Context, in *GroupChatInfo, opts ...grpc.CallOption) (*GroupChatInfo, error) {
	out := new(GroupChatInfo)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/DelUserFromGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetUsersOfGroupChat(ctx context.Context, in *GroupChatInfo, opts ...grpc.CallOption) (*GroupChatInfo, error) {
	out := new(GroupChatInfo)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/GetUsersOfGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) AddUserToSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*SubscriptionInfo, error) {
	out := new(SubscriptionInfo)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/AddUserToSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) DelUserFromSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*SubscriptionInfo, error) {
	out := new(SubscriptionInfo)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/DelUserFromSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoBindServiceClient) GetUsersOfSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*SubscriptionInfo, error) {
	out := new(SubscriptionInfo)
	err := c.cc.Invoke(ctx, "/pb.MongoBindService/GetUsersOfSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoBindServiceServer is the server API for MongoBindService service.
type MongoBindServiceServer interface {
	SaveDelayedMessage(context.Context, *DelayedMessage) (*DelayedMessage, error)
	GetDelayedMessage(context.Context, *DelayedMessage) (*DelayedMessage, error)
	AddOneFriendId(context.Context, *UserFriend) (*UserFriend, error)
	DelOneFriendId(context.Context, *UserFriend) (*UserFriend, error)
	GetAllFriendId(context.Context, *UserFriend) (*UserFriend, error)
	AddOneFriendToBlacklist(context.Context, *UserBlacklist) (*UserBlacklist, error)
	DelOneFriendFromBlacklist(context.Context, *UserBlacklist) (*UserBlacklist, error)
	GetBlacklistOfUser(context.Context, *UserBlacklist) (*UserBlacklist, error)
	AddUserToGroupChat(context.Context, *GroupChatInfo) (*GroupChatInfo, error)
	DelUserFromGroupChat(context.Context, *GroupChatInfo) (*GroupChatInfo, error)
	GetUsersOfGroupChat(context.Context, *GroupChatInfo) (*GroupChatInfo, error)
	AddUserToSubscription(context.Context, *SubscriptionInfo) (*SubscriptionInfo, error)
	DelUserFromSubscription(context.Context, *SubscriptionInfo) (*SubscriptionInfo, error)
	GetUsersOfSubscription(context.Context, *SubscriptionInfo) (*SubscriptionInfo, error)
}

// UnimplementedMongoBindServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMongoBindServiceServer struct {
}

func (*UnimplementedMongoBindServiceServer) SaveDelayedMessage(ctx context.Context, req *DelayedMessage) (*DelayedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDelayedMessage not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetDelayedMessage(ctx context.Context, req *DelayedMessage) (*DelayedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelayedMessage not implemented")
}
func (*UnimplementedMongoBindServiceServer) AddOneFriendId(ctx context.Context, req *UserFriend) (*UserFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneFriendId not implemented")
}
func (*UnimplementedMongoBindServiceServer) DelOneFriendId(ctx context.Context, req *UserFriend) (*UserFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOneFriendId not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetAllFriendId(ctx context.Context, req *UserFriend) (*UserFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFriendId not implemented")
}
func (*UnimplementedMongoBindServiceServer) AddOneFriendToBlacklist(ctx context.Context, req *UserBlacklist) (*UserBlacklist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneFriendToBlacklist not implemented")
}
func (*UnimplementedMongoBindServiceServer) DelOneFriendFromBlacklist(ctx context.Context, req *UserBlacklist) (*UserBlacklist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOneFriendFromBlacklist not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetBlacklistOfUser(ctx context.Context, req *UserBlacklist) (*UserBlacklist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistOfUser not implemented")
}
func (*UnimplementedMongoBindServiceServer) AddUserToGroupChat(ctx context.Context, req *GroupChatInfo) (*GroupChatInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToGroupChat not implemented")
}
func (*UnimplementedMongoBindServiceServer) DelUserFromGroupChat(ctx context.Context, req *GroupChatInfo) (*GroupChatInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserFromGroupChat not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetUsersOfGroupChat(ctx context.Context, req *GroupChatInfo) (*GroupChatInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOfGroupChat not implemented")
}
func (*UnimplementedMongoBindServiceServer) AddUserToSubscription(ctx context.Context, req *SubscriptionInfo) (*SubscriptionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToSubscription not implemented")
}
func (*UnimplementedMongoBindServiceServer) DelUserFromSubscription(ctx context.Context, req *SubscriptionInfo) (*SubscriptionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserFromSubscription not implemented")
}
func (*UnimplementedMongoBindServiceServer) GetUsersOfSubscription(ctx context.Context, req *SubscriptionInfo) (*SubscriptionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOfSubscription not implemented")
}

func RegisterMongoBindServiceServer(s *grpc.Server, srv MongoBindServiceServer) {
	s.RegisterService(&_MongoBindService_serviceDesc, srv)
}

func _MongoBindService_SaveDelayedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).SaveDelayedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/SaveDelayedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).SaveDelayedMessage(ctx, req.(*DelayedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetDelayedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetDelayedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/GetDelayedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetDelayedMessage(ctx, req.(*DelayedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_AddOneFriendId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).AddOneFriendId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/AddOneFriendId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).AddOneFriendId(ctx, req.(*UserFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_DelOneFriendId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).DelOneFriendId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/DelOneFriendId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).DelOneFriendId(ctx, req.(*UserFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetAllFriendId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetAllFriendId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/GetAllFriendId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetAllFriendId(ctx, req.(*UserFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_AddOneFriendToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBlacklist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).AddOneFriendToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/AddOneFriendToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).AddOneFriendToBlacklist(ctx, req.(*UserBlacklist))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_DelOneFriendFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBlacklist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).DelOneFriendFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/DelOneFriendFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).DelOneFriendFromBlacklist(ctx, req.(*UserBlacklist))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetBlacklistOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBlacklist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetBlacklistOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/GetBlacklistOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetBlacklistOfUser(ctx, req.(*UserBlacklist))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_AddUserToGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).AddUserToGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/AddUserToGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).AddUserToGroupChat(ctx, req.(*GroupChatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_DelUserFromGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).DelUserFromGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/DelUserFromGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).DelUserFromGroupChat(ctx, req.(*GroupChatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetUsersOfGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetUsersOfGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/GetUsersOfGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetUsersOfGroupChat(ctx, req.(*GroupChatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_AddUserToSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).AddUserToSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/AddUserToSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).AddUserToSubscription(ctx, req.(*SubscriptionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_DelUserFromSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).DelUserFromSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/DelUserFromSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).DelUserFromSubscription(ctx, req.(*SubscriptionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoBindService_GetUsersOfSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoBindServiceServer).GetUsersOfSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MongoBindService/GetUsersOfSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoBindServiceServer).GetUsersOfSubscription(ctx, req.(*SubscriptionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MongoBindService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MongoBindService",
	HandlerType: (*MongoBindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveDelayedMessage",
			Handler:    _MongoBindService_SaveDelayedMessage_Handler,
		},
		{
			MethodName: "GetDelayedMessage",
			Handler:    _MongoBindService_GetDelayedMessage_Handler,
		},
		{
			MethodName: "AddOneFriendId",
			Handler:    _MongoBindService_AddOneFriendId_Handler,
		},
		{
			MethodName: "DelOneFriendId",
			Handler:    _MongoBindService_DelOneFriendId_Handler,
		},
		{
			MethodName: "GetAllFriendId",
			Handler:    _MongoBindService_GetAllFriendId_Handler,
		},
		{
			MethodName: "AddOneFriendToBlacklist",
			Handler:    _MongoBindService_AddOneFriendToBlacklist_Handler,
		},
		{
			MethodName: "DelOneFriendFromBlacklist",
			Handler:    _MongoBindService_DelOneFriendFromBlacklist_Handler,
		},
		{
			MethodName: "GetBlacklistOfUser",
			Handler:    _MongoBindService_GetBlacklistOfUser_Handler,
		},
		{
			MethodName: "AddUserToGroupChat",
			Handler:    _MongoBindService_AddUserToGroupChat_Handler,
		},
		{
			MethodName: "DelUserFromGroupChat",
			Handler:    _MongoBindService_DelUserFromGroupChat_Handler,
		},
		{
			MethodName: "GetUsersOfGroupChat",
			Handler:    _MongoBindService_GetUsersOfGroupChat_Handler,
		},
		{
			MethodName: "AddUserToSubscription",
			Handler:    _MongoBindService_AddUserToSubscription_Handler,
		},
		{
			MethodName: "DelUserFromSubscription",
			Handler:    _MongoBindService_DelUserFromSubscription_Handler,
		},
		{
			MethodName: "GetUsersOfSubscription",
			Handler:    _MongoBindService_GetUsersOfSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongoBind.proto",
}

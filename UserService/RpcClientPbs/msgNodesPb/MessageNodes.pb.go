// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MessageNodes.proto

package messageNodesPb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Result struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7c8858607001c32, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type DoubleId struct {
	MainId               int64    `protobuf:"varint,1,opt,name=main_id,json=mainId,proto3" json:"main_id,omitempty"`
	OtherId              int64    `protobuf:"varint,2,opt,name=other_id,json=otherId,proto3" json:"other_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoubleId) Reset()         { *m = DoubleId{} }
func (m *DoubleId) String() string { return proto.CompactTextString(m) }
func (*DoubleId) ProtoMessage()    {}
func (*DoubleId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7c8858607001c32, []int{1}
}

func (m *DoubleId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoubleId.Unmarshal(m, b)
}
func (m *DoubleId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoubleId.Marshal(b, m, deterministic)
}
func (m *DoubleId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleId.Merge(m, src)
}
func (m *DoubleId) XXX_Size() int {
	return xxx_messageInfo_DoubleId.Size(m)
}
func (m *DoubleId) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleId.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleId proto.InternalMessageInfo

func (m *DoubleId) GetMainId() int64 {
	if m != nil {
		return m.MainId
	}
	return 0
}

func (m *DoubleId) GetOtherId() int64 {
	if m != nil {
		return m.OtherId
	}
	return 0
}

type CleanNodePoolAuth struct {
	SecretKey            string   `protobuf:"bytes,1,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanNodePoolAuth) Reset()         { *m = CleanNodePoolAuth{} }
func (m *CleanNodePoolAuth) String() string { return proto.CompactTextString(m) }
func (*CleanNodePoolAuth) ProtoMessage()    {}
func (*CleanNodePoolAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7c8858607001c32, []int{2}
}

func (m *CleanNodePoolAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanNodePoolAuth.Unmarshal(m, b)
}
func (m *CleanNodePoolAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanNodePoolAuth.Marshal(b, m, deterministic)
}
func (m *CleanNodePoolAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanNodePoolAuth.Merge(m, src)
}
func (m *CleanNodePoolAuth) XXX_Size() int {
	return xxx_messageInfo_CleanNodePoolAuth.Size(m)
}
func (m *CleanNodePoolAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanNodePoolAuth.DiscardUnknown(m)
}

var xxx_messageInfo_CleanNodePoolAuth proto.InternalMessageInfo

func (m *CleanNodePoolAuth) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Result)(nil), "messageNodesPb.Result")
	proto.RegisterType((*DoubleId)(nil), "messageNodesPb.DoubleId")
	proto.RegisterType((*CleanNodePoolAuth)(nil), "messageNodesPb.CleanNodePoolAuth")
}

func init() { proto.RegisterFile("MessageNodes.proto", fileDescriptor_e7c8858607001c32) }

var fileDescriptor_e7c8858607001c32 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6f, 0xda, 0x40,
	0x10, 0xc5, 0x05, 0x6d, 0xc1, 0x9e, 0x43, 0xab, 0xae, 0x50, 0x4b, 0xff, 0xa9, 0xe0, 0x13, 0x27,
	0x0e, 0xf4, 0xd4, 0x4b, 0x25, 0xfe, 0x88, 0x62, 0xb5, 0xb4, 0xc8, 0x24, 0x91, 0x72, 0x09, 0x5a,
	0x7b, 0x27, 0xb0, 0xc2, 0xf6, 0xa2, 0xdd, 0x35, 0x92, 0x3f, 0x48, 0xbe, 0x6f, 0xe4, 0x0d, 0x8e,
	0x02, 0xce, 0x69, 0xc9, 0xcd, 0x3b, 0x4f, 0xfb, 0xf3, 0x7b, 0xa3, 0x99, 0x05, 0x32, 0x47, 0xa5,
	0xe8, 0x1a, 0xff, 0x09, 0x86, 0xaa, 0xbf, 0x93, 0x42, 0x0b, 0xf2, 0x36, 0x79, 0x52, 0x5b, 0x84,
	0xde, 0x4f, 0x68, 0x04, 0xa8, 0xb2, 0x58, 0x13, 0x02, 0xaf, 0x23, 0xc1, 0xb0, 0x5d, 0xeb, 0xd4,
	0x7a, 0x6f, 0x02, 0xf3, 0x4d, 0xbe, 0x80, 0x8b, 0x52, 0x0a, 0xb9, 0x4a, 0xd4, 0xba, 0x5d, 0xef,
	0xd4, 0x7a, 0x6e, 0xe0, 0x98, 0xc2, 0x5c, 0xad, 0xbd, 0x5f, 0xe0, 0x4c, 0x44, 0x16, 0xc6, 0xe8,
	0x33, 0xf2, 0x11, 0x9a, 0x09, 0xe5, 0xe9, 0x8a, 0x33, 0x73, 0xff, 0x55, 0xd0, 0x28, 0x8e, 0x3e,
	0x23, 0x9f, 0xc0, 0x11, 0x7a, 0x83, 0xb2, 0x50, 0xea, 0x46, 0x69, 0x9a, 0xb3, 0xcf, 0xbc, 0x01,
	0xbc, 0x1f, 0xc7, 0x48, 0xd3, 0xc2, 0xca, 0x42, 0x88, 0x78, 0x98, 0xe9, 0x0d, 0xf9, 0x06, 0xa0,
	0x30, 0x92, 0xa8, 0x57, 0x5b, 0xcc, 0x0d, 0xcb, 0x0d, 0xdc, 0x87, 0xca, 0x1f, 0xcc, 0x07, 0x77,
	0x0e, 0xb8, 0xc6, 0xfa, 0x84, 0x6a, 0x4a, 0xa6, 0x40, 0x2e, 0x15, 0xca, 0xa2, 0x30, 0x95, 0x1c,
	0x53, 0xa6, 0x86, 0x8c, 0x91, 0x76, 0xff, 0x38, 0x63, 0xbf, 0x74, 0xf9, 0xf9, 0xc3, 0xa9, 0x72,
	0x88, 0x5e, 0xe5, 0x4c, 0x30, 0xb6, 0xe0, 0xcc, 0xa0, 0x55, 0x72, 0x46, 0x31, 0x8d, 0xb6, 0x31,
	0x57, 0xda, 0xce, 0xd1, 0x73, 0x24, 0x3b, 0x4f, 0x4b, 0xf8, 0x5e, 0x92, 0xe6, 0x62, 0x7f, 0xc8,
	0xe7, 0xa7, 0x5a, 0x3c, 0x72, 0x2d, 0xa0, 0x57, 0xe0, 0x55, 0xa1, 0xff, 0x33, 0x3d, 0x95, 0x22,
	0x39, 0x87, 0x3b, 0x83, 0xd6, 0x6f, 0x29, 0xb2, 0xdd, 0x78, 0x43, 0x75, 0x21, 0x15, 0x3f, 0xb1,
	0x6e, 0x60, 0x85, 0x64, 0xd7, 0xc0, 0x31, 0xbc, 0x5b, 0x66, 0xa1, 0x32, 0xc3, 0x41, 0x53, 0xcb,
	0x09, 0x3b, 0x81, 0xd8, 0x39, 0xb9, 0x81, 0xee, 0x51, 0x26, 0x55, 0x6c, 0x8d, 0x59, 0xa1, 0x51,
	0xfe, 0x97, 0xdf, 0xe2, 0x05, 0x4f, 0x90, 0x74, 0x4f, 0x2f, 0x57, 0x76, 0xcc, 0x8a, 0x3f, 0x8c,
	0x34, 0xdf, 0x73, 0x9d, 0x9f, 0xc3, 0xbf, 0x86, 0xaf, 0x65, 0x13, 0x5e, 0xd8, 0x7a, 0xd8, 0x30,
	0xaf, 0xdb, 0x8f, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0xbe, 0x89, 0x70, 0xf3, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodesDataClient is the client API for NodesData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodesDataClient interface {
	UserNodeFriendsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	UserNodeFriendsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	UserNodeBlacklistAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	UserNodeBlacklistDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	UserNodeMoveFriendIntoBlacklist(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	UserNodeMoveFriendOutFromBlacklist(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	GroupChatNodeUserAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	GroupChatNodeUserDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	SubsNodeFansAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	SubsNodeFansDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error)
	GroupChatNodesPoolCleanByLifeTime(ctx context.Context, in *CleanNodePoolAuth, opts ...grpc.CallOption) (*Result, error)
	GroupChatNodesPoolCleanByActivity(ctx context.Context, in *CleanNodePoolAuth, opts ...grpc.CallOption) (*Result, error)
	SubsNodesPoolCleanByLifeTime(ctx context.Context, in *CleanNodePoolAuth, opts ...grpc.CallOption) (*Result, error)
}

type nodesDataClient struct {
	cc *grpc.ClientConn
}

func NewNodesDataClient(cc *grpc.ClientConn) NodesDataClient {
	return &nodesDataClient{cc}
}

func (c *nodesDataClient) UserNodeFriendsAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/UserNodeFriendsAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) UserNodeFriendsDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/UserNodeFriendsDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) UserNodeBlacklistAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/UserNodeBlacklistAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) UserNodeBlacklistDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/UserNodeBlacklistDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) UserNodeMoveFriendIntoBlacklist(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/UserNodeMoveFriendIntoBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) UserNodeMoveFriendOutFromBlacklist(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/UserNodeMoveFriendOutFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) GroupChatNodeUserAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/GroupChatNodeUserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) GroupChatNodeUserDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/GroupChatNodeUserDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) SubsNodeFansAdd(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/SubsNodeFansAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) SubsNodeFansDel(ctx context.Context, in *DoubleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/SubsNodeFansDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) GroupChatNodesPoolCleanByLifeTime(ctx context.Context, in *CleanNodePoolAuth, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/GroupChatNodesPoolCleanByLifeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) GroupChatNodesPoolCleanByActivity(ctx context.Context, in *CleanNodePoolAuth, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/GroupChatNodesPoolCleanByActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesDataClient) SubsNodesPoolCleanByLifeTime(ctx context.Context, in *CleanNodePoolAuth, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/messageNodesPb.NodesData/SubsNodesPoolCleanByLifeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesDataServer is the server API for NodesData service.
type NodesDataServer interface {
	UserNodeFriendsAdd(context.Context, *DoubleId) (*Result, error)
	UserNodeFriendsDel(context.Context, *DoubleId) (*Result, error)
	UserNodeBlacklistAdd(context.Context, *DoubleId) (*Result, error)
	UserNodeBlacklistDel(context.Context, *DoubleId) (*Result, error)
	UserNodeMoveFriendIntoBlacklist(context.Context, *DoubleId) (*Result, error)
	UserNodeMoveFriendOutFromBlacklist(context.Context, *DoubleId) (*Result, error)
	GroupChatNodeUserAdd(context.Context, *DoubleId) (*Result, error)
	GroupChatNodeUserDel(context.Context, *DoubleId) (*Result, error)
	SubsNodeFansAdd(context.Context, *DoubleId) (*Result, error)
	SubsNodeFansDel(context.Context, *DoubleId) (*Result, error)
	GroupChatNodesPoolCleanByLifeTime(context.Context, *CleanNodePoolAuth) (*Result, error)
	GroupChatNodesPoolCleanByActivity(context.Context, *CleanNodePoolAuth) (*Result, error)
	SubsNodesPoolCleanByLifeTime(context.Context, *CleanNodePoolAuth) (*Result, error)
}

// UnimplementedNodesDataServer can be embedded to have forward compatible implementations.
type UnimplementedNodesDataServer struct {
}

func (*UnimplementedNodesDataServer) UserNodeFriendsAdd(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNodeFriendsAdd not implemented")
}
func (*UnimplementedNodesDataServer) UserNodeFriendsDel(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNodeFriendsDel not implemented")
}
func (*UnimplementedNodesDataServer) UserNodeBlacklistAdd(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNodeBlacklistAdd not implemented")
}
func (*UnimplementedNodesDataServer) UserNodeBlacklistDel(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNodeBlacklistDel not implemented")
}
func (*UnimplementedNodesDataServer) UserNodeMoveFriendIntoBlacklist(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNodeMoveFriendIntoBlacklist not implemented")
}
func (*UnimplementedNodesDataServer) UserNodeMoveFriendOutFromBlacklist(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNodeMoveFriendOutFromBlacklist not implemented")
}
func (*UnimplementedNodesDataServer) GroupChatNodeUserAdd(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupChatNodeUserAdd not implemented")
}
func (*UnimplementedNodesDataServer) GroupChatNodeUserDel(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupChatNodeUserDel not implemented")
}
func (*UnimplementedNodesDataServer) SubsNodeFansAdd(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubsNodeFansAdd not implemented")
}
func (*UnimplementedNodesDataServer) SubsNodeFansDel(ctx context.Context, req *DoubleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubsNodeFansDel not implemented")
}
func (*UnimplementedNodesDataServer) GroupChatNodesPoolCleanByLifeTime(ctx context.Context, req *CleanNodePoolAuth) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupChatNodesPoolCleanByLifeTime not implemented")
}
func (*UnimplementedNodesDataServer) GroupChatNodesPoolCleanByActivity(ctx context.Context, req *CleanNodePoolAuth) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupChatNodesPoolCleanByActivity not implemented")
}
func (*UnimplementedNodesDataServer) SubsNodesPoolCleanByLifeTime(ctx context.Context, req *CleanNodePoolAuth) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubsNodesPoolCleanByLifeTime not implemented")
}

func RegisterNodesDataServer(s *grpc.Server, srv NodesDataServer) {
	s.RegisterService(&_NodesData_serviceDesc, srv)
}

func _NodesData_UserNodeFriendsAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).UserNodeFriendsAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/UserNodeFriendsAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).UserNodeFriendsAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_UserNodeFriendsDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).UserNodeFriendsDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/UserNodeFriendsDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).UserNodeFriendsDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_UserNodeBlacklistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).UserNodeBlacklistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/UserNodeBlacklistAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).UserNodeBlacklistAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_UserNodeBlacklistDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).UserNodeBlacklistDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/UserNodeBlacklistDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).UserNodeBlacklistDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_UserNodeMoveFriendIntoBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).UserNodeMoveFriendIntoBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/UserNodeMoveFriendIntoBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).UserNodeMoveFriendIntoBlacklist(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_UserNodeMoveFriendOutFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).UserNodeMoveFriendOutFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/UserNodeMoveFriendOutFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).UserNodeMoveFriendOutFromBlacklist(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_GroupChatNodeUserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).GroupChatNodeUserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/GroupChatNodeUserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).GroupChatNodeUserAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_GroupChatNodeUserDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).GroupChatNodeUserDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/GroupChatNodeUserDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).GroupChatNodeUserDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_SubsNodeFansAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).SubsNodeFansAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/SubsNodeFansAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).SubsNodeFansAdd(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_SubsNodeFansDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).SubsNodeFansDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/SubsNodeFansDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).SubsNodeFansDel(ctx, req.(*DoubleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_GroupChatNodesPoolCleanByLifeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanNodePoolAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).GroupChatNodesPoolCleanByLifeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/GroupChatNodesPoolCleanByLifeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).GroupChatNodesPoolCleanByLifeTime(ctx, req.(*CleanNodePoolAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_GroupChatNodesPoolCleanByActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanNodePoolAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).GroupChatNodesPoolCleanByActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/GroupChatNodesPoolCleanByActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).GroupChatNodesPoolCleanByActivity(ctx, req.(*CleanNodePoolAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesData_SubsNodesPoolCleanByLifeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanNodePoolAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesDataServer).SubsNodesPoolCleanByLifeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageNodesPb.NodesData/SubsNodesPoolCleanByLifeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesDataServer).SubsNodesPoolCleanByLifeTime(ctx, req.(*CleanNodePoolAuth))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodesData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messageNodesPb.NodesData",
	HandlerType: (*NodesDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserNodeFriendsAdd",
			Handler:    _NodesData_UserNodeFriendsAdd_Handler,
		},
		{
			MethodName: "UserNodeFriendsDel",
			Handler:    _NodesData_UserNodeFriendsDel_Handler,
		},
		{
			MethodName: "UserNodeBlacklistAdd",
			Handler:    _NodesData_UserNodeBlacklistAdd_Handler,
		},
		{
			MethodName: "UserNodeBlacklistDel",
			Handler:    _NodesData_UserNodeBlacklistDel_Handler,
		},
		{
			MethodName: "UserNodeMoveFriendIntoBlacklist",
			Handler:    _NodesData_UserNodeMoveFriendIntoBlacklist_Handler,
		},
		{
			MethodName: "UserNodeMoveFriendOutFromBlacklist",
			Handler:    _NodesData_UserNodeMoveFriendOutFromBlacklist_Handler,
		},
		{
			MethodName: "GroupChatNodeUserAdd",
			Handler:    _NodesData_GroupChatNodeUserAdd_Handler,
		},
		{
			MethodName: "GroupChatNodeUserDel",
			Handler:    _NodesData_GroupChatNodeUserDel_Handler,
		},
		{
			MethodName: "SubsNodeFansAdd",
			Handler:    _NodesData_SubsNodeFansAdd_Handler,
		},
		{
			MethodName: "SubsNodeFansDel",
			Handler:    _NodesData_SubsNodeFansDel_Handler,
		},
		{
			MethodName: "GroupChatNodesPoolCleanByLifeTime",
			Handler:    _NodesData_GroupChatNodesPoolCleanByLifeTime_Handler,
		},
		{
			MethodName: "GroupChatNodesPoolCleanByActivity",
			Handler:    _NodesData_GroupChatNodesPoolCleanByActivity_Handler,
		},
		{
			MethodName: "SubsNodesPoolCleanByLifeTime",
			Handler:    _NodesData_SubsNodesPoolCleanByLifeTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MessageNodes.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mysqlBind.proto

package mysqlPb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyParam struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyParam) Reset()         { *m = EmptyParam{} }
func (m *EmptyParam) String() string { return proto.CompactTextString(m) }
func (*EmptyParam) ProtoMessage()    {}
func (*EmptyParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{0}
}

func (m *EmptyParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyParam.Unmarshal(m, b)
}
func (m *EmptyParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyParam.Marshal(b, m, deterministic)
}
func (m *EmptyParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyParam.Merge(m, src)
}
func (m *EmptyParam) XXX_Size() int {
	return xxx_messageInfo_EmptyParam.Size(m)
}
func (m *EmptyParam) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyParam.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyParam proto.InternalMessageInfo

type IdList struct {
	Data                 []int64  `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdList) Reset()         { *m = IdList{} }
func (m *IdList) String() string { return proto.CompactTextString(m) }
func (*IdList) ProtoMessage()    {}
func (*IdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{1}
}

func (m *IdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdList.Unmarshal(m, b)
}
func (m *IdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdList.Marshal(b, m, deterministic)
}
func (m *IdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdList.Merge(m, src)
}
func (m *IdList) XXX_Size() int {
	return xxx_messageInfo_IdList.Size(m)
}
func (m *IdList) XXX_DiscardUnknown() {
	xxx_messageInfo_IdList.DiscardUnknown(m)
}

var xxx_messageInfo_IdList proto.InternalMessageInfo

func (m *IdList) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Id struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{2}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type IdAndName struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndName) Reset()         { *m = IdAndName{} }
func (m *IdAndName) String() string { return proto.CompactTextString(m) }
func (*IdAndName) ProtoMessage()    {}
func (*IdAndName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{3}
}

func (m *IdAndName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndName.Unmarshal(m, b)
}
func (m *IdAndName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndName.Marshal(b, m, deterministic)
}
func (m *IdAndName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndName.Merge(m, src)
}
func (m *IdAndName) XXX_Size() int {
	return xxx_messageInfo_IdAndName.Size(m)
}
func (m *IdAndName) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndName.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndName proto.InternalMessageInfo

func (m *IdAndName) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IdAndIsDelete struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsDelete             bool     `protobuf:"varint,2,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndIsDelete) Reset()         { *m = IdAndIsDelete{} }
func (m *IdAndIsDelete) String() string { return proto.CompactTextString(m) }
func (*IdAndIsDelete) ProtoMessage()    {}
func (*IdAndIsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{4}
}

func (m *IdAndIsDelete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndIsDelete.Unmarshal(m, b)
}
func (m *IdAndIsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndIsDelete.Marshal(b, m, deterministic)
}
func (m *IdAndIsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndIsDelete.Merge(m, src)
}
func (m *IdAndIsDelete) XXX_Size() int {
	return xxx_messageInfo_IdAndIsDelete.Size(m)
}
func (m *IdAndIsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndIsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndIsDelete proto.InternalMessageInfo

func (m *IdAndIsDelete) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndIsDelete) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type NameAndIsDelete struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsDelete             bool     `protobuf:"varint,2,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameAndIsDelete) Reset()         { *m = NameAndIsDelete{} }
func (m *NameAndIsDelete) String() string { return proto.CompactTextString(m) }
func (*NameAndIsDelete) ProtoMessage()    {}
func (*NameAndIsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{5}
}

func (m *NameAndIsDelete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameAndIsDelete.Unmarshal(m, b)
}
func (m *NameAndIsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameAndIsDelete.Marshal(b, m, deterministic)
}
func (m *NameAndIsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameAndIsDelete.Merge(m, src)
}
func (m *NameAndIsDelete) XXX_Size() int {
	return xxx_messageInfo_NameAndIsDelete.Size(m)
}
func (m *NameAndIsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_NameAndIsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_NameAndIsDelete proto.InternalMessageInfo

func (m *NameAndIsDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameAndIsDelete) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type IdAndAvatar struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Avatar               string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndAvatar) Reset()         { *m = IdAndAvatar{} }
func (m *IdAndAvatar) String() string { return proto.CompactTextString(m) }
func (*IdAndAvatar) ProtoMessage()    {}
func (*IdAndAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{6}
}

func (m *IdAndAvatar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndAvatar.Unmarshal(m, b)
}
func (m *IdAndAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndAvatar.Marshal(b, m, deterministic)
}
func (m *IdAndAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndAvatar.Merge(m, src)
}
func (m *IdAndAvatar) XXX_Size() int {
	return xxx_messageInfo_IdAndAvatar.Size(m)
}
func (m *IdAndAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndAvatar proto.InternalMessageInfo

func (m *IdAndAvatar) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndAvatar) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type IdAndQrCode struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QrCode               string   `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndQrCode) Reset()         { *m = IdAndQrCode{} }
func (m *IdAndQrCode) String() string { return proto.CompactTextString(m) }
func (*IdAndQrCode) ProtoMessage()    {}
func (*IdAndQrCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{7}
}

func (m *IdAndQrCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndQrCode.Unmarshal(m, b)
}
func (m *IdAndQrCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndQrCode.Marshal(b, m, deterministic)
}
func (m *IdAndQrCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndQrCode.Merge(m, src)
}
func (m *IdAndQrCode) XXX_Size() int {
	return xxx_messageInfo_IdAndQrCode.Size(m)
}
func (m *IdAndQrCode) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndQrCode.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndQrCode proto.InternalMessageInfo

func (m *IdAndQrCode) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndQrCode) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

type UserBasic struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Mobile               string   `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Gender               int32    `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Avatar               string   `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	QrCode               string   `protobuf:"bytes,8,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	IsDelete             bool     `protobuf:"varint,9,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserBasic) Reset()         { *m = UserBasic{} }
func (m *UserBasic) String() string { return proto.CompactTextString(m) }
func (*UserBasic) ProtoMessage()    {}
func (*UserBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{8}
}

func (m *UserBasic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserBasic.Unmarshal(m, b)
}
func (m *UserBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserBasic.Marshal(b, m, deterministic)
}
func (m *UserBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBasic.Merge(m, src)
}
func (m *UserBasic) XXX_Size() int {
	return xxx_messageInfo_UserBasic.Size(m)
}
func (m *UserBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBasic.DiscardUnknown(m)
}

var xxx_messageInfo_UserBasic proto.InternalMessageInfo

func (m *UserBasic) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserBasic) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserBasic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserBasic) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserBasic) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserBasic) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *UserBasic) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserBasic) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *UserBasic) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type UserBasicList struct {
	Data                 []*UserBasic `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserBasicList) Reset()         { *m = UserBasicList{} }
func (m *UserBasicList) String() string { return proto.CompactTextString(m) }
func (*UserBasicList) ProtoMessage()    {}
func (*UserBasicList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{9}
}

func (m *UserBasicList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserBasicList.Unmarshal(m, b)
}
func (m *UserBasicList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserBasicList.Marshal(b, m, deterministic)
}
func (m *UserBasicList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBasicList.Merge(m, src)
}
func (m *UserBasicList) XXX_Size() int {
	return xxx_messageInfo_UserBasicList.Size(m)
}
func (m *UserBasicList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBasicList.DiscardUnknown(m)
}

var xxx_messageInfo_UserBasicList proto.InternalMessageInfo

func (m *UserBasicList) GetData() []*UserBasic {
	if m != nil {
		return m.Data
	}
	return nil
}

type EmailAndIsDelete struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	IsDelete             bool     `protobuf:"varint,2,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmailAndIsDelete) Reset()         { *m = EmailAndIsDelete{} }
func (m *EmailAndIsDelete) String() string { return proto.CompactTextString(m) }
func (*EmailAndIsDelete) ProtoMessage()    {}
func (*EmailAndIsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{10}
}

func (m *EmailAndIsDelete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmailAndIsDelete.Unmarshal(m, b)
}
func (m *EmailAndIsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmailAndIsDelete.Marshal(b, m, deterministic)
}
func (m *EmailAndIsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailAndIsDelete.Merge(m, src)
}
func (m *EmailAndIsDelete) XXX_Size() int {
	return xxx_messageInfo_EmailAndIsDelete.Size(m)
}
func (m *EmailAndIsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailAndIsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_EmailAndIsDelete proto.InternalMessageInfo

func (m *EmailAndIsDelete) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmailAndIsDelete) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type Password struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Password) Reset()         { *m = Password{} }
func (m *Password) String() string { return proto.CompactTextString(m) }
func (*Password) ProtoMessage()    {}
func (*Password) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{11}
}

func (m *Password) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Password.Unmarshal(m, b)
}
func (m *Password) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Password.Marshal(b, m, deterministic)
}
func (m *Password) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Password.Merge(m, src)
}
func (m *Password) XXX_Size() int {
	return xxx_messageInfo_Password.Size(m)
}
func (m *Password) XXX_DiscardUnknown() {
	xxx_messageInfo_Password.DiscardUnknown(m)
}

var xxx_messageInfo_Password proto.InternalMessageInfo

func (m *Password) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Email struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Email) Reset()         { *m = Email{} }
func (m *Email) String() string { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()    {}
func (*Email) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{12}
}

func (m *Email) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Email.Unmarshal(m, b)
}
func (m *Email) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Email.Marshal(b, m, deterministic)
}
func (m *Email) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Email.Merge(m, src)
}
func (m *Email) XXX_Size() int {
	return xxx_messageInfo_Email.Size(m)
}
func (m *Email) XXX_DiscardUnknown() {
	xxx_messageInfo_Email.DiscardUnknown(m)
}

var xxx_messageInfo_Email proto.InternalMessageInfo

func (m *Email) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type IdAndPassword struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndPassword) Reset()         { *m = IdAndPassword{} }
func (m *IdAndPassword) String() string { return proto.CompactTextString(m) }
func (*IdAndPassword) ProtoMessage()    {}
func (*IdAndPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{13}
}

func (m *IdAndPassword) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndPassword.Unmarshal(m, b)
}
func (m *IdAndPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndPassword.Marshal(b, m, deterministic)
}
func (m *IdAndPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndPassword.Merge(m, src)
}
func (m *IdAndPassword) XXX_Size() int {
	return xxx_messageInfo_IdAndPassword.Size(m)
}
func (m *IdAndPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndPassword.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndPassword proto.InternalMessageInfo

func (m *IdAndPassword) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndPassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserProfilePlus struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mobile               string   `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Gender               int32    `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserProfilePlus) Reset()         { *m = UserProfilePlus{} }
func (m *UserProfilePlus) String() string { return proto.CompactTextString(m) }
func (*UserProfilePlus) ProtoMessage()    {}
func (*UserProfilePlus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{14}
}

func (m *UserProfilePlus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserProfilePlus.Unmarshal(m, b)
}
func (m *UserProfilePlus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserProfilePlus.Marshal(b, m, deterministic)
}
func (m *UserProfilePlus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProfilePlus.Merge(m, src)
}
func (m *UserProfilePlus) XXX_Size() int {
	return xxx_messageInfo_UserProfilePlus.Size(m)
}
func (m *UserProfilePlus) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProfilePlus.DiscardUnknown(m)
}

var xxx_messageInfo_UserProfilePlus proto.InternalMessageInfo

func (m *UserProfilePlus) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserProfilePlus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserProfilePlus) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserProfilePlus) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

type FriendshipBasic struct {
	SelfId               int64    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	FriendId             int64    `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	FriendNote           string   `protobuf:"bytes,3,opt,name=friend_note,json=friendNote,proto3" json:"friend_note,omitempty"`
	IsAccept             bool     `protobuf:"varint,4,opt,name=is_accept,json=isAccept,proto3" json:"is_accept,omitempty"`
	IsBlack              bool     `protobuf:"varint,5,opt,name=is_black,json=isBlack,proto3" json:"is_black,omitempty"`
	IsDelete             bool     `protobuf:"varint,6,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendshipBasic) Reset()         { *m = FriendshipBasic{} }
func (m *FriendshipBasic) String() string { return proto.CompactTextString(m) }
func (*FriendshipBasic) ProtoMessage()    {}
func (*FriendshipBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{15}
}

func (m *FriendshipBasic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendshipBasic.Unmarshal(m, b)
}
func (m *FriendshipBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendshipBasic.Marshal(b, m, deterministic)
}
func (m *FriendshipBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendshipBasic.Merge(m, src)
}
func (m *FriendshipBasic) XXX_Size() int {
	return xxx_messageInfo_FriendshipBasic.Size(m)
}
func (m *FriendshipBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendshipBasic.DiscardUnknown(m)
}

var xxx_messageInfo_FriendshipBasic proto.InternalMessageInfo

func (m *FriendshipBasic) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *FriendshipBasic) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *FriendshipBasic) GetFriendNote() string {
	if m != nil {
		return m.FriendNote
	}
	return ""
}

func (m *FriendshipBasic) GetIsAccept() bool {
	if m != nil {
		return m.IsAccept
	}
	return false
}

func (m *FriendshipBasic) GetIsBlack() bool {
	if m != nil {
		return m.IsBlack
	}
	return false
}

func (m *FriendshipBasic) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type FriendshipBasicList struct {
	Data                 []*FriendshipBasic `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FriendshipBasicList) Reset()         { *m = FriendshipBasicList{} }
func (m *FriendshipBasicList) String() string { return proto.CompactTextString(m) }
func (*FriendshipBasicList) ProtoMessage()    {}
func (*FriendshipBasicList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{16}
}

func (m *FriendshipBasicList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendshipBasicList.Unmarshal(m, b)
}
func (m *FriendshipBasicList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendshipBasicList.Marshal(b, m, deterministic)
}
func (m *FriendshipBasicList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendshipBasicList.Merge(m, src)
}
func (m *FriendshipBasicList) XXX_Size() int {
	return xxx_messageInfo_FriendshipBasicList.Size(m)
}
func (m *FriendshipBasicList) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendshipBasicList.DiscardUnknown(m)
}

var xxx_messageInfo_FriendshipBasicList proto.InternalMessageInfo

func (m *FriendshipBasicList) GetData() []*FriendshipBasic {
	if m != nil {
		return m.Data
	}
	return nil
}

type FriendsInfoPlus struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Note                 string   `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Mobile               string   `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Gender               int32    `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Avatar               string   `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	IsAccept             bool     `protobuf:"varint,8,opt,name=is_accept,json=isAccept,proto3" json:"is_accept,omitempty"`
	IsBlack              bool     `protobuf:"varint,9,opt,name=is_black,json=isBlack,proto3" json:"is_black,omitempty"`
	IsDelete             bool     `protobuf:"varint,10,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendsInfoPlus) Reset()         { *m = FriendsInfoPlus{} }
func (m *FriendsInfoPlus) String() string { return proto.CompactTextString(m) }
func (*FriendsInfoPlus) ProtoMessage()    {}
func (*FriendsInfoPlus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{17}
}

func (m *FriendsInfoPlus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendsInfoPlus.Unmarshal(m, b)
}
func (m *FriendsInfoPlus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendsInfoPlus.Marshal(b, m, deterministic)
}
func (m *FriendsInfoPlus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsInfoPlus.Merge(m, src)
}
func (m *FriendsInfoPlus) XXX_Size() int {
	return xxx_messageInfo_FriendsInfoPlus.Size(m)
}
func (m *FriendsInfoPlus) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsInfoPlus.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsInfoPlus proto.InternalMessageInfo

func (m *FriendsInfoPlus) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FriendsInfoPlus) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *FriendsInfoPlus) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *FriendsInfoPlus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FriendsInfoPlus) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *FriendsInfoPlus) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *FriendsInfoPlus) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *FriendsInfoPlus) GetIsAccept() bool {
	if m != nil {
		return m.IsAccept
	}
	return false
}

func (m *FriendsInfoPlus) GetIsBlack() bool {
	if m != nil {
		return m.IsBlack
	}
	return false
}

func (m *FriendsInfoPlus) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type FriendsInfoListPlus struct {
	Data                 []*FriendsInfoPlus `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FriendsInfoListPlus) Reset()         { *m = FriendsInfoListPlus{} }
func (m *FriendsInfoListPlus) String() string { return proto.CompactTextString(m) }
func (*FriendsInfoListPlus) ProtoMessage()    {}
func (*FriendsInfoListPlus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{18}
}

func (m *FriendsInfoListPlus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendsInfoListPlus.Unmarshal(m, b)
}
func (m *FriendsInfoListPlus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendsInfoListPlus.Marshal(b, m, deterministic)
}
func (m *FriendsInfoListPlus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsInfoListPlus.Merge(m, src)
}
func (m *FriendsInfoListPlus) XXX_Size() int {
	return xxx_messageInfo_FriendsInfoListPlus.Size(m)
}
func (m *FriendsInfoListPlus) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsInfoListPlus.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsInfoListPlus proto.InternalMessageInfo

func (m *FriendsInfoListPlus) GetData() []*FriendsInfoPlus {
	if m != nil {
		return m.Data
	}
	return nil
}

type GroupChatBasic struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ManagerId            int64    `protobuf:"varint,3,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	Avatar               string   `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	QrCode               string   `protobuf:"bytes,5,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	IsDelete             bool     `protobuf:"varint,6,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupChatBasic) Reset()         { *m = GroupChatBasic{} }
func (m *GroupChatBasic) String() string { return proto.CompactTextString(m) }
func (*GroupChatBasic) ProtoMessage()    {}
func (*GroupChatBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{19}
}

func (m *GroupChatBasic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupChatBasic.Unmarshal(m, b)
}
func (m *GroupChatBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupChatBasic.Marshal(b, m, deterministic)
}
func (m *GroupChatBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupChatBasic.Merge(m, src)
}
func (m *GroupChatBasic) XXX_Size() int {
	return xxx_messageInfo_GroupChatBasic.Size(m)
}
func (m *GroupChatBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupChatBasic.DiscardUnknown(m)
}

var xxx_messageInfo_GroupChatBasic proto.InternalMessageInfo

func (m *GroupChatBasic) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupChatBasic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupChatBasic) GetManagerId() int64 {
	if m != nil {
		return m.ManagerId
	}
	return 0
}

func (m *GroupChatBasic) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *GroupChatBasic) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *GroupChatBasic) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type GroupChatList struct {
	Data                 []*GroupChatBasic `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupChatList) Reset()         { *m = GroupChatList{} }
func (m *GroupChatList) String() string { return proto.CompactTextString(m) }
func (*GroupChatList) ProtoMessage()    {}
func (*GroupChatList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{20}
}

func (m *GroupChatList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupChatList.Unmarshal(m, b)
}
func (m *GroupChatList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupChatList.Marshal(b, m, deterministic)
}
func (m *GroupChatList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupChatList.Merge(m, src)
}
func (m *GroupChatList) XXX_Size() int {
	return xxx_messageInfo_GroupChatList.Size(m)
}
func (m *GroupChatList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupChatList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupChatList proto.InternalMessageInfo

func (m *GroupChatList) GetData() []*GroupChatBasic {
	if m != nil {
		return m.Data
	}
	return nil
}

type GroupAndManagerId struct {
	GroupId              int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ManagerId            int64    `protobuf:"varint,2,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupAndManagerId) Reset()         { *m = GroupAndManagerId{} }
func (m *GroupAndManagerId) String() string { return proto.CompactTextString(m) }
func (*GroupAndManagerId) ProtoMessage()    {}
func (*GroupAndManagerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{21}
}

func (m *GroupAndManagerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupAndManagerId.Unmarshal(m, b)
}
func (m *GroupAndManagerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupAndManagerId.Marshal(b, m, deterministic)
}
func (m *GroupAndManagerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAndManagerId.Merge(m, src)
}
func (m *GroupAndManagerId) XXX_Size() int {
	return xxx_messageInfo_GroupAndManagerId.Size(m)
}
func (m *GroupAndManagerId) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAndManagerId.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAndManagerId proto.InternalMessageInfo

func (m *GroupAndManagerId) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupAndManagerId) GetManagerId() int64 {
	if m != nil {
		return m.ManagerId
	}
	return 0
}

type UserGroupChatRelate struct {
	GroupId              int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserNote             string   `protobuf:"bytes,3,opt,name=user_note,json=userNote,proto3" json:"user_note,omitempty"`
	IsDelete             bool     `protobuf:"varint,4,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGroupChatRelate) Reset()         { *m = UserGroupChatRelate{} }
func (m *UserGroupChatRelate) String() string { return proto.CompactTextString(m) }
func (*UserGroupChatRelate) ProtoMessage()    {}
func (*UserGroupChatRelate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{22}
}

func (m *UserGroupChatRelate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserGroupChatRelate.Unmarshal(m, b)
}
func (m *UserGroupChatRelate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserGroupChatRelate.Marshal(b, m, deterministic)
}
func (m *UserGroupChatRelate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGroupChatRelate.Merge(m, src)
}
func (m *UserGroupChatRelate) XXX_Size() int {
	return xxx_messageInfo_UserGroupChatRelate.Size(m)
}
func (m *UserGroupChatRelate) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGroupChatRelate.DiscardUnknown(m)
}

var xxx_messageInfo_UserGroupChatRelate proto.InternalMessageInfo

func (m *UserGroupChatRelate) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserGroupChatRelate) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserGroupChatRelate) GetUserNote() string {
	if m != nil {
		return m.UserNote
	}
	return ""
}

func (m *UserGroupChatRelate) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type UserGroupChatRelateList struct {
	Data                 []*UserGroupChatRelate `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserGroupChatRelateList) Reset()         { *m = UserGroupChatRelateList{} }
func (m *UserGroupChatRelateList) String() string { return proto.CompactTextString(m) }
func (*UserGroupChatRelateList) ProtoMessage()    {}
func (*UserGroupChatRelateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{23}
}

func (m *UserGroupChatRelateList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserGroupChatRelateList.Unmarshal(m, b)
}
func (m *UserGroupChatRelateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserGroupChatRelateList.Marshal(b, m, deterministic)
}
func (m *UserGroupChatRelateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGroupChatRelateList.Merge(m, src)
}
func (m *UserGroupChatRelateList) XXX_Size() int {
	return xxx_messageInfo_UserGroupChatRelateList.Size(m)
}
func (m *UserGroupChatRelateList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGroupChatRelateList.DiscardUnknown(m)
}

var xxx_messageInfo_UserGroupChatRelateList proto.InternalMessageInfo

func (m *UserGroupChatRelateList) GetData() []*UserGroupChatRelate {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserAndGroupId struct {
	GroupId              int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAndGroupId) Reset()         { *m = UserAndGroupId{} }
func (m *UserAndGroupId) String() string { return proto.CompactTextString(m) }
func (*UserAndGroupId) ProtoMessage()    {}
func (*UserAndGroupId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{24}
}

func (m *UserAndGroupId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAndGroupId.Unmarshal(m, b)
}
func (m *UserAndGroupId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAndGroupId.Marshal(b, m, deterministic)
}
func (m *UserAndGroupId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAndGroupId.Merge(m, src)
}
func (m *UserAndGroupId) XXX_Size() int {
	return xxx_messageInfo_UserAndGroupId.Size(m)
}
func (m *UserAndGroupId) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAndGroupId.DiscardUnknown(m)
}

var xxx_messageInfo_UserAndGroupId proto.InternalMessageInfo

func (m *UserAndGroupId) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserAndGroupId) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GroupChatInfoOfUser struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId              int64    `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName            string   `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupAvatar          string   `protobuf:"bytes,4,opt,name=group_avatar,json=groupAvatar,proto3" json:"group_avatar,omitempty"`
	GroupQrCode          string   `protobuf:"bytes,5,opt,name=group_qr_code,json=groupQrCode,proto3" json:"group_qr_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupChatInfoOfUser) Reset()         { *m = GroupChatInfoOfUser{} }
func (m *GroupChatInfoOfUser) String() string { return proto.CompactTextString(m) }
func (*GroupChatInfoOfUser) ProtoMessage()    {}
func (*GroupChatInfoOfUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{25}
}

func (m *GroupChatInfoOfUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupChatInfoOfUser.Unmarshal(m, b)
}
func (m *GroupChatInfoOfUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupChatInfoOfUser.Marshal(b, m, deterministic)
}
func (m *GroupChatInfoOfUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupChatInfoOfUser.Merge(m, src)
}
func (m *GroupChatInfoOfUser) XXX_Size() int {
	return xxx_messageInfo_GroupChatInfoOfUser.Size(m)
}
func (m *GroupChatInfoOfUser) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupChatInfoOfUser.DiscardUnknown(m)
}

var xxx_messageInfo_GroupChatInfoOfUser proto.InternalMessageInfo

func (m *GroupChatInfoOfUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupChatInfoOfUser) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupChatInfoOfUser) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GroupChatInfoOfUser) GetGroupAvatar() string {
	if m != nil {
		return m.GroupAvatar
	}
	return ""
}

func (m *GroupChatInfoOfUser) GetGroupQrCode() string {
	if m != nil {
		return m.GroupQrCode
	}
	return ""
}

type GroupChatInfoListOfUserPlus struct {
	Data                 []*GroupChatInfoOfUser `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GroupChatInfoListOfUserPlus) Reset()         { *m = GroupChatInfoListOfUserPlus{} }
func (m *GroupChatInfoListOfUserPlus) String() string { return proto.CompactTextString(m) }
func (*GroupChatInfoListOfUserPlus) ProtoMessage()    {}
func (*GroupChatInfoListOfUserPlus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{26}
}

func (m *GroupChatInfoListOfUserPlus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupChatInfoListOfUserPlus.Unmarshal(m, b)
}
func (m *GroupChatInfoListOfUserPlus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupChatInfoListOfUserPlus.Marshal(b, m, deterministic)
}
func (m *GroupChatInfoListOfUserPlus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupChatInfoListOfUserPlus.Merge(m, src)
}
func (m *GroupChatInfoListOfUserPlus) XXX_Size() int {
	return xxx_messageInfo_GroupChatInfoListOfUserPlus.Size(m)
}
func (m *GroupChatInfoListOfUserPlus) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupChatInfoListOfUserPlus.DiscardUnknown(m)
}

var xxx_messageInfo_GroupChatInfoListOfUserPlus proto.InternalMessageInfo

func (m *GroupChatInfoListOfUserPlus) GetData() []*GroupChatInfoOfUser {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserInfoInGroupChat struct {
	GroupId              int64    `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserNote             string   `protobuf:"bytes,3,opt,name=user_note,json=userNote,proto3" json:"user_note,omitempty"`
	UserName             string   `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserGender           int32    `protobuf:"varint,5,opt,name=user_gender,json=userGender,proto3" json:"user_gender,omitempty"`
	UserEmail            string   `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserAvatar           string   `protobuf:"bytes,7,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfoInGroupChat) Reset()         { *m = UserInfoInGroupChat{} }
func (m *UserInfoInGroupChat) String() string { return proto.CompactTextString(m) }
func (*UserInfoInGroupChat) ProtoMessage()    {}
func (*UserInfoInGroupChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{27}
}

func (m *UserInfoInGroupChat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfoInGroupChat.Unmarshal(m, b)
}
func (m *UserInfoInGroupChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfoInGroupChat.Marshal(b, m, deterministic)
}
func (m *UserInfoInGroupChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoInGroupChat.Merge(m, src)
}
func (m *UserInfoInGroupChat) XXX_Size() int {
	return xxx_messageInfo_UserInfoInGroupChat.Size(m)
}
func (m *UserInfoInGroupChat) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoInGroupChat.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoInGroupChat proto.InternalMessageInfo

func (m *UserInfoInGroupChat) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserInfoInGroupChat) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserInfoInGroupChat) GetUserNote() string {
	if m != nil {
		return m.UserNote
	}
	return ""
}

func (m *UserInfoInGroupChat) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfoInGroupChat) GetUserGender() int32 {
	if m != nil {
		return m.UserGender
	}
	return 0
}

func (m *UserInfoInGroupChat) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *UserInfoInGroupChat) GetUserAvatar() string {
	if m != nil {
		return m.UserAvatar
	}
	return ""
}

type UserInfoInGroupChatListPlus struct {
	Data                 []*UserInfoInGroupChat `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UserInfoInGroupChatListPlus) Reset()         { *m = UserInfoInGroupChatListPlus{} }
func (m *UserInfoInGroupChatListPlus) String() string { return proto.CompactTextString(m) }
func (*UserInfoInGroupChatListPlus) ProtoMessage()    {}
func (*UserInfoInGroupChatListPlus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{28}
}

func (m *UserInfoInGroupChatListPlus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfoInGroupChatListPlus.Unmarshal(m, b)
}
func (m *UserInfoInGroupChatListPlus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfoInGroupChatListPlus.Marshal(b, m, deterministic)
}
func (m *UserInfoInGroupChatListPlus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoInGroupChatListPlus.Merge(m, src)
}
func (m *UserInfoInGroupChatListPlus) XXX_Size() int {
	return xxx_messageInfo_UserInfoInGroupChatListPlus.Size(m)
}
func (m *UserInfoInGroupChatListPlus) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoInGroupChatListPlus.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoInGroupChatListPlus proto.InternalMessageInfo

func (m *UserInfoInGroupChatListPlus) GetData() []*UserInfoInGroupChat {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscriptionBasic struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ManagerId            int64    `protobuf:"varint,3,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	Intro                string   `protobuf:"bytes,4,opt,name=intro,proto3" json:"intro,omitempty"`
	Avatar               string   `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	QrCode               string   `protobuf:"bytes,6,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	IsDelete             bool     `protobuf:"varint,7,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionBasic) Reset()         { *m = SubscriptionBasic{} }
func (m *SubscriptionBasic) String() string { return proto.CompactTextString(m) }
func (*SubscriptionBasic) ProtoMessage()    {}
func (*SubscriptionBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{29}
}

func (m *SubscriptionBasic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionBasic.Unmarshal(m, b)
}
func (m *SubscriptionBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionBasic.Marshal(b, m, deterministic)
}
func (m *SubscriptionBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionBasic.Merge(m, src)
}
func (m *SubscriptionBasic) XXX_Size() int {
	return xxx_messageInfo_SubscriptionBasic.Size(m)
}
func (m *SubscriptionBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionBasic.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionBasic proto.InternalMessageInfo

func (m *SubscriptionBasic) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SubscriptionBasic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubscriptionBasic) GetManagerId() int64 {
	if m != nil {
		return m.ManagerId
	}
	return 0
}

func (m *SubscriptionBasic) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *SubscriptionBasic) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *SubscriptionBasic) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *SubscriptionBasic) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type SubscriptionBasicList struct {
	Data                 []*SubscriptionBasic `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SubscriptionBasicList) Reset()         { *m = SubscriptionBasicList{} }
func (m *SubscriptionBasicList) String() string { return proto.CompactTextString(m) }
func (*SubscriptionBasicList) ProtoMessage()    {}
func (*SubscriptionBasicList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{30}
}

func (m *SubscriptionBasicList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionBasicList.Unmarshal(m, b)
}
func (m *SubscriptionBasicList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionBasicList.Marshal(b, m, deterministic)
}
func (m *SubscriptionBasicList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionBasicList.Merge(m, src)
}
func (m *SubscriptionBasicList) XXX_Size() int {
	return xxx_messageInfo_SubscriptionBasicList.Size(m)
}
func (m *SubscriptionBasicList) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionBasicList.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionBasicList proto.InternalMessageInfo

func (m *SubscriptionBasicList) GetData() []*SubscriptionBasic {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubsAndManagerId struct {
	SubsId               int64    `protobuf:"varint,1,opt,name=subs_id,json=subsId,proto3" json:"subs_id,omitempty"`
	ManagerId            int64    `protobuf:"varint,2,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubsAndManagerId) Reset()         { *m = SubsAndManagerId{} }
func (m *SubsAndManagerId) String() string { return proto.CompactTextString(m) }
func (*SubsAndManagerId) ProtoMessage()    {}
func (*SubsAndManagerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{31}
}

func (m *SubsAndManagerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubsAndManagerId.Unmarshal(m, b)
}
func (m *SubsAndManagerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubsAndManagerId.Marshal(b, m, deterministic)
}
func (m *SubsAndManagerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubsAndManagerId.Merge(m, src)
}
func (m *SubsAndManagerId) XXX_Size() int {
	return xxx_messageInfo_SubsAndManagerId.Size(m)
}
func (m *SubsAndManagerId) XXX_DiscardUnknown() {
	xxx_messageInfo_SubsAndManagerId.DiscardUnknown(m)
}

var xxx_messageInfo_SubsAndManagerId proto.InternalMessageInfo

func (m *SubsAndManagerId) GetSubsId() int64 {
	if m != nil {
		return m.SubsId
	}
	return 0
}

func (m *SubsAndManagerId) GetManagerId() int64 {
	if m != nil {
		return m.ManagerId
	}
	return 0
}

type IdAndIntro struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Intro                string   `protobuf:"bytes,2,opt,name=intro,proto3" json:"intro,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdAndIntro) Reset()         { *m = IdAndIntro{} }
func (m *IdAndIntro) String() string { return proto.CompactTextString(m) }
func (*IdAndIntro) ProtoMessage()    {}
func (*IdAndIntro) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{32}
}

func (m *IdAndIntro) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdAndIntro.Unmarshal(m, b)
}
func (m *IdAndIntro) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdAndIntro.Marshal(b, m, deterministic)
}
func (m *IdAndIntro) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdAndIntro.Merge(m, src)
}
func (m *IdAndIntro) XXX_Size() int {
	return xxx_messageInfo_IdAndIntro.Size(m)
}
func (m *IdAndIntro) XXX_DiscardUnknown() {
	xxx_messageInfo_IdAndIntro.DiscardUnknown(m)
}

var xxx_messageInfo_IdAndIntro proto.InternalMessageInfo

func (m *IdAndIntro) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdAndIntro) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

type UserSubscriptionRelate struct {
	SubsId               int64    `protobuf:"varint,1,opt,name=subs_id,json=subsId,proto3" json:"subs_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsDelete             bool     `protobuf:"varint,3,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserSubscriptionRelate) Reset()         { *m = UserSubscriptionRelate{} }
func (m *UserSubscriptionRelate) String() string { return proto.CompactTextString(m) }
func (*UserSubscriptionRelate) ProtoMessage()    {}
func (*UserSubscriptionRelate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{33}
}

func (m *UserSubscriptionRelate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSubscriptionRelate.Unmarshal(m, b)
}
func (m *UserSubscriptionRelate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSubscriptionRelate.Marshal(b, m, deterministic)
}
func (m *UserSubscriptionRelate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSubscriptionRelate.Merge(m, src)
}
func (m *UserSubscriptionRelate) XXX_Size() int {
	return xxx_messageInfo_UserSubscriptionRelate.Size(m)
}
func (m *UserSubscriptionRelate) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSubscriptionRelate.DiscardUnknown(m)
}

var xxx_messageInfo_UserSubscriptionRelate proto.InternalMessageInfo

func (m *UserSubscriptionRelate) GetSubsId() int64 {
	if m != nil {
		return m.SubsId
	}
	return 0
}

func (m *UserSubscriptionRelate) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserSubscriptionRelate) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type UserSubscriptionRelateList struct {
	Data                 []*UserSubscriptionRelate `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UserSubscriptionRelateList) Reset()         { *m = UserSubscriptionRelateList{} }
func (m *UserSubscriptionRelateList) String() string { return proto.CompactTextString(m) }
func (*UserSubscriptionRelateList) ProtoMessage()    {}
func (*UserSubscriptionRelateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{34}
}

func (m *UserSubscriptionRelateList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSubscriptionRelateList.Unmarshal(m, b)
}
func (m *UserSubscriptionRelateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSubscriptionRelateList.Marshal(b, m, deterministic)
}
func (m *UserSubscriptionRelateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSubscriptionRelateList.Merge(m, src)
}
func (m *UserSubscriptionRelateList) XXX_Size() int {
	return xxx_messageInfo_UserSubscriptionRelateList.Size(m)
}
func (m *UserSubscriptionRelateList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSubscriptionRelateList.DiscardUnknown(m)
}

var xxx_messageInfo_UserSubscriptionRelateList proto.InternalMessageInfo

func (m *UserSubscriptionRelateList) GetData() []*UserSubscriptionRelate {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserAndSubsId struct {
	SubsId               int64    `protobuf:"varint,1,opt,name=subs_id,json=subsId,proto3" json:"subs_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAndSubsId) Reset()         { *m = UserAndSubsId{} }
func (m *UserAndSubsId) String() string { return proto.CompactTextString(m) }
func (*UserAndSubsId) ProtoMessage()    {}
func (*UserAndSubsId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{35}
}

func (m *UserAndSubsId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAndSubsId.Unmarshal(m, b)
}
func (m *UserAndSubsId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAndSubsId.Marshal(b, m, deterministic)
}
func (m *UserAndSubsId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAndSubsId.Merge(m, src)
}
func (m *UserAndSubsId) XXX_Size() int {
	return xxx_messageInfo_UserAndSubsId.Size(m)
}
func (m *UserAndSubsId) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAndSubsId.DiscardUnknown(m)
}

var xxx_messageInfo_UserAndSubsId proto.InternalMessageInfo

func (m *UserAndSubsId) GetSubsId() int64 {
	if m != nil {
		return m.SubsId
	}
	return 0
}

func (m *UserAndSubsId) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UserInfoOfSubscription struct {
	SubsId               int64    `protobuf:"varint,1,opt,name=subs_id,json=subsId,proto3" json:"subs_id,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail            string   `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserName             string   `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserGender           int32    `protobuf:"varint,5,opt,name=user_gender,json=userGender,proto3" json:"user_gender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfoOfSubscription) Reset()         { *m = UserInfoOfSubscription{} }
func (m *UserInfoOfSubscription) String() string { return proto.CompactTextString(m) }
func (*UserInfoOfSubscription) ProtoMessage()    {}
func (*UserInfoOfSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{36}
}

func (m *UserInfoOfSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfoOfSubscription.Unmarshal(m, b)
}
func (m *UserInfoOfSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfoOfSubscription.Marshal(b, m, deterministic)
}
func (m *UserInfoOfSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoOfSubscription.Merge(m, src)
}
func (m *UserInfoOfSubscription) XXX_Size() int {
	return xxx_messageInfo_UserInfoOfSubscription.Size(m)
}
func (m *UserInfoOfSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoOfSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoOfSubscription proto.InternalMessageInfo

func (m *UserInfoOfSubscription) GetSubsId() int64 {
	if m != nil {
		return m.SubsId
	}
	return 0
}

func (m *UserInfoOfSubscription) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserInfoOfSubscription) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *UserInfoOfSubscription) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfoOfSubscription) GetUserGender() int32 {
	if m != nil {
		return m.UserGender
	}
	return 0
}

type UserInfoOfSubscriptionList struct {
	Data                 []*UserInfoOfSubscription `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UserInfoOfSubscriptionList) Reset()         { *m = UserInfoOfSubscriptionList{} }
func (m *UserInfoOfSubscriptionList) String() string { return proto.CompactTextString(m) }
func (*UserInfoOfSubscriptionList) ProtoMessage()    {}
func (*UserInfoOfSubscriptionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{37}
}

func (m *UserInfoOfSubscriptionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfoOfSubscriptionList.Unmarshal(m, b)
}
func (m *UserInfoOfSubscriptionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfoOfSubscriptionList.Marshal(b, m, deterministic)
}
func (m *UserInfoOfSubscriptionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoOfSubscriptionList.Merge(m, src)
}
func (m *UserInfoOfSubscriptionList) XXX_Size() int {
	return xxx_messageInfo_UserInfoOfSubscriptionList.Size(m)
}
func (m *UserInfoOfSubscriptionList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoOfSubscriptionList.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoOfSubscriptionList proto.InternalMessageInfo

func (m *UserInfoOfSubscriptionList) GetData() []*UserInfoOfSubscription {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscriptionInfoOfUser struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubsId               int64    `protobuf:"varint,2,opt,name=subs_id,json=subsId,proto3" json:"subs_id,omitempty"`
	SubsName             string   `protobuf:"bytes,3,opt,name=subs_name,json=subsName,proto3" json:"subs_name,omitempty"`
	SubsIntro            string   `protobuf:"bytes,4,opt,name=subs_intro,json=subsIntro,proto3" json:"subs_intro,omitempty"`
	SubsAvatar           string   `protobuf:"bytes,5,opt,name=subs_avatar,json=subsAvatar,proto3" json:"subs_avatar,omitempty"`
	SubsQrCode           string   `protobuf:"bytes,6,opt,name=subs_qr_code,json=subsQrCode,proto3" json:"subs_qr_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionInfoOfUser) Reset()         { *m = SubscriptionInfoOfUser{} }
func (m *SubscriptionInfoOfUser) String() string { return proto.CompactTextString(m) }
func (*SubscriptionInfoOfUser) ProtoMessage()    {}
func (*SubscriptionInfoOfUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{38}
}

func (m *SubscriptionInfoOfUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionInfoOfUser.Unmarshal(m, b)
}
func (m *SubscriptionInfoOfUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionInfoOfUser.Marshal(b, m, deterministic)
}
func (m *SubscriptionInfoOfUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionInfoOfUser.Merge(m, src)
}
func (m *SubscriptionInfoOfUser) XXX_Size() int {
	return xxx_messageInfo_SubscriptionInfoOfUser.Size(m)
}
func (m *SubscriptionInfoOfUser) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionInfoOfUser.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionInfoOfUser proto.InternalMessageInfo

func (m *SubscriptionInfoOfUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SubscriptionInfoOfUser) GetSubsId() int64 {
	if m != nil {
		return m.SubsId
	}
	return 0
}

func (m *SubscriptionInfoOfUser) GetSubsName() string {
	if m != nil {
		return m.SubsName
	}
	return ""
}

func (m *SubscriptionInfoOfUser) GetSubsIntro() string {
	if m != nil {
		return m.SubsIntro
	}
	return ""
}

func (m *SubscriptionInfoOfUser) GetSubsAvatar() string {
	if m != nil {
		return m.SubsAvatar
	}
	return ""
}

func (m *SubscriptionInfoOfUser) GetSubsQrCode() string {
	if m != nil {
		return m.SubsQrCode
	}
	return ""
}

type SubscriptionInfoOfUserList struct {
	Data                 []*SubscriptionInfoOfUser `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SubscriptionInfoOfUserList) Reset()         { *m = SubscriptionInfoOfUserList{} }
func (m *SubscriptionInfoOfUserList) String() string { return proto.CompactTextString(m) }
func (*SubscriptionInfoOfUserList) ProtoMessage()    {}
func (*SubscriptionInfoOfUserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{39}
}

func (m *SubscriptionInfoOfUserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionInfoOfUserList.Unmarshal(m, b)
}
func (m *SubscriptionInfoOfUserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionInfoOfUserList.Marshal(b, m, deterministic)
}
func (m *SubscriptionInfoOfUserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionInfoOfUserList.Merge(m, src)
}
func (m *SubscriptionInfoOfUserList) XXX_Size() int {
	return xxx_messageInfo_SubscriptionInfoOfUserList.Size(m)
}
func (m *SubscriptionInfoOfUserList) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionInfoOfUserList.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionInfoOfUserList proto.InternalMessageInfo

func (m *SubscriptionInfoOfUserList) GetData() []*SubscriptionInfoOfUser {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyParam)(nil), "mysqlPb.EmptyParam")
	proto.RegisterType((*IdList)(nil), "mysqlPb.IdList")
	proto.RegisterType((*Id)(nil), "mysqlPb.Id")
	proto.RegisterType((*IdAndName)(nil), "mysqlPb.IdAndName")
	proto.RegisterType((*IdAndIsDelete)(nil), "mysqlPb.IdAndIsDelete")
	proto.RegisterType((*NameAndIsDelete)(nil), "mysqlPb.NameAndIsDelete")
	proto.RegisterType((*IdAndAvatar)(nil), "mysqlPb.IdAndAvatar")
	proto.RegisterType((*IdAndQrCode)(nil), "mysqlPb.IdAndQrCode")
	proto.RegisterType((*UserBasic)(nil), "mysqlPb.UserBasic")
	proto.RegisterType((*UserBasicList)(nil), "mysqlPb.UserBasicList")
	proto.RegisterType((*EmailAndIsDelete)(nil), "mysqlPb.EmailAndIsDelete")
	proto.RegisterType((*Password)(nil), "mysqlPb.Password")
	proto.RegisterType((*Email)(nil), "mysqlPb.Email")
	proto.RegisterType((*IdAndPassword)(nil), "mysqlPb.IdAndPassword")
	proto.RegisterType((*UserProfilePlus)(nil), "mysqlPb.UserProfilePlus")
	proto.RegisterType((*FriendshipBasic)(nil), "mysqlPb.FriendshipBasic")
	proto.RegisterType((*FriendshipBasicList)(nil), "mysqlPb.FriendshipBasicList")
	proto.RegisterType((*FriendsInfoPlus)(nil), "mysqlPb.FriendsInfoPlus")
	proto.RegisterType((*FriendsInfoListPlus)(nil), "mysqlPb.FriendsInfoListPlus")
	proto.RegisterType((*GroupChatBasic)(nil), "mysqlPb.GroupChatBasic")
	proto.RegisterType((*GroupChatList)(nil), "mysqlPb.GroupChatList")
	proto.RegisterType((*GroupAndManagerId)(nil), "mysqlPb.GroupAndManagerId")
	proto.RegisterType((*UserGroupChatRelate)(nil), "mysqlPb.UserGroupChatRelate")
	proto.RegisterType((*UserGroupChatRelateList)(nil), "mysqlPb.UserGroupChatRelateList")
	proto.RegisterType((*UserAndGroupId)(nil), "mysqlPb.UserAndGroupId")
	proto.RegisterType((*GroupChatInfoOfUser)(nil), "mysqlPb.GroupChatInfoOfUser")
	proto.RegisterType((*GroupChatInfoListOfUserPlus)(nil), "mysqlPb.GroupChatInfoListOfUserPlus")
	proto.RegisterType((*UserInfoInGroupChat)(nil), "mysqlPb.UserInfoInGroupChat")
	proto.RegisterType((*UserInfoInGroupChatListPlus)(nil), "mysqlPb.UserInfoInGroupChatListPlus")
	proto.RegisterType((*SubscriptionBasic)(nil), "mysqlPb.SubscriptionBasic")
	proto.RegisterType((*SubscriptionBasicList)(nil), "mysqlPb.SubscriptionBasicList")
	proto.RegisterType((*SubsAndManagerId)(nil), "mysqlPb.SubsAndManagerId")
	proto.RegisterType((*IdAndIntro)(nil), "mysqlPb.IdAndIntro")
	proto.RegisterType((*UserSubscriptionRelate)(nil), "mysqlPb.UserSubscriptionRelate")
	proto.RegisterType((*UserSubscriptionRelateList)(nil), "mysqlPb.UserSubscriptionRelateList")
	proto.RegisterType((*UserAndSubsId)(nil), "mysqlPb.UserAndSubsId")
	proto.RegisterType((*UserInfoOfSubscription)(nil), "mysqlPb.UserInfoOfSubscription")
	proto.RegisterType((*UserInfoOfSubscriptionList)(nil), "mysqlPb.UserInfoOfSubscriptionList")
	proto.RegisterType((*SubscriptionInfoOfUser)(nil), "mysqlPb.SubscriptionInfoOfUser")
	proto.RegisterType((*SubscriptionInfoOfUserList)(nil), "mysqlPb.SubscriptionInfoOfUserList")
}

func init() { proto.RegisterFile("mysqlBind.proto", fileDescriptor_d28f1fa67868a9e4) }

var fileDescriptor_d28f1fa67868a9e4 = []byte{
	// 2082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x5f, 0x6f, 0xdb, 0xc8,
	0x11, 0x87, 0x24, 0x4b, 0x96, 0xc6, 0x89, 0xff, 0xd0, 0x3e, 0x4b, 0xa6, 0xed, 0xd8, 0xa7, 0x2b,
	0x8a, 0x00, 0xed, 0xa5, 0x45, 0x0e, 0xd7, 0x16, 0x68, 0xda, 0x42, 0x4a, 0x6c, 0x55, 0x39, 0xdb,
	0x92, 0xed, 0x06, 0xb8, 0xbc, 0xd4, 0xa0, 0x4c, 0x3a, 0x47, 0x94, 0x26, 0x1d, 0x92, 0x72, 0xe0,
	0xe7, 0x7e, 0x92, 0x3e, 0xf5, 0xb1, 0xe8, 0x6b, 0x81, 0x7e, 0x80, 0x7e, 0x8a, 0xbe, 0xf4, 0x63,
	0xf4, 0xa1, 0xd8, 0xd9, 0xe5, 0x72, 0x77, 0xc9, 0x25, 0x6d, 0x3a, 0x7d, 0x13, 0x67, 0x76, 0x7f,
	0x3b, 0xf3, 0xdb, 0x99, 0xd9, 0xd9, 0x85, 0x60, 0xe5, 0xfa, 0x2e, 0xfa, 0xe8, 0x0d, 0x5d, 0xdf,
	0x7e, 0x71, 0x13, 0x06, 0x71, 0x60, 0x2c, 0xa2, 0x60, 0x3a, 0xeb, 0x3f, 0x01, 0x38, 0xb8, 0xbe,
	0x89, 0xef, 0xa6, 0x56, 0x68, 0x5d, 0xf7, 0x77, 0xa0, 0x35, 0xb6, 0x8f, 0xdc, 0x28, 0x36, 0x0c,
	0x58, 0xb0, 0xad, 0xd8, 0xea, 0xd5, 0xf6, 0x1b, 0xcf, 0x1b, 0x67, 0xf8, 0xbb, 0x6f, 0x42, 0x7d,
	0x6c, 0x1b, 0x1b, 0xd0, 0xbc, 0xb5, 0xbc, 0xb9, 0xd3, 0xab, 0xed, 0xd7, 0x9e, 0x37, 0xce, 0xe8,
	0x47, 0xff, 0x67, 0xd0, 0x19, 0xdb, 0x03, 0xdf, 0x3e, 0xb1, 0xae, 0x1d, 0x63, 0x19, 0xea, 0xae,
	0xcd, 0xf4, 0x75, 0xd7, 0x26, 0x60, 0xbe, 0x75, 0xed, 0xf4, 0xea, 0xfb, 0xb5, 0xe7, 0x9d, 0x33,
	0xfc, 0xdd, 0x7f, 0x05, 0x4f, 0x71, 0xc2, 0x38, 0x7a, 0xe3, 0x78, 0x4e, 0x9c, 0x9d, 0xb4, 0x0d,
	0x1d, 0x37, 0xba, 0xb0, 0x51, 0x89, 0x33, 0xdb, 0x67, 0x6d, 0x97, 0x0d, 0xee, 0x0f, 0x61, 0x85,
	0xac, 0x24, 0xce, 0x4f, 0x16, 0xa9, 0xa5, 0x8b, 0x14, 0x63, 0x7c, 0x0b, 0x4b, 0x68, 0xc1, 0xe0,
	0xd6, 0x8a, 0xad, 0x30, 0xb3, 0xfe, 0x26, 0xb4, 0x2c, 0xd4, 0x30, 0xb3, 0xd9, 0x57, 0xff, 0x17,
	0x6c, 0xda, 0x69, 0xf8, 0x3a, 0xb0, 0xb3, 0x66, 0x77, 0x61, 0xf1, 0x63, 0x78, 0x71, 0x19, 0xd8,
	0x89, 0xbb, 0xad, 0x8f, 0x38, 0xb0, 0xff, 0xef, 0x1a, 0x74, 0xde, 0x45, 0x4e, 0x38, 0xb4, 0x22,
	0xf7, 0x32, 0x33, 0x6d, 0x03, 0x9a, 0xce, 0xb5, 0xe5, 0x7a, 0x6c, 0x12, 0xfd, 0xe0, 0x3e, 0x35,
	0x04, 0x9f, 0x4c, 0x68, 0xdf, 0x58, 0x51, 0xf4, 0x29, 0x08, 0xed, 0xde, 0x02, 0xca, 0xf9, 0x37,
	0xb1, 0xf9, 0x3a, 0x98, 0xb9, 0x9e, 0xd3, 0x6b, 0xd2, 0xb5, 0xe9, 0x17, 0x91, 0x7f, 0x70, 0x7c,
	0xdb, 0x09, 0x7b, 0xad, 0xfd, 0xda, 0xf3, 0xe6, 0x19, 0xfb, 0x12, 0x7c, 0x5c, 0x14, 0x7d, 0x14,
	0x9d, 0x68, 0x8b, 0x4e, 0xc8, 0x84, 0x76, 0x14, 0x42, 0x7f, 0x09, 0x4f, 0xb9, 0x83, 0x18, 0x44,
	0x3f, 0x16, 0x82, 0x68, 0xe9, 0xa5, 0xf1, 0x82, 0x05, 0xdd, 0x0b, 0x3e, 0x8a, 0x05, 0xd6, 0x01,
	0xac, 0x1e, 0x10, 0x7f, 0xc5, 0xed, 0xe4, 0x84, 0xd4, 0x44, 0x42, 0x0a, 0x37, 0x74, 0x1f, 0xda,
	0xd3, 0x84, 0x09, 0x29, 0x4a, 0x3b, 0x49, 0x94, 0xee, 0x42, 0x13, 0x17, 0xd2, 0xa8, 0x7f, 0xcd,
	0x62, 0x92, 0xa3, 0xa8, 0xbb, 0x24, 0x72, 0x5f, 0x97, 0xb9, 0xef, 0x3b, 0xb0, 0x42, 0xfc, 0x9a,
	0x86, 0xc1, 0x95, 0xeb, 0x39, 0x53, 0x6f, 0x1e, 0xdd, 0x27, 0x0f, 0x84, 0x2d, 0x6b, 0x68, 0xb6,
	0x6c, 0x41, 0xdc, 0xb2, 0xfe, 0x3f, 0x6b, 0xb0, 0x72, 0x18, 0xba, 0x8e, 0x6f, 0x47, 0x3f, 0xb8,
	0x37, 0x34, 0x98, 0xba, 0xb0, 0x18, 0x39, 0xde, 0xd5, 0x05, 0x5f, 0xac, 0x45, 0x3e, 0xc7, 0x98,
	0x43, 0x57, 0x38, 0x96, 0xa8, 0xea, 0xa8, 0x6a, 0x53, 0xc1, 0xd8, 0x36, 0xf6, 0x60, 0x89, 0x29,
	0xfd, 0x20, 0x4e, 0x96, 0x07, 0x2a, 0x3a, 0x09, 0xe2, 0x64, 0xb3, 0xad, 0xcb, 0x4b, 0xe7, 0x26,
	0x46, 0x2b, 0x90, 0xec, 0x01, 0x7e, 0x1b, 0x5b, 0xd0, 0x76, 0xa3, 0x8b, 0x99, 0x67, 0x5d, 0xfe,
	0x09, 0x83, 0xad, 0x7d, 0xb6, 0xe8, 0x46, 0x43, 0xf2, 0x29, 0x6f, 0x52, 0x4b, 0xd9, 0xa4, 0xd7,
	0xb0, 0xae, 0x98, 0x8f, 0xa1, 0xf2, 0x53, 0x29, 0x54, 0x7a, 0x3c, 0x54, 0x94, 0xb1, 0x2c, 0x60,
	0xfe, 0x9b, 0x92, 0x30, 0xf6, 0xaf, 0x02, 0x2d, 0xd9, 0x41, 0x9c, 0x92, 0x1d, 0x88, 0x41, 0xd5,
	0xc8, 0xcb, 0xb2, 0x85, 0xdc, 0x6d, 0x79, 0x5c, 0x26, 0x49, 0x1c, 0xb6, 0x0b, 0x38, 0xec, 0x14,
	0x70, 0x08, 0x5a, 0x0e, 0x89, 0xf7, 0x84, 0x3f, 0x64, 0xa0, 0x84, 0xc3, 0x84, 0x29, 0xc6, 0xe1,
	0x5f, 0x6a, 0xb0, 0x3c, 0x0a, 0x83, 0xf9, 0xcd, 0xeb, 0x1f, 0xac, 0x38, 0xbf, 0x28, 0xe5, 0xc5,
	0xeb, 0x2e, 0xc0, 0xb5, 0xe5, 0x5b, 0x1f, 0x9c, 0x90, 0xc4, 0x54, 0x03, 0xc7, 0x76, 0x98, 0x64,
	0x2c, 0x56, 0xcd, 0x05, 0x5d, 0x45, 0x69, 0xea, 0x2b, 0x8a, 0x1a, 0x2c, 0xaf, 0xe0, 0x29, 0x37,
	0x11, 0xc3, 0xe4, 0x27, 0x92, 0x8b, 0x5d, 0xee, 0xa2, 0xec, 0x08, 0xf3, 0xf0, 0x18, 0xd6, 0x50,
	0x3e, 0xf0, 0xed, 0x63, 0x6e, 0xe0, 0x16, 0xb4, 0x3f, 0x10, 0x61, 0x9a, 0x2c, 0x8b, 0xf8, 0x3d,
	0xb6, 0x15, 0xd7, 0xea, 0x8a, 0x6b, 0xfd, 0x3f, 0xd7, 0x60, 0x9d, 0x64, 0x38, 0x5f, 0xeb, 0xcc,
	0xf1, 0xac, 0xd8, 0x29, 0x42, 0xec, 0xc2, 0xe2, 0x3c, 0x12, 0xe1, 0x5a, 0xe4, 0x93, 0x26, 0x26,
	0x2a, 0x84, 0xcc, 0x6b, 0x13, 0x81, 0x90, 0x77, 0x8c, 0x92, 0x05, 0x85, 0x92, 0xef, 0xa0, 0x9b,
	0x63, 0x04, 0x92, 0xf3, 0x73, 0x89, 0x9c, 0x1d, 0xa9, 0xdc, 0x2a, 0xe3, 0x19, 0x43, 0x6f, 0x60,
	0x99, 0x28, 0x07, 0xbe, 0x3d, 0x62, 0x16, 0x57, 0x70, 0xa6, 0xff, 0xb7, 0x1a, 0xac, 0x73, 0x7c,
	0x12, 0x65, 0x93, 0x2b, 0x82, 0x2a, 0x4e, 0xa8, 0x49, 0xde, 0x8b, 0x8b, 0xd4, 0x33, 0x7b, 0x40,
	0x55, 0xc2, 0xb9, 0xd7, 0x41, 0x09, 0x76, 0x16, 0x5f, 0xc2, 0x13, 0xaa, 0x96, 0x82, 0x6c, 0x09,
	0x65, 0xec, 0x1c, 0xef, 0xc3, 0x53, 0x3a, 0x44, 0x8e, 0x37, 0x3a, 0x86, 0x1e, 0xda, 0xfd, 0x09,
	0x6c, 0x4b, 0x06, 0x13, 0xfa, 0xa8, 0xd1, 0x98, 0x48, 0x3a, 0x22, 0x73, 0x9c, 0x64, 0x44, 0xfe,
	0x87, 0xc5, 0x06, 0x51, 0x8c, 0x7d, 0x3e, 0xee, 0xff, 0x12, 0x1b, 0x54, 0x99, 0x16, 0x2c, 0xaa,
	0x24, 0xec, 0xec, 0xc1, 0x12, 0x2a, 0x59, 0x85, 0x6a, 0x62, 0x85, 0x02, 0x22, 0x1a, 0xd1, 0x2a,
	0xb5, 0x0b, 0xf8, 0x75, 0x41, 0x8b, 0x60, 0x8b, 0xb2, 0x4b, 0x24, 0xf4, 0x54, 0x4c, 0xe6, 0x4b,
	0x95, 0x0c, 0x67, 0x50, 0x6e, 0x09, 0x6f, 0x39, 0x5e, 0xf2, 0x02, 0x54, 0x14, 0x80, 0xca, 0x1c,
	0xc6, 0xdb, 0x3f, 0x6a, 0xb0, 0x76, 0x3e, 0x9f, 0x45, 0x97, 0xa1, 0x7b, 0x13, 0xbb, 0x81, 0xff,
	0xd9, 0xea, 0xd0, 0x06, 0x34, 0x5d, 0x3f, 0x0e, 0x03, 0xc6, 0x11, 0xfd, 0x10, 0xaa, 0x53, 0x53,
	0x57, 0x9d, 0x5a, 0xfa, 0xea, 0xb4, 0xa8, 0xa4, 0xe2, 0x08, 0xbe, 0xc8, 0xd8, 0x8e, 0x89, 0xf8,
	0x42, 0xe2, 0xc1, 0xe4, 0x3c, 0x64, 0x46, 0x33, 0x16, 0xde, 0xc2, 0x2a, 0x51, 0x49, 0x75, 0x8a,
	0x9c, 0xe9, 0xf3, 0x59, 0x24, 0x9e, 0xe9, 0xf3, 0x59, 0x54, 0x5e, 0xa5, 0x5e, 0x02, 0xd0, 0xbe,
	0x1a, 0x1d, 0xce, 0x69, 0x33, 0x29, 0x2d, 0x75, 0x81, 0x96, 0xfe, 0x07, 0xd8, 0x24, 0x5b, 0x24,
	0x9a, 0xc7, 0x6a, 0x9b, 0xd6, 0x8a, 0xa2, 0xe8, 0x4d, 0x19, 0x6b, 0x28, 0x8c, 0x9d, 0x82, 0x99,
	0xbf, 0x10, 0xd2, 0xf6, 0x8d, 0x44, 0xdb, 0x9e, 0x14, 0x3e, 0xd9, 0x29, 0x8c, 0xbb, 0x01, 0x6d,
	0x3a, 0x07, 0xbe, 0x7d, 0xce, 0x2d, 0x7b, 0x98, 0xc9, 0xfd, 0xbf, 0xd6, 0xa8, 0xff, 0x34, 0xab,
	0xc5, 0x95, 0x2a, 0xf8, 0x2f, 0xa7, 0x58, 0x43, 0x4d, 0xb1, 0x47, 0xe5, 0x6f, 0xc2, 0x5f, 0xd6,
	0xd0, 0x52, 0xfe, 0xb2, 0x53, 0x18, 0x7f, 0xff, 0xaa, 0xc1, 0xa6, 0x28, 0xbe, 0x4f, 0xfd, 0x16,
	0x58, 0xa9, 0x4b, 0xac, 0x6c, 0x43, 0x07, 0x15, 0x42, 0xf1, 0x6e, 0x13, 0xc1, 0x09, 0xcb, 0x58,
	0x3a, 0x4b, 0xc8, 0x4b, 0x1c, 0x4e, 0x43, 0x75, 0x0f, 0x96, 0x50, 0x2d, 0x25, 0x28, 0xce, 0x60,
	0x85, 0x7d, 0x1f, 0x9e, 0xe0, 0x00, 0x39, 0x53, 0x71, 0x04, 0x2b, 0xeb, 0xa7, 0x60, 0xe6, 0xbb,
	0x52, 0x48, 0x4f, 0xfe, 0x14, 0x4a, 0xcf, 0xcb, 0xbf, 0x7f, 0x0d, 0xab, 0xc7, 0x77, 0xe7, 0xa7,
	0x47, 0xe4, 0xf2, 0x7c, 0xee, 0x84, 0xb7, 0xee, 0xa5, 0x63, 0xbc, 0x02, 0x63, 0x1a, 0x44, 0xf1,
	0xb9, 0x75, 0xeb, 0x4c, 0x7c, 0xe7, 0xc4, 0xf9, 0x84, 0x74, 0xe5, 0xdc, 0x6f, 0xcc, 0x1c, 0x99,
	0xf1, 0x35, 0xac, 0xd1, 0x74, 0x98, 0xf8, 0x0e, 0xae, 0xe4, 0x58, 0x9e, 0xb1, 0xc4, 0x07, 0x8e,
	0x6d, 0x53, 0xfc, 0x30, 0x5e, 0xc1, 0xf2, 0xc8, 0x89, 0xd9, 0xd8, 0xe1, 0x1d, 0xe9, 0xb1, 0x04,
	0xb5, 0x70, 0x65, 0xca, 0x5d, 0x6c, 0x08, 0x6b, 0xe2, 0x6c, 0x1a, 0x84, 0x5b, 0x7c, 0xa0, 0x7a,
	0xed, 0xca, 0xc5, 0x38, 0x40, 0x8c, 0x84, 0xc7, 0xe1, 0x1d, 0xee, 0x66, 0xda, 0x5e, 0x2a, 0x17,
	0x71, 0x73, 0x33, 0x0b, 0x81, 0xfc, 0xff, 0x0a, 0x36, 0x53, 0x53, 0x92, 0x2b, 0x16, 0x3a, 0x24,
	0x39, 0xbf, 0xc6, 0x3f, 0xf8, 0x35, 0xec, 0xb7, 0xb0, 0x95, 0x37, 0x93, 0x3a, 0xb3, 0x2c, 0x3b,
	0x93, 0x37, 0xff, 0x37, 0x48, 0xe1, 0xc0, 0xf3, 0x78, 0x2c, 0xac, 0x0b, 0x93, 0x92, 0xd7, 0x0f,
	0xad, 0xe1, 0xbf, 0x83, 0xb5, 0xe9, 0x1c, 0xfd, 0xa7, 0x91, 0x88, 0x36, 0x6f, 0xc8, 0x9b, 0x40,
	0x35, 0x66, 0xae, 0x54, 0x00, 0xa0, 0x81, 0x9a, 0x07, 0x40, 0x35, 0x66, 0xae, 0xd4, 0x38, 0x80,
	0x75, 0x06, 0x20, 0xf1, 0xa6, 0x04, 0x42, 0xa2, 0x33, 0x35, 0x72, 0x01, 0x26, 0xd9, 0xac, 0xc2,
	0x78, 0xd2, 0xc8, 0x8d, 0x23, 0xd8, 0x4c, 0xac, 0xa1, 0x97, 0x5d, 0x82, 0x82, 0x0d, 0x40, 0x4f,
	0x62, 0x50, 0xb8, 0x0a, 0x9b, 0x5a, 0x8d, 0x71, 0x02, 0x3d, 0x39, 0x99, 0xd2, 0x2b, 0x9f, 0xa1,
	0xbd, 0x07, 0x9a, 0x5a, 0x8d, 0x0e, 0x4f, 0xb1, 0xef, 0xfe, 0x78, 0xc7, 0xd0, 0xe5, 0xe9, 0x9a,
	0xea, 0x30, 0x69, 0xab, 0xc0, 0x1d, 0xc2, 0x2a, 0x8d, 0xe5, 0x47, 0xba, 0x79, 0x88, 0x39, 0x91,
	0x5c, 0xed, 0x6c, 0x9a, 0x99, 0x13, 0x2c, 0x62, 0x45, 0x7e, 0xae, 0x08, 0x7b, 0x8a, 0xc1, 0x3d,
	0x86, 0x0d, 0x9a, 0x1b, 0xe9, 0x48, 0x7d, 0x86, 0xec, 0xe8, 0x70, 0x71, 0xca, 0x00, 0xbe, 0x1c,
	0x39, 0xf1, 0xc1, 0xd5, 0x95, 0x73, 0x19, 0xbb, 0xb7, 0x8e, 0x62, 0x1b, 0x0b, 0x11, 0x29, 0xd7,
	0x33, 0xd6, 0x50, 0x08, 0xbc, 0x02, 0x7b, 0x6e, 0x14, 0x57, 0x81, 0x18, 0xc2, 0x17, 0x92, 0x43,
	0xfc, 0x81, 0x40, 0x9a, 0xb6, 0x93, 0x77, 0x3b, 0xe6, 0x8d, 0xec, 0xef, 0x61, 0x3b, 0xcf, 0x93,
	0xca, 0x48, 0x19, 0x87, 0x2a, 0x20, 0x1d, 0xc2, 0xea, 0x74, 0x9e, 0x06, 0x0e, 0xde, 0x06, 0xaa,
	0x04, 0xce, 0x5b, 0xd8, 0x10, 0x71, 0xc6, 0xc9, 0x63, 0x44, 0x15, 0xac, 0x31, 0x16, 0x14, 0x01,
	0x8b, 0x3e, 0x5e, 0x7c, 0x16, 0xb3, 0x58, 0xb1, 0xa9, 0x82, 0x35, 0x81, 0xad, 0xe9, 0x3c, 0xa6,
	0x7e, 0x7d, 0x96, 0x1a, 0x40, 0x2b, 0x9e, 0x52, 0x06, 0x2a, 0xa3, 0x7d, 0x07, 0x5d, 0xb9, 0x42,
	0xa5, 0xf7, 0x45, 0xdd, 0x8b, 0x86, 0xa9, 0x53, 0x18, 0x13, 0xd8, 0xd6, 0x80, 0xa1, 0x7d, 0x0f,
	0x07, 0x7c, 0x09, 0x9b, 0xdc, 0x51, 0xe1, 0xd5, 0xa0, 0xb0, 0x47, 0x39, 0x84, 0x75, 0x5a, 0xd4,
	0x52, 0xac, 0xa2, 0x83, 0x45, 0xbb, 0xf6, 0x5b, 0x6c, 0x11, 0xa4, 0x8b, 0xe5, 0x03, 0xda, 0x0d,
	0xf9, 0xa9, 0xe8, 0x18, 0x33, 0x4f, 0xc1, 0x4a, 0xef, 0x57, 0xe5, 0x87, 0x9e, 0x0c, 0x37, 0x44,
	0x17, 0x07, 0x9e, 0x27, 0x8b, 0x4b, 0x1a, 0x09, 0x79, 0xf0, 0x00, 0xba, 0x34, 0xc6, 0xb9, 0x98,
	0x38, 0x83, 0x54, 0x19, 0xb2, 0x39, 0x44, 0x6e, 0xe6, 0xc8, 0x8c, 0x3f, 0x80, 0xa9, 0x40, 0x30,
	0x97, 0x10, 0xc5, 0x94, 0x17, 0x16, 0x2f, 0x94, 0x66, 0x81, 0xce, 0x18, 0x61, 0xc2, 0x88, 0xa8,
	0x15, 0x3b, 0x9d, 0x2c, 0x50, 0xc5, 0x8e, 0xe7, 0x18, 0xb6, 0x15, 0xa0, 0x47, 0xb5, 0x2c, 0xef,
	0xd5, 0x2c, 0x91, 0xde, 0xc4, 0x8c, 0xc2, 0xb7, 0x32, 0xb3, 0x50, 0x6b, 0x9c, 0x80, 0x29, 0xb5,
	0xf3, 0x72, 0xce, 0x74, 0xa5, 0xb9, 0xe9, 0x43, 0x9b, 0xa9, 0x53, 0x18, 0x47, 0x49, 0x2e, 0xc9,
	0x26, 0x6a, 0x81, 0x8a, 0xad, 0x9b, 0x42, 0x37, 0x6d, 0x7d, 0xef, 0x11, 0xba, 0xfb, 0x45, 0x68,
	0x38, 0xed, 0x3d, 0xec, 0xb2, 0xdb, 0x80, 0x92, 0x5b, 0x89, 0x03, 0xba, 0xbd, 0x29, 0x87, 0xfe,
	0x1e, 0x76, 0xf2, 0xa1, 0xdf, 0x45, 0x85, 0x39, 0x5b, 0x8e, 0xfc, 0x1a, 0x7a, 0x0c, 0x99, 0x76,
	0x09, 0x93, 0xab, 0x94, 0x59, 0x1d, 0x6a, 0xa6, 0xb3, 0xa0, 0x20, 0x69, 0x40, 0xda, 0xe9, 0xb3,
	0xe1, 0xfd, 0x41, 0x4e, 0xb0, 0x6f, 0xe3, 0x20, 0x64, 0xb2, 0xa6, 0x1d, 0xf8, 0x51, 0xd1, 0xfb,
	0x19, 0x6f, 0x0b, 0x28, 0x9e, 0xe4, 0x77, 0x29, 0x5e, 0xd1, 0xdb, 0xe7, 0xbb, 0xa4, 0x46, 0x49,
	0x90, 0xd8, 0x6d, 0x3c, 0x26, 0x4b, 0xde, 0x27, 0xf9, 0x2c, 0x29, 0x79, 0x7e, 0x3e, 0x06, 0x9a,
	0x94, 0x44, 0x29, 0xb7, 0xa5, 0x17, 0x9c, 0x82, 0xd7, 0x37, 0xb3, 0x40, 0x67, 0x7c, 0x0f, 0xcf,
	0xf4, 0xa8, 0xc8, 0x54, 0x55, 0xe4, 0x6f, 0x61, 0x8b, 0x17, 0x0c, 0xf9, 0x59, 0xab, 0xf0, 0x8c,
	0x3d, 0x4a, 0xae, 0xcf, 0x12, 0x62, 0x51, 0x31, 0x2c, 0x32, 0x62, 0x8a, 0xb1, 0x9c, 0x41, 0x2b,
	0x39, 0x6b, 0x4b, 0x08, 0x1b, 0x39, 0xb1, 0xfa, 0x28, 0x75, 0x9f, 0x23, 0xf7, 0x99, 0x1e, 0x15,
	0x53, 0xe6, 0x4d, 0x72, 0xe6, 0x89, 0xea, 0x07, 0x9f, 0x9c, 0xef, 0x60, 0x37, 0x8b, 0x22, 0x1e,
	0x9e, 0x5b, 0x92, 0x19, 0xd2, 0xd9, 0xa9, 0x57, 0x19, 0xa3, 0x24, 0xb0, 0xe5, 0x67, 0xa4, 0x38,
	0x0c, 0x10, 0x74, 0x5d, 0xf1, 0x99, 0x28, 0xcc, 0x3c, 0xa1, 0xf1, 0x16, 0x76, 0xb2, 0x40, 0x15,
	0x8f, 0xe1, 0x5c, 0xac, 0x8a, 0x27, 0xf1, 0x14, 0x9e, 0xe5, 0x38, 0xf8, 0x98, 0xc3, 0x78, 0xa6,
	0xa6, 0x96, 0xfa, 0xc0, 0x6b, 0x94, 0xbd, 0xfd, 0x9a, 0x65, 0x03, 0x8c, 0x09, 0xec, 0x4a, 0xa7,
	0x72, 0x26, 0xd1, 0x36, 0xd5, 0xf3, 0x94, 0x3e, 0x1f, 0x9b, 0x1a, 0xb9, 0x71, 0x2a, 0xbe, 0x5e,
	0x49, 0xc6, 0xea, 0x90, 0x4a, 0x6d, 0xfc, 0x23, 0xec, 0xb1, 0xd2, 0x9d, 0xcd, 0x1a, 0xb6, 0xaa,
	0x8e, 0xda, 0xaf, 0x4a, 0xb0, 0x31, 0x6f, 0x8a, 0xf0, 0x4b, 0x4e, 0xd4, 0x7b, 0xe1, 0x1f, 0x62,
	0x87, 0x2d, 0x1e, 0xaa, 0x1a, 0x5e, 0x4a, 0x8e, 0x44, 0x8a, 0x23, 0x85, 0x57, 0xa5, 0xa3, 0x75,
	0x8a, 0xed, 0x83, 0x88, 0x53, 0x70, 0xba, 0x7e, 0x55, 0xf2, 0x3c, 0x2e, 0x20, 0xaa, 0x14, 0x94,
	0x22, 0x16, 0x3c, 0x42, 0xcf, 0x92, 0x6c, 0x52, 0x41, 0x79, 0x76, 0x3c, 0x3a, 0xf6, 0x67, 0x2d,
	0xfc, 0x8f, 0xd7, 0x37, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x95, 0xf6, 0xdf, 0xa6, 0xf6, 0x25,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MySQLBindServiceClient is the client API for MySQLBindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MySQLBindServiceClient interface {
	PostSaveOneNewUser(ctx context.Context, in *UserBasic, opts ...grpc.CallOption) (*UserBasic, error)
	DeleteOneUserReal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	GetOneUserById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserBasic, error)
	GetOneUserByEmail(ctx context.Context, in *EmailAndIsDelete, opts ...grpc.CallOption) (*UserBasic, error)
	GetUserListByName(ctx context.Context, in *NameAndIsDelete, opts ...grpc.CallOption) (*UserBasicList, error)
	GetOneUserPasswordById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Password, error)
	GetOneUserPasswordByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Password, error)
	GetAllUserList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*UserBasicList, error)
	PutUserAvatarById(ctx context.Context, in *IdAndAvatar, opts ...grpc.CallOption) (*IdAndAvatar, error)
	PutUserQrCodeById(ctx context.Context, in *IdAndQrCode, opts ...grpc.CallOption) (*IdAndQrCode, error)
	PutUserPasswordById(ctx context.Context, in *IdAndPassword, opts ...grpc.CallOption) (*IdAndPassword, error)
	PutUserIsDeleteById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdAndIsDelete, error)
	PutUserProfileByIdPlus(ctx context.Context, in *UserProfilePlus, opts ...grpc.CallOption) (*UserProfilePlus, error)
	PostSaveOneNewFriendship(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	PostSaveOneNewFriendPlus(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	DeleteOneFriendshipReal(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	GetOneFriendship(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	GetFriendsIdListByOptions(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*IdList, error)
	GetAllFriendshipList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*FriendshipBasicList, error)
	GetEffectiveFriendsIdListByIdPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*IdList, error)
	GetBlacklistFriendsIdListByIdPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*IdList, error)
	GetAllFriendsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FriendsInfoListPlus, error)
	GetEffectiveFriendsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FriendsInfoListPlus, error)
	GetBlacklistFriendsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FriendsInfoListPlus, error)
	PutOneFriendNote(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	PutOneFriendIsAccept(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	PutOneFriendIsBlack(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	PutOneFriendIsDelete(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	PutAcceptOneNewFriendPlus(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	PutDeleteOneFriendPlus(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error)
	PostSaveOneNewGroupChat(ctx context.Context, in *GroupChatBasic, opts ...grpc.CallOption) (*GroupChatBasic, error)
	PostSaveOneNewGroupChatPlus(ctx context.Context, in *GroupChatBasic, opts ...grpc.CallOption) (*GroupChatBasic, error)
	DeleteOneGroupChatReal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	GetOneGroupChatById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*GroupChatBasic, error)
	GetGroupChatListByName(ctx context.Context, in *NameAndIsDelete, opts ...grpc.CallOption) (*GroupChatList, error)
	GetGroupChatListByManagerId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*GroupChatList, error)
	GetAllGroupChatList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*GroupChatList, error)
	PutOneGroupChatNameById(ctx context.Context, in *IdAndName, opts ...grpc.CallOption) (*IdAndName, error)
	PutOneGroupChatManagerById(ctx context.Context, in *GroupAndManagerId, opts ...grpc.CallOption) (*GroupAndManagerId, error)
	PutOneGroupChatAvatarById(ctx context.Context, in *IdAndAvatar, opts ...grpc.CallOption) (*IdAndAvatar, error)
	PutOneGroupChatQrCodeById(ctx context.Context, in *IdAndQrCode, opts ...grpc.CallOption) (*IdAndQrCode, error)
	PutOneGroupChatIsDeleteById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdAndIsDelete, error)
	PostSaveOneNewUserGroupChat(ctx context.Context, in *UserGroupChatRelate, opts ...grpc.CallOption) (*UserGroupChatRelate, error)
	DeleteOneUserGroupChatReal(ctx context.Context, in *UserAndGroupId, opts ...grpc.CallOption) (*UserAndGroupId, error)
	GetOneUserGroupChat(ctx context.Context, in *UserAndGroupId, opts ...grpc.CallOption) (*UserGroupChatRelate, error)
	GetAllUserGroupChatList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*UserGroupChatRelateList, error)
	GetUserGroupChatListByGroupId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserGroupChatRelateList, error)
	GetUserGroupChatListByUserId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserGroupChatRelateList, error)
	GetUserIdListOfGroupChat(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error)
	GetGroupChatIdListOfUser(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error)
	GetGroupChatUsersInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfoInGroupChatListPlus, error)
	GetUserGroupChatsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GroupChatInfoListOfUserPlus, error)
	PutOneUserGroupChatNote(ctx context.Context, in *UserGroupChatRelate, opts ...grpc.CallOption) (*UserGroupChatRelate, error)
	PutOneUserGroupChatIsDelete(ctx context.Context, in *UserGroupChatRelate, opts ...grpc.CallOption) (*UserGroupChatRelate, error)
	PostSaveOneNewSubscription(ctx context.Context, in *SubscriptionBasic, opts ...grpc.CallOption) (*SubscriptionBasic, error)
	PostSaveOneNewSubscriptionPlus(ctx context.Context, in *SubscriptionBasic, opts ...grpc.CallOption) (*SubscriptionBasic, error)
	DeleteOneSubscriptionReal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	GetOneSubscriptionById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*SubscriptionBasic, error)
	GetOneSubscriptionByName(ctx context.Context, in *NameAndIsDelete, opts ...grpc.CallOption) (*SubscriptionBasic, error)
	GetSubscriptionListByManagerId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*SubscriptionBasicList, error)
	PutOneSubscriptionNameById(ctx context.Context, in *IdAndName, opts ...grpc.CallOption) (*IdAndName, error)
	PutOneSubscriptionManagerById(ctx context.Context, in *SubsAndManagerId, opts ...grpc.CallOption) (*SubsAndManagerId, error)
	PutOneSubscriptionIntroById(ctx context.Context, in *IdAndIntro, opts ...grpc.CallOption) (*IdAndIntro, error)
	PutOneSubscriptionAvatarById(ctx context.Context, in *IdAndAvatar, opts ...grpc.CallOption) (*IdAndAvatar, error)
	PutOneSubscriptionQrCodeById(ctx context.Context, in *IdAndQrCode, opts ...grpc.CallOption) (*IdAndQrCode, error)
	PutOneSubscriptionIsDeleteById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdAndIsDelete, error)
	PostSaveOneNewUserSubscription(ctx context.Context, in *UserSubscriptionRelate, opts ...grpc.CallOption) (*UserSubscriptionRelate, error)
	DeleteOneUserSubscriptionReal(ctx context.Context, in *UserAndSubsId, opts ...grpc.CallOption) (*UserAndSubsId, error)
	GetOneUserSubscription(ctx context.Context, in *UserAndSubsId, opts ...grpc.CallOption) (*UserSubscriptionRelate, error)
	GetUserSubscriptionListBySubsId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserSubscriptionRelateList, error)
	GetUserSubscriptionListByUserId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserSubscriptionRelateList, error)
	GetUserIdListOfSubscription(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error)
	GetSubscriptionIdListOfUser(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error)
	GetSubscriptionUsersInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfoOfSubscriptionList, error)
	GetUserSubscriptionsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionInfoOfUserList, error)
	PutOneUserSubscriptionIsDelete(ctx context.Context, in *UserSubscriptionRelate, opts ...grpc.CallOption) (*UserSubscriptionRelate, error)
}

type mySQLBindServiceClient struct {
	cc *grpc.ClientConn
}

func NewMySQLBindServiceClient(cc *grpc.ClientConn) MySQLBindServiceClient {
	return &mySQLBindServiceClient{cc}
}

func (c *mySQLBindServiceClient) PostSaveOneNewUser(ctx context.Context, in *UserBasic, opts ...grpc.CallOption) (*UserBasic, error) {
	out := new(UserBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) DeleteOneUserReal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/DeleteOneUserReal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneUserById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserBasic, error) {
	out := new(UserBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneUserByEmail(ctx context.Context, in *EmailAndIsDelete, opts ...grpc.CallOption) (*UserBasic, error) {
	out := new(UserBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserListByName(ctx context.Context, in *NameAndIsDelete, opts ...grpc.CallOption) (*UserBasicList, error) {
	out := new(UserBasicList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserListByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneUserPasswordById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Password, error) {
	out := new(Password)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneUserPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneUserPasswordByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Password, error) {
	out := new(Password)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneUserPasswordByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetAllUserList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*UserBasicList, error) {
	out := new(UserBasicList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetAllUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserAvatarById(ctx context.Context, in *IdAndAvatar, opts ...grpc.CallOption) (*IdAndAvatar, error) {
	out := new(IdAndAvatar)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutUserAvatarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserQrCodeById(ctx context.Context, in *IdAndQrCode, opts ...grpc.CallOption) (*IdAndQrCode, error) {
	out := new(IdAndQrCode)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutUserQrCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserPasswordById(ctx context.Context, in *IdAndPassword, opts ...grpc.CallOption) (*IdAndPassword, error) {
	out := new(IdAndPassword)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutUserPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserIsDeleteById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdAndIsDelete, error) {
	out := new(IdAndIsDelete)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutUserIsDeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserProfileByIdPlus(ctx context.Context, in *UserProfilePlus, opts ...grpc.CallOption) (*UserProfilePlus, error) {
	out := new(UserProfilePlus)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutUserProfileByIdPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewFriendship(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewFriendship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewFriendPlus(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewFriendPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) DeleteOneFriendshipReal(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/DeleteOneFriendshipReal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneFriendship(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneFriendship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetFriendsIdListByOptions(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetFriendsIdListByOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetAllFriendshipList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*FriendshipBasicList, error) {
	out := new(FriendshipBasicList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetAllFriendshipList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetEffectiveFriendsIdListByIdPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetEffectiveFriendsIdListByIdPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetBlacklistFriendsIdListByIdPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetBlacklistFriendsIdListByIdPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetAllFriendsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FriendsInfoListPlus, error) {
	out := new(FriendsInfoListPlus)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetAllFriendsInfoPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetEffectiveFriendsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FriendsInfoListPlus, error) {
	out := new(FriendsInfoListPlus)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetEffectiveFriendsInfoPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetBlacklistFriendsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FriendsInfoListPlus, error) {
	out := new(FriendsInfoListPlus)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetBlacklistFriendsInfoPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneFriendNote(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneFriendNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneFriendIsAccept(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneFriendIsAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneFriendIsBlack(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneFriendIsBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneFriendIsDelete(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneFriendIsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutAcceptOneNewFriendPlus(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutAcceptOneNewFriendPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutDeleteOneFriendPlus(ctx context.Context, in *FriendshipBasic, opts ...grpc.CallOption) (*FriendshipBasic, error) {
	out := new(FriendshipBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutDeleteOneFriendPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewGroupChat(ctx context.Context, in *GroupChatBasic, opts ...grpc.CallOption) (*GroupChatBasic, error) {
	out := new(GroupChatBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewGroupChatPlus(ctx context.Context, in *GroupChatBasic, opts ...grpc.CallOption) (*GroupChatBasic, error) {
	out := new(GroupChatBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewGroupChatPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) DeleteOneGroupChatReal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/DeleteOneGroupChatReal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneGroupChatById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*GroupChatBasic, error) {
	out := new(GroupChatBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneGroupChatById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetGroupChatListByName(ctx context.Context, in *NameAndIsDelete, opts ...grpc.CallOption) (*GroupChatList, error) {
	out := new(GroupChatList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetGroupChatListByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetGroupChatListByManagerId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*GroupChatList, error) {
	out := new(GroupChatList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetGroupChatListByManagerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetAllGroupChatList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*GroupChatList, error) {
	out := new(GroupChatList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetAllGroupChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneGroupChatNameById(ctx context.Context, in *IdAndName, opts ...grpc.CallOption) (*IdAndName, error) {
	out := new(IdAndName)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneGroupChatNameById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneGroupChatManagerById(ctx context.Context, in *GroupAndManagerId, opts ...grpc.CallOption) (*GroupAndManagerId, error) {
	out := new(GroupAndManagerId)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneGroupChatManagerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneGroupChatAvatarById(ctx context.Context, in *IdAndAvatar, opts ...grpc.CallOption) (*IdAndAvatar, error) {
	out := new(IdAndAvatar)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneGroupChatAvatarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneGroupChatQrCodeById(ctx context.Context, in *IdAndQrCode, opts ...grpc.CallOption) (*IdAndQrCode, error) {
	out := new(IdAndQrCode)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneGroupChatQrCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneGroupChatIsDeleteById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdAndIsDelete, error) {
	out := new(IdAndIsDelete)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneGroupChatIsDeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewUserGroupChat(ctx context.Context, in *UserGroupChatRelate, opts ...grpc.CallOption) (*UserGroupChatRelate, error) {
	out := new(UserGroupChatRelate)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewUserGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) DeleteOneUserGroupChatReal(ctx context.Context, in *UserAndGroupId, opts ...grpc.CallOption) (*UserAndGroupId, error) {
	out := new(UserAndGroupId)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/DeleteOneUserGroupChatReal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneUserGroupChat(ctx context.Context, in *UserAndGroupId, opts ...grpc.CallOption) (*UserGroupChatRelate, error) {
	out := new(UserGroupChatRelate)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneUserGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetAllUserGroupChatList(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*UserGroupChatRelateList, error) {
	out := new(UserGroupChatRelateList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetAllUserGroupChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserGroupChatListByGroupId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserGroupChatRelateList, error) {
	out := new(UserGroupChatRelateList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserGroupChatListByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserGroupChatListByUserId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserGroupChatRelateList, error) {
	out := new(UserGroupChatRelateList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserGroupChatListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserIdListOfGroupChat(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserIdListOfGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetGroupChatIdListOfUser(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetGroupChatIdListOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetGroupChatUsersInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfoInGroupChatListPlus, error) {
	out := new(UserInfoInGroupChatListPlus)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetGroupChatUsersInfoPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserGroupChatsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GroupChatInfoListOfUserPlus, error) {
	out := new(GroupChatInfoListOfUserPlus)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserGroupChatsInfoPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneUserGroupChatNote(ctx context.Context, in *UserGroupChatRelate, opts ...grpc.CallOption) (*UserGroupChatRelate, error) {
	out := new(UserGroupChatRelate)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneUserGroupChatNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneUserGroupChatIsDelete(ctx context.Context, in *UserGroupChatRelate, opts ...grpc.CallOption) (*UserGroupChatRelate, error) {
	out := new(UserGroupChatRelate)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneUserGroupChatIsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewSubscription(ctx context.Context, in *SubscriptionBasic, opts ...grpc.CallOption) (*SubscriptionBasic, error) {
	out := new(SubscriptionBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewSubscriptionPlus(ctx context.Context, in *SubscriptionBasic, opts ...grpc.CallOption) (*SubscriptionBasic, error) {
	out := new(SubscriptionBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewSubscriptionPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) DeleteOneSubscriptionReal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/DeleteOneSubscriptionReal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneSubscriptionById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*SubscriptionBasic, error) {
	out := new(SubscriptionBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneSubscriptionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneSubscriptionByName(ctx context.Context, in *NameAndIsDelete, opts ...grpc.CallOption) (*SubscriptionBasic, error) {
	out := new(SubscriptionBasic)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneSubscriptionByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetSubscriptionListByManagerId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*SubscriptionBasicList, error) {
	out := new(SubscriptionBasicList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetSubscriptionListByManagerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneSubscriptionNameById(ctx context.Context, in *IdAndName, opts ...grpc.CallOption) (*IdAndName, error) {
	out := new(IdAndName)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneSubscriptionNameById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneSubscriptionManagerById(ctx context.Context, in *SubsAndManagerId, opts ...grpc.CallOption) (*SubsAndManagerId, error) {
	out := new(SubsAndManagerId)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneSubscriptionManagerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneSubscriptionIntroById(ctx context.Context, in *IdAndIntro, opts ...grpc.CallOption) (*IdAndIntro, error) {
	out := new(IdAndIntro)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneSubscriptionIntroById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneSubscriptionAvatarById(ctx context.Context, in *IdAndAvatar, opts ...grpc.CallOption) (*IdAndAvatar, error) {
	out := new(IdAndAvatar)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneSubscriptionAvatarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneSubscriptionQrCodeById(ctx context.Context, in *IdAndQrCode, opts ...grpc.CallOption) (*IdAndQrCode, error) {
	out := new(IdAndQrCode)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneSubscriptionQrCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneSubscriptionIsDeleteById(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdAndIsDelete, error) {
	out := new(IdAndIsDelete)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneSubscriptionIsDeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PostSaveOneNewUserSubscription(ctx context.Context, in *UserSubscriptionRelate, opts ...grpc.CallOption) (*UserSubscriptionRelate, error) {
	out := new(UserSubscriptionRelate)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PostSaveOneNewUserSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) DeleteOneUserSubscriptionReal(ctx context.Context, in *UserAndSubsId, opts ...grpc.CallOption) (*UserAndSubsId, error) {
	out := new(UserAndSubsId)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/DeleteOneUserSubscriptionReal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetOneUserSubscription(ctx context.Context, in *UserAndSubsId, opts ...grpc.CallOption) (*UserSubscriptionRelate, error) {
	out := new(UserSubscriptionRelate)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetOneUserSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserSubscriptionListBySubsId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserSubscriptionRelateList, error) {
	out := new(UserSubscriptionRelateList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserSubscriptionListBySubsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserSubscriptionListByUserId(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*UserSubscriptionRelateList, error) {
	out := new(UserSubscriptionRelateList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserSubscriptionListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserIdListOfSubscription(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserIdListOfSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetSubscriptionIdListOfUser(ctx context.Context, in *IdAndIsDelete, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetSubscriptionIdListOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetSubscriptionUsersInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfoOfSubscriptionList, error) {
	out := new(UserInfoOfSubscriptionList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetSubscriptionUsersInfoPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserSubscriptionsInfoPlus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionInfoOfUserList, error) {
	out := new(SubscriptionInfoOfUserList)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/GetUserSubscriptionsInfoPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneUserSubscriptionIsDelete(ctx context.Context, in *UserSubscriptionRelate, opts ...grpc.CallOption) (*UserSubscriptionRelate, error) {
	out := new(UserSubscriptionRelate)
	err := c.cc.Invoke(ctx, "/mysqlPb.MySQLBindService/PutOneUserSubscriptionIsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLBindServiceServer is the server API for MySQLBindService service.
type MySQLBindServiceServer interface {
	PostSaveOneNewUser(context.Context, *UserBasic) (*UserBasic, error)
	DeleteOneUserReal(context.Context, *Id) (*Id, error)
	GetOneUserById(context.Context, *IdAndIsDelete) (*UserBasic, error)
	GetOneUserByEmail(context.Context, *EmailAndIsDelete) (*UserBasic, error)
	GetUserListByName(context.Context, *NameAndIsDelete) (*UserBasicList, error)
	GetOneUserPasswordById(context.Context, *Id) (*Password, error)
	GetOneUserPasswordByEmail(context.Context, *Email) (*Password, error)
	GetAllUserList(context.Context, *EmptyParam) (*UserBasicList, error)
	PutUserAvatarById(context.Context, *IdAndAvatar) (*IdAndAvatar, error)
	PutUserQrCodeById(context.Context, *IdAndQrCode) (*IdAndQrCode, error)
	PutUserPasswordById(context.Context, *IdAndPassword) (*IdAndPassword, error)
	PutUserIsDeleteById(context.Context, *IdAndIsDelete) (*IdAndIsDelete, error)
	PutUserProfileByIdPlus(context.Context, *UserProfilePlus) (*UserProfilePlus, error)
	PostSaveOneNewFriendship(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	PostSaveOneNewFriendPlus(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	DeleteOneFriendshipReal(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	GetOneFriendship(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	GetFriendsIdListByOptions(context.Context, *FriendshipBasic) (*IdList, error)
	GetAllFriendshipList(context.Context, *EmptyParam) (*FriendshipBasicList, error)
	GetEffectiveFriendsIdListByIdPlus(context.Context, *Id) (*IdList, error)
	GetBlacklistFriendsIdListByIdPlus(context.Context, *Id) (*IdList, error)
	GetAllFriendsInfoPlus(context.Context, *Id) (*FriendsInfoListPlus, error)
	GetEffectiveFriendsInfoPlus(context.Context, *Id) (*FriendsInfoListPlus, error)
	GetBlacklistFriendsInfoPlus(context.Context, *Id) (*FriendsInfoListPlus, error)
	PutOneFriendNote(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	PutOneFriendIsAccept(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	PutOneFriendIsBlack(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	PutOneFriendIsDelete(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	PutAcceptOneNewFriendPlus(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	PutDeleteOneFriendPlus(context.Context, *FriendshipBasic) (*FriendshipBasic, error)
	PostSaveOneNewGroupChat(context.Context, *GroupChatBasic) (*GroupChatBasic, error)
	PostSaveOneNewGroupChatPlus(context.Context, *GroupChatBasic) (*GroupChatBasic, error)
	DeleteOneGroupChatReal(context.Context, *Id) (*Id, error)
	GetOneGroupChatById(context.Context, *IdAndIsDelete) (*GroupChatBasic, error)
	GetGroupChatListByName(context.Context, *NameAndIsDelete) (*GroupChatList, error)
	GetGroupChatListByManagerId(context.Context, *IdAndIsDelete) (*GroupChatList, error)
	GetAllGroupChatList(context.Context, *EmptyParam) (*GroupChatList, error)
	PutOneGroupChatNameById(context.Context, *IdAndName) (*IdAndName, error)
	PutOneGroupChatManagerById(context.Context, *GroupAndManagerId) (*GroupAndManagerId, error)
	PutOneGroupChatAvatarById(context.Context, *IdAndAvatar) (*IdAndAvatar, error)
	PutOneGroupChatQrCodeById(context.Context, *IdAndQrCode) (*IdAndQrCode, error)
	PutOneGroupChatIsDeleteById(context.Context, *IdAndIsDelete) (*IdAndIsDelete, error)
	PostSaveOneNewUserGroupChat(context.Context, *UserGroupChatRelate) (*UserGroupChatRelate, error)
	DeleteOneUserGroupChatReal(context.Context, *UserAndGroupId) (*UserAndGroupId, error)
	GetOneUserGroupChat(context.Context, *UserAndGroupId) (*UserGroupChatRelate, error)
	GetAllUserGroupChatList(context.Context, *EmptyParam) (*UserGroupChatRelateList, error)
	GetUserGroupChatListByGroupId(context.Context, *IdAndIsDelete) (*UserGroupChatRelateList, error)
	GetUserGroupChatListByUserId(context.Context, *IdAndIsDelete) (*UserGroupChatRelateList, error)
	GetUserIdListOfGroupChat(context.Context, *IdAndIsDelete) (*IdList, error)
	GetGroupChatIdListOfUser(context.Context, *IdAndIsDelete) (*IdList, error)
	GetGroupChatUsersInfoPlus(context.Context, *Id) (*UserInfoInGroupChatListPlus, error)
	GetUserGroupChatsInfoPlus(context.Context, *Id) (*GroupChatInfoListOfUserPlus, error)
	PutOneUserGroupChatNote(context.Context, *UserGroupChatRelate) (*UserGroupChatRelate, error)
	PutOneUserGroupChatIsDelete(context.Context, *UserGroupChatRelate) (*UserGroupChatRelate, error)
	PostSaveOneNewSubscription(context.Context, *SubscriptionBasic) (*SubscriptionBasic, error)
	PostSaveOneNewSubscriptionPlus(context.Context, *SubscriptionBasic) (*SubscriptionBasic, error)
	DeleteOneSubscriptionReal(context.Context, *Id) (*Id, error)
	GetOneSubscriptionById(context.Context, *IdAndIsDelete) (*SubscriptionBasic, error)
	GetOneSubscriptionByName(context.Context, *NameAndIsDelete) (*SubscriptionBasic, error)
	GetSubscriptionListByManagerId(context.Context, *IdAndIsDelete) (*SubscriptionBasicList, error)
	PutOneSubscriptionNameById(context.Context, *IdAndName) (*IdAndName, error)
	PutOneSubscriptionManagerById(context.Context, *SubsAndManagerId) (*SubsAndManagerId, error)
	PutOneSubscriptionIntroById(context.Context, *IdAndIntro) (*IdAndIntro, error)
	PutOneSubscriptionAvatarById(context.Context, *IdAndAvatar) (*IdAndAvatar, error)
	PutOneSubscriptionQrCodeById(context.Context, *IdAndQrCode) (*IdAndQrCode, error)
	PutOneSubscriptionIsDeleteById(context.Context, *IdAndIsDelete) (*IdAndIsDelete, error)
	PostSaveOneNewUserSubscription(context.Context, *UserSubscriptionRelate) (*UserSubscriptionRelate, error)
	DeleteOneUserSubscriptionReal(context.Context, *UserAndSubsId) (*UserAndSubsId, error)
	GetOneUserSubscription(context.Context, *UserAndSubsId) (*UserSubscriptionRelate, error)
	GetUserSubscriptionListBySubsId(context.Context, *IdAndIsDelete) (*UserSubscriptionRelateList, error)
	GetUserSubscriptionListByUserId(context.Context, *IdAndIsDelete) (*UserSubscriptionRelateList, error)
	GetUserIdListOfSubscription(context.Context, *IdAndIsDelete) (*IdList, error)
	GetSubscriptionIdListOfUser(context.Context, *IdAndIsDelete) (*IdList, error)
	GetSubscriptionUsersInfoPlus(context.Context, *Id) (*UserInfoOfSubscriptionList, error)
	GetUserSubscriptionsInfoPlus(context.Context, *Id) (*SubscriptionInfoOfUserList, error)
	PutOneUserSubscriptionIsDelete(context.Context, *UserSubscriptionRelate) (*UserSubscriptionRelate, error)
}

// UnimplementedMySQLBindServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMySQLBindServiceServer struct {
}

func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewUser(ctx context.Context, req *UserBasic) (*UserBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewUser not implemented")
}
func (*UnimplementedMySQLBindServiceServer) DeleteOneUserReal(ctx context.Context, req *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneUserReal not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneUserById(ctx context.Context, req *IdAndIsDelete) (*UserBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneUserByEmail(ctx context.Context, req *EmailAndIsDelete) (*UserBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserByEmail not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserListByName(ctx context.Context, req *NameAndIsDelete) (*UserBasicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserListByName not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneUserPasswordById(ctx context.Context, req *Id) (*Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserPasswordById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneUserPasswordByEmail(ctx context.Context, req *Email) (*Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserPasswordByEmail not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetAllUserList(ctx context.Context, req *EmptyParam) (*UserBasicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserList not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserAvatarById(ctx context.Context, req *IdAndAvatar) (*IdAndAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserAvatarById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserQrCodeById(ctx context.Context, req *IdAndQrCode) (*IdAndQrCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserQrCodeById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserPasswordById(ctx context.Context, req *IdAndPassword) (*IdAndPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserPasswordById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserIsDeleteById(ctx context.Context, req *IdAndIsDelete) (*IdAndIsDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserIsDeleteById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserProfileByIdPlus(ctx context.Context, req *UserProfilePlus) (*UserProfilePlus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserProfileByIdPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewFriendship(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewFriendship not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewFriendPlus(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewFriendPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) DeleteOneFriendshipReal(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneFriendshipReal not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneFriendship(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneFriendship not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetFriendsIdListByOptions(ctx context.Context, req *FriendshipBasic) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsIdListByOptions not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetAllFriendshipList(ctx context.Context, req *EmptyParam) (*FriendshipBasicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFriendshipList not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetEffectiveFriendsIdListByIdPlus(ctx context.Context, req *Id) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveFriendsIdListByIdPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetBlacklistFriendsIdListByIdPlus(ctx context.Context, req *Id) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistFriendsIdListByIdPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetAllFriendsInfoPlus(ctx context.Context, req *Id) (*FriendsInfoListPlus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFriendsInfoPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetEffectiveFriendsInfoPlus(ctx context.Context, req *Id) (*FriendsInfoListPlus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveFriendsInfoPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetBlacklistFriendsInfoPlus(ctx context.Context, req *Id) (*FriendsInfoListPlus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklistFriendsInfoPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneFriendNote(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneFriendNote not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneFriendIsAccept(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneFriendIsAccept not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneFriendIsBlack(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneFriendIsBlack not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneFriendIsDelete(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneFriendIsDelete not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutAcceptOneNewFriendPlus(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAcceptOneNewFriendPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutDeleteOneFriendPlus(ctx context.Context, req *FriendshipBasic) (*FriendshipBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDeleteOneFriendPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewGroupChat(ctx context.Context, req *GroupChatBasic) (*GroupChatBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewGroupChat not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewGroupChatPlus(ctx context.Context, req *GroupChatBasic) (*GroupChatBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewGroupChatPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) DeleteOneGroupChatReal(ctx context.Context, req *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneGroupChatReal not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneGroupChatById(ctx context.Context, req *IdAndIsDelete) (*GroupChatBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneGroupChatById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetGroupChatListByName(ctx context.Context, req *NameAndIsDelete) (*GroupChatList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupChatListByName not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetGroupChatListByManagerId(ctx context.Context, req *IdAndIsDelete) (*GroupChatList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupChatListByManagerId not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetAllGroupChatList(ctx context.Context, req *EmptyParam) (*GroupChatList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroupChatList not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneGroupChatNameById(ctx context.Context, req *IdAndName) (*IdAndName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneGroupChatNameById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneGroupChatManagerById(ctx context.Context, req *GroupAndManagerId) (*GroupAndManagerId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneGroupChatManagerById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneGroupChatAvatarById(ctx context.Context, req *IdAndAvatar) (*IdAndAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneGroupChatAvatarById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneGroupChatQrCodeById(ctx context.Context, req *IdAndQrCode) (*IdAndQrCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneGroupChatQrCodeById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneGroupChatIsDeleteById(ctx context.Context, req *IdAndIsDelete) (*IdAndIsDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneGroupChatIsDeleteById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewUserGroupChat(ctx context.Context, req *UserGroupChatRelate) (*UserGroupChatRelate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewUserGroupChat not implemented")
}
func (*UnimplementedMySQLBindServiceServer) DeleteOneUserGroupChatReal(ctx context.Context, req *UserAndGroupId) (*UserAndGroupId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneUserGroupChatReal not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneUserGroupChat(ctx context.Context, req *UserAndGroupId) (*UserGroupChatRelate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserGroupChat not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetAllUserGroupChatList(ctx context.Context, req *EmptyParam) (*UserGroupChatRelateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserGroupChatList not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserGroupChatListByGroupId(ctx context.Context, req *IdAndIsDelete) (*UserGroupChatRelateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupChatListByGroupId not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserGroupChatListByUserId(ctx context.Context, req *IdAndIsDelete) (*UserGroupChatRelateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupChatListByUserId not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserIdListOfGroupChat(ctx context.Context, req *IdAndIsDelete) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdListOfGroupChat not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetGroupChatIdListOfUser(ctx context.Context, req *IdAndIsDelete) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupChatIdListOfUser not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetGroupChatUsersInfoPlus(ctx context.Context, req *Id) (*UserInfoInGroupChatListPlus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupChatUsersInfoPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserGroupChatsInfoPlus(ctx context.Context, req *Id) (*GroupChatInfoListOfUserPlus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupChatsInfoPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneUserGroupChatNote(ctx context.Context, req *UserGroupChatRelate) (*UserGroupChatRelate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneUserGroupChatNote not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneUserGroupChatIsDelete(ctx context.Context, req *UserGroupChatRelate) (*UserGroupChatRelate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneUserGroupChatIsDelete not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewSubscription(ctx context.Context, req *SubscriptionBasic) (*SubscriptionBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewSubscription not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewSubscriptionPlus(ctx context.Context, req *SubscriptionBasic) (*SubscriptionBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewSubscriptionPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) DeleteOneSubscriptionReal(ctx context.Context, req *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneSubscriptionReal not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneSubscriptionById(ctx context.Context, req *IdAndIsDelete) (*SubscriptionBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSubscriptionById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneSubscriptionByName(ctx context.Context, req *NameAndIsDelete) (*SubscriptionBasic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSubscriptionByName not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetSubscriptionListByManagerId(ctx context.Context, req *IdAndIsDelete) (*SubscriptionBasicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionListByManagerId not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneSubscriptionNameById(ctx context.Context, req *IdAndName) (*IdAndName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneSubscriptionNameById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneSubscriptionManagerById(ctx context.Context, req *SubsAndManagerId) (*SubsAndManagerId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneSubscriptionManagerById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneSubscriptionIntroById(ctx context.Context, req *IdAndIntro) (*IdAndIntro, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneSubscriptionIntroById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneSubscriptionAvatarById(ctx context.Context, req *IdAndAvatar) (*IdAndAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneSubscriptionAvatarById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneSubscriptionQrCodeById(ctx context.Context, req *IdAndQrCode) (*IdAndQrCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneSubscriptionQrCodeById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneSubscriptionIsDeleteById(ctx context.Context, req *IdAndIsDelete) (*IdAndIsDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneSubscriptionIsDeleteById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PostSaveOneNewUserSubscription(ctx context.Context, req *UserSubscriptionRelate) (*UserSubscriptionRelate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveOneNewUserSubscription not implemented")
}
func (*UnimplementedMySQLBindServiceServer) DeleteOneUserSubscriptionReal(ctx context.Context, req *UserAndSubsId) (*UserAndSubsId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneUserSubscriptionReal not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetOneUserSubscription(ctx context.Context, req *UserAndSubsId) (*UserSubscriptionRelate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUserSubscription not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserSubscriptionListBySubsId(ctx context.Context, req *IdAndIsDelete) (*UserSubscriptionRelateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscriptionListBySubsId not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserSubscriptionListByUserId(ctx context.Context, req *IdAndIsDelete) (*UserSubscriptionRelateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscriptionListByUserId not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserIdListOfSubscription(ctx context.Context, req *IdAndIsDelete) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdListOfSubscription not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetSubscriptionIdListOfUser(ctx context.Context, req *IdAndIsDelete) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionIdListOfUser not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetSubscriptionUsersInfoPlus(ctx context.Context, req *Id) (*UserInfoOfSubscriptionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionUsersInfoPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserSubscriptionsInfoPlus(ctx context.Context, req *Id) (*SubscriptionInfoOfUserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscriptionsInfoPlus not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneUserSubscriptionIsDelete(ctx context.Context, req *UserSubscriptionRelate) (*UserSubscriptionRelate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneUserSubscriptionIsDelete not implemented")
}

func RegisterMySQLBindServiceServer(s *grpc.Server, srv MySQLBindServiceServer) {
	s.RegisterService(&_MySQLBindService_serviceDesc, srv)
}

func _MySQLBindService_PostSaveOneNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewUser(ctx, req.(*UserBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_DeleteOneUserReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).DeleteOneUserReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/DeleteOneUserReal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).DeleteOneUserReal(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneUserById(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneUserByEmail(ctx, req.(*EmailAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserListByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserListByName(ctx, req.(*NameAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneUserPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneUserPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneUserPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneUserPasswordById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneUserPasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneUserPasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneUserPasswordByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneUserPasswordByEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetAllUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetAllUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetAllUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetAllUserList(ctx, req.(*EmptyParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserAvatarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserAvatarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutUserAvatarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserAvatarById(ctx, req.(*IdAndAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserQrCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndQrCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserQrCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutUserQrCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserQrCodeById(ctx, req.(*IdAndQrCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutUserPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserPasswordById(ctx, req.(*IdAndPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserIsDeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserIsDeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutUserIsDeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserIsDeleteById(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserProfileByIdPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfilePlus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserProfileByIdPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutUserProfileByIdPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserProfileByIdPlus(ctx, req.(*UserProfilePlus))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewFriendship(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewFriendPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewFriendPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewFriendPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewFriendPlus(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_DeleteOneFriendshipReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).DeleteOneFriendshipReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/DeleteOneFriendshipReal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).DeleteOneFriendshipReal(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneFriendship(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetFriendsIdListByOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetFriendsIdListByOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetFriendsIdListByOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetFriendsIdListByOptions(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetAllFriendshipList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetAllFriendshipList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetAllFriendshipList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetAllFriendshipList(ctx, req.(*EmptyParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetEffectiveFriendsIdListByIdPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetEffectiveFriendsIdListByIdPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetEffectiveFriendsIdListByIdPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetEffectiveFriendsIdListByIdPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetBlacklistFriendsIdListByIdPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetBlacklistFriendsIdListByIdPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetBlacklistFriendsIdListByIdPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetBlacklistFriendsIdListByIdPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetAllFriendsInfoPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetAllFriendsInfoPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetAllFriendsInfoPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetAllFriendsInfoPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetEffectiveFriendsInfoPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetEffectiveFriendsInfoPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetEffectiveFriendsInfoPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetEffectiveFriendsInfoPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetBlacklistFriendsInfoPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetBlacklistFriendsInfoPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetBlacklistFriendsInfoPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetBlacklistFriendsInfoPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneFriendNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneFriendNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneFriendNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneFriendNote(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneFriendIsAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneFriendIsAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneFriendIsAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneFriendIsAccept(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneFriendIsBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneFriendIsBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneFriendIsBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneFriendIsBlack(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneFriendIsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneFriendIsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneFriendIsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneFriendIsDelete(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutAcceptOneNewFriendPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutAcceptOneNewFriendPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutAcceptOneNewFriendPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutAcceptOneNewFriendPlus(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutDeleteOneFriendPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendshipBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutDeleteOneFriendPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutDeleteOneFriendPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutDeleteOneFriendPlus(ctx, req.(*FriendshipBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewGroupChat(ctx, req.(*GroupChatBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewGroupChatPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewGroupChatPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewGroupChatPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewGroupChatPlus(ctx, req.(*GroupChatBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_DeleteOneGroupChatReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).DeleteOneGroupChatReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/DeleteOneGroupChatReal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).DeleteOneGroupChatReal(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneGroupChatById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneGroupChatById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneGroupChatById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneGroupChatById(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetGroupChatListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetGroupChatListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetGroupChatListByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetGroupChatListByName(ctx, req.(*NameAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetGroupChatListByManagerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetGroupChatListByManagerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetGroupChatListByManagerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetGroupChatListByManagerId(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetAllGroupChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetAllGroupChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetAllGroupChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetAllGroupChatList(ctx, req.(*EmptyParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneGroupChatNameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneGroupChatNameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneGroupChatNameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneGroupChatNameById(ctx, req.(*IdAndName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneGroupChatManagerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAndManagerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneGroupChatManagerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneGroupChatManagerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneGroupChatManagerById(ctx, req.(*GroupAndManagerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneGroupChatAvatarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneGroupChatAvatarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneGroupChatAvatarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneGroupChatAvatarById(ctx, req.(*IdAndAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneGroupChatQrCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndQrCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneGroupChatQrCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneGroupChatQrCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneGroupChatQrCodeById(ctx, req.(*IdAndQrCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneGroupChatIsDeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneGroupChatIsDeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneGroupChatIsDeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneGroupChatIsDeleteById(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewUserGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChatRelate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewUserGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewUserGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewUserGroupChat(ctx, req.(*UserGroupChatRelate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_DeleteOneUserGroupChatReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).DeleteOneUserGroupChatReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/DeleteOneUserGroupChatReal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).DeleteOneUserGroupChatReal(ctx, req.(*UserAndGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneUserGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneUserGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneUserGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneUserGroupChat(ctx, req.(*UserAndGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetAllUserGroupChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetAllUserGroupChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetAllUserGroupChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetAllUserGroupChatList(ctx, req.(*EmptyParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserGroupChatListByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserGroupChatListByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserGroupChatListByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserGroupChatListByGroupId(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserGroupChatListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserGroupChatListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserGroupChatListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserGroupChatListByUserId(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserIdListOfGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserIdListOfGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserIdListOfGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserIdListOfGroupChat(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetGroupChatIdListOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetGroupChatIdListOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetGroupChatIdListOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetGroupChatIdListOfUser(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetGroupChatUsersInfoPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetGroupChatUsersInfoPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetGroupChatUsersInfoPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetGroupChatUsersInfoPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserGroupChatsInfoPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserGroupChatsInfoPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserGroupChatsInfoPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserGroupChatsInfoPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneUserGroupChatNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChatRelate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneUserGroupChatNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneUserGroupChatNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneUserGroupChatNote(ctx, req.(*UserGroupChatRelate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneUserGroupChatIsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChatRelate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneUserGroupChatIsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneUserGroupChatIsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneUserGroupChatIsDelete(ctx, req.(*UserGroupChatRelate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewSubscription(ctx, req.(*SubscriptionBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewSubscriptionPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionBasic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewSubscriptionPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewSubscriptionPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewSubscriptionPlus(ctx, req.(*SubscriptionBasic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_DeleteOneSubscriptionReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).DeleteOneSubscriptionReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/DeleteOneSubscriptionReal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).DeleteOneSubscriptionReal(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneSubscriptionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneSubscriptionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneSubscriptionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneSubscriptionById(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneSubscriptionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneSubscriptionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneSubscriptionByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneSubscriptionByName(ctx, req.(*NameAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetSubscriptionListByManagerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetSubscriptionListByManagerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetSubscriptionListByManagerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetSubscriptionListByManagerId(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneSubscriptionNameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionNameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneSubscriptionNameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionNameById(ctx, req.(*IdAndName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneSubscriptionManagerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsAndManagerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionManagerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneSubscriptionManagerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionManagerById(ctx, req.(*SubsAndManagerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneSubscriptionIntroById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIntro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionIntroById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneSubscriptionIntroById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionIntroById(ctx, req.(*IdAndIntro))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneSubscriptionAvatarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionAvatarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneSubscriptionAvatarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionAvatarById(ctx, req.(*IdAndAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneSubscriptionQrCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndQrCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionQrCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneSubscriptionQrCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionQrCodeById(ctx, req.(*IdAndQrCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneSubscriptionIsDeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionIsDeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneSubscriptionIsDeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneSubscriptionIsDeleteById(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PostSaveOneNewUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSubscriptionRelate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PostSaveOneNewUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PostSaveOneNewUserSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PostSaveOneNewUserSubscription(ctx, req.(*UserSubscriptionRelate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_DeleteOneUserSubscriptionReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndSubsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).DeleteOneUserSubscriptionReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/DeleteOneUserSubscriptionReal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).DeleteOneUserSubscriptionReal(ctx, req.(*UserAndSubsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetOneUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndSubsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetOneUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetOneUserSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetOneUserSubscription(ctx, req.(*UserAndSubsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserSubscriptionListBySubsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserSubscriptionListBySubsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserSubscriptionListBySubsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserSubscriptionListBySubsId(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserSubscriptionListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserSubscriptionListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserSubscriptionListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserSubscriptionListByUserId(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserIdListOfSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserIdListOfSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserIdListOfSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserIdListOfSubscription(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetSubscriptionIdListOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndIsDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetSubscriptionIdListOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetSubscriptionIdListOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetSubscriptionIdListOfUser(ctx, req.(*IdAndIsDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetSubscriptionUsersInfoPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetSubscriptionUsersInfoPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetSubscriptionUsersInfoPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetSubscriptionUsersInfoPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserSubscriptionsInfoPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserSubscriptionsInfoPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/GetUserSubscriptionsInfoPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserSubscriptionsInfoPlus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneUserSubscriptionIsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSubscriptionRelate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneUserSubscriptionIsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlPb.MySQLBindService/PutOneUserSubscriptionIsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneUserSubscriptionIsDelete(ctx, req.(*UserSubscriptionRelate))
	}
	return interceptor(ctx, in, info, handler)
}

var _MySQLBindService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mysqlPb.MySQLBindService",
	HandlerType: (*MySQLBindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSaveOneNewUser",
			Handler:    _MySQLBindService_PostSaveOneNewUser_Handler,
		},
		{
			MethodName: "DeleteOneUserReal",
			Handler:    _MySQLBindService_DeleteOneUserReal_Handler,
		},
		{
			MethodName: "GetOneUserById",
			Handler:    _MySQLBindService_GetOneUserById_Handler,
		},
		{
			MethodName: "GetOneUserByEmail",
			Handler:    _MySQLBindService_GetOneUserByEmail_Handler,
		},
		{
			MethodName: "GetUserListByName",
			Handler:    _MySQLBindService_GetUserListByName_Handler,
		},
		{
			MethodName: "GetOneUserPasswordById",
			Handler:    _MySQLBindService_GetOneUserPasswordById_Handler,
		},
		{
			MethodName: "GetOneUserPasswordByEmail",
			Handler:    _MySQLBindService_GetOneUserPasswordByEmail_Handler,
		},
		{
			MethodName: "GetAllUserList",
			Handler:    _MySQLBindService_GetAllUserList_Handler,
		},
		{
			MethodName: "PutUserAvatarById",
			Handler:    _MySQLBindService_PutUserAvatarById_Handler,
		},
		{
			MethodName: "PutUserQrCodeById",
			Handler:    _MySQLBindService_PutUserQrCodeById_Handler,
		},
		{
			MethodName: "PutUserPasswordById",
			Handler:    _MySQLBindService_PutUserPasswordById_Handler,
		},
		{
			MethodName: "PutUserIsDeleteById",
			Handler:    _MySQLBindService_PutUserIsDeleteById_Handler,
		},
		{
			MethodName: "PutUserProfileByIdPlus",
			Handler:    _MySQLBindService_PutUserProfileByIdPlus_Handler,
		},
		{
			MethodName: "PostSaveOneNewFriendship",
			Handler:    _MySQLBindService_PostSaveOneNewFriendship_Handler,
		},
		{
			MethodName: "PostSaveOneNewFriendPlus",
			Handler:    _MySQLBindService_PostSaveOneNewFriendPlus_Handler,
		},
		{
			MethodName: "DeleteOneFriendshipReal",
			Handler:    _MySQLBindService_DeleteOneFriendshipReal_Handler,
		},
		{
			MethodName: "GetOneFriendship",
			Handler:    _MySQLBindService_GetOneFriendship_Handler,
		},
		{
			MethodName: "GetFriendsIdListByOptions",
			Handler:    _MySQLBindService_GetFriendsIdListByOptions_Handler,
		},
		{
			MethodName: "GetAllFriendshipList",
			Handler:    _MySQLBindService_GetAllFriendshipList_Handler,
		},
		{
			MethodName: "GetEffectiveFriendsIdListByIdPlus",
			Handler:    _MySQLBindService_GetEffectiveFriendsIdListByIdPlus_Handler,
		},
		{
			MethodName: "GetBlacklistFriendsIdListByIdPlus",
			Handler:    _MySQLBindService_GetBlacklistFriendsIdListByIdPlus_Handler,
		},
		{
			MethodName: "GetAllFriendsInfoPlus",
			Handler:    _MySQLBindService_GetAllFriendsInfoPlus_Handler,
		},
		{
			MethodName: "GetEffectiveFriendsInfoPlus",
			Handler:    _MySQLBindService_GetEffectiveFriendsInfoPlus_Handler,
		},
		{
			MethodName: "GetBlacklistFriendsInfoPlus",
			Handler:    _MySQLBindService_GetBlacklistFriendsInfoPlus_Handler,
		},
		{
			MethodName: "PutOneFriendNote",
			Handler:    _MySQLBindService_PutOneFriendNote_Handler,
		},
		{
			MethodName: "PutOneFriendIsAccept",
			Handler:    _MySQLBindService_PutOneFriendIsAccept_Handler,
		},
		{
			MethodName: "PutOneFriendIsBlack",
			Handler:    _MySQLBindService_PutOneFriendIsBlack_Handler,
		},
		{
			MethodName: "PutOneFriendIsDelete",
			Handler:    _MySQLBindService_PutOneFriendIsDelete_Handler,
		},
		{
			MethodName: "PutAcceptOneNewFriendPlus",
			Handler:    _MySQLBindService_PutAcceptOneNewFriendPlus_Handler,
		},
		{
			MethodName: "PutDeleteOneFriendPlus",
			Handler:    _MySQLBindService_PutDeleteOneFriendPlus_Handler,
		},
		{
			MethodName: "PostSaveOneNewGroupChat",
			Handler:    _MySQLBindService_PostSaveOneNewGroupChat_Handler,
		},
		{
			MethodName: "PostSaveOneNewGroupChatPlus",
			Handler:    _MySQLBindService_PostSaveOneNewGroupChatPlus_Handler,
		},
		{
			MethodName: "DeleteOneGroupChatReal",
			Handler:    _MySQLBindService_DeleteOneGroupChatReal_Handler,
		},
		{
			MethodName: "GetOneGroupChatById",
			Handler:    _MySQLBindService_GetOneGroupChatById_Handler,
		},
		{
			MethodName: "GetGroupChatListByName",
			Handler:    _MySQLBindService_GetGroupChatListByName_Handler,
		},
		{
			MethodName: "GetGroupChatListByManagerId",
			Handler:    _MySQLBindService_GetGroupChatListByManagerId_Handler,
		},
		{
			MethodName: "GetAllGroupChatList",
			Handler:    _MySQLBindService_GetAllGroupChatList_Handler,
		},
		{
			MethodName: "PutOneGroupChatNameById",
			Handler:    _MySQLBindService_PutOneGroupChatNameById_Handler,
		},
		{
			MethodName: "PutOneGroupChatManagerById",
			Handler:    _MySQLBindService_PutOneGroupChatManagerById_Handler,
		},
		{
			MethodName: "PutOneGroupChatAvatarById",
			Handler:    _MySQLBindService_PutOneGroupChatAvatarById_Handler,
		},
		{
			MethodName: "PutOneGroupChatQrCodeById",
			Handler:    _MySQLBindService_PutOneGroupChatQrCodeById_Handler,
		},
		{
			MethodName: "PutOneGroupChatIsDeleteById",
			Handler:    _MySQLBindService_PutOneGroupChatIsDeleteById_Handler,
		},
		{
			MethodName: "PostSaveOneNewUserGroupChat",
			Handler:    _MySQLBindService_PostSaveOneNewUserGroupChat_Handler,
		},
		{
			MethodName: "DeleteOneUserGroupChatReal",
			Handler:    _MySQLBindService_DeleteOneUserGroupChatReal_Handler,
		},
		{
			MethodName: "GetOneUserGroupChat",
			Handler:    _MySQLBindService_GetOneUserGroupChat_Handler,
		},
		{
			MethodName: "GetAllUserGroupChatList",
			Handler:    _MySQLBindService_GetAllUserGroupChatList_Handler,
		},
		{
			MethodName: "GetUserGroupChatListByGroupId",
			Handler:    _MySQLBindService_GetUserGroupChatListByGroupId_Handler,
		},
		{
			MethodName: "GetUserGroupChatListByUserId",
			Handler:    _MySQLBindService_GetUserGroupChatListByUserId_Handler,
		},
		{
			MethodName: "GetUserIdListOfGroupChat",
			Handler:    _MySQLBindService_GetUserIdListOfGroupChat_Handler,
		},
		{
			MethodName: "GetGroupChatIdListOfUser",
			Handler:    _MySQLBindService_GetGroupChatIdListOfUser_Handler,
		},
		{
			MethodName: "GetGroupChatUsersInfoPlus",
			Handler:    _MySQLBindService_GetGroupChatUsersInfoPlus_Handler,
		},
		{
			MethodName: "GetUserGroupChatsInfoPlus",
			Handler:    _MySQLBindService_GetUserGroupChatsInfoPlus_Handler,
		},
		{
			MethodName: "PutOneUserGroupChatNote",
			Handler:    _MySQLBindService_PutOneUserGroupChatNote_Handler,
		},
		{
			MethodName: "PutOneUserGroupChatIsDelete",
			Handler:    _MySQLBindService_PutOneUserGroupChatIsDelete_Handler,
		},
		{
			MethodName: "PostSaveOneNewSubscription",
			Handler:    _MySQLBindService_PostSaveOneNewSubscription_Handler,
		},
		{
			MethodName: "PostSaveOneNewSubscriptionPlus",
			Handler:    _MySQLBindService_PostSaveOneNewSubscriptionPlus_Handler,
		},
		{
			MethodName: "DeleteOneSubscriptionReal",
			Handler:    _MySQLBindService_DeleteOneSubscriptionReal_Handler,
		},
		{
			MethodName: "GetOneSubscriptionById",
			Handler:    _MySQLBindService_GetOneSubscriptionById_Handler,
		},
		{
			MethodName: "GetOneSubscriptionByName",
			Handler:    _MySQLBindService_GetOneSubscriptionByName_Handler,
		},
		{
			MethodName: "GetSubscriptionListByManagerId",
			Handler:    _MySQLBindService_GetSubscriptionListByManagerId_Handler,
		},
		{
			MethodName: "PutOneSubscriptionNameById",
			Handler:    _MySQLBindService_PutOneSubscriptionNameById_Handler,
		},
		{
			MethodName: "PutOneSubscriptionManagerById",
			Handler:    _MySQLBindService_PutOneSubscriptionManagerById_Handler,
		},
		{
			MethodName: "PutOneSubscriptionIntroById",
			Handler:    _MySQLBindService_PutOneSubscriptionIntroById_Handler,
		},
		{
			MethodName: "PutOneSubscriptionAvatarById",
			Handler:    _MySQLBindService_PutOneSubscriptionAvatarById_Handler,
		},
		{
			MethodName: "PutOneSubscriptionQrCodeById",
			Handler:    _MySQLBindService_PutOneSubscriptionQrCodeById_Handler,
		},
		{
			MethodName: "PutOneSubscriptionIsDeleteById",
			Handler:    _MySQLBindService_PutOneSubscriptionIsDeleteById_Handler,
		},
		{
			MethodName: "PostSaveOneNewUserSubscription",
			Handler:    _MySQLBindService_PostSaveOneNewUserSubscription_Handler,
		},
		{
			MethodName: "DeleteOneUserSubscriptionReal",
			Handler:    _MySQLBindService_DeleteOneUserSubscriptionReal_Handler,
		},
		{
			MethodName: "GetOneUserSubscription",
			Handler:    _MySQLBindService_GetOneUserSubscription_Handler,
		},
		{
			MethodName: "GetUserSubscriptionListBySubsId",
			Handler:    _MySQLBindService_GetUserSubscriptionListBySubsId_Handler,
		},
		{
			MethodName: "GetUserSubscriptionListByUserId",
			Handler:    _MySQLBindService_GetUserSubscriptionListByUserId_Handler,
		},
		{
			MethodName: "GetUserIdListOfSubscription",
			Handler:    _MySQLBindService_GetUserIdListOfSubscription_Handler,
		},
		{
			MethodName: "GetSubscriptionIdListOfUser",
			Handler:    _MySQLBindService_GetSubscriptionIdListOfUser_Handler,
		},
		{
			MethodName: "GetSubscriptionUsersInfoPlus",
			Handler:    _MySQLBindService_GetSubscriptionUsersInfoPlus_Handler,
		},
		{
			MethodName: "GetUserSubscriptionsInfoPlus",
			Handler:    _MySQLBindService_GetUserSubscriptionsInfoPlus_Handler,
		},
		{
			MethodName: "PutOneUserSubscriptionIsDelete",
			Handler:    _MySQLBindService_PutOneUserSubscriptionIsDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mysqlBind.proto",
}

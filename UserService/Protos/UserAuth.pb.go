// Code generated by protoc-gen-go. DO NOT EDIT.
// source: UserAuth.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AuthToken struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthToken) Reset()         { *m = AuthToken{} }
func (m *AuthToken) String() string { return proto.CompactTextString(m) }
func (*AuthToken) ProtoMessage()    {}
func (*AuthToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce91c7f1b4618f2e, []int{0}
}

func (m *AuthToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthToken.Unmarshal(m, b)
}
func (m *AuthToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthToken.Marshal(b, m, deterministic)
}
func (m *AuthToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthToken.Merge(m, src)
}
func (m *AuthToken) XXX_Size() int {
	return xxx_messageInfo_AuthToken.Size(m)
}
func (m *AuthToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthToken.DiscardUnknown(m)
}

var xxx_messageInfo_AuthToken proto.InternalMessageInfo

func (m *AuthToken) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type TokenCheckResult struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenCheckResult) Reset()         { *m = TokenCheckResult{} }
func (m *TokenCheckResult) String() string { return proto.CompactTextString(m) }
func (*TokenCheckResult) ProtoMessage()    {}
func (*TokenCheckResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce91c7f1b4618f2e, []int{1}
}

func (m *TokenCheckResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenCheckResult.Unmarshal(m, b)
}
func (m *TokenCheckResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenCheckResult.Marshal(b, m, deterministic)
}
func (m *TokenCheckResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenCheckResult.Merge(m, src)
}
func (m *TokenCheckResult) XXX_Size() int {
	return xxx_messageInfo_TokenCheckResult.Size(m)
}
func (m *TokenCheckResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenCheckResult.DiscardUnknown(m)
}

var xxx_messageInfo_TokenCheckResult proto.InternalMessageInfo

func (m *TokenCheckResult) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*AuthToken)(nil), "pb.AuthToken")
	proto.RegisterType((*TokenCheckResult)(nil), "pb.TokenCheckResult")
}

func init() { proto.RegisterFile("UserAuth.proto", fileDescriptor_ce91c7f1b4618f2e) }

var fileDescriptor_ce91c7f1b4618f2e = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0b, 0x2d, 0x4e, 0x2d,
	0x72, 0x2c, 0x2d, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92,
	0xe7, 0xe2, 0x04, 0x89, 0x84, 0xe4, 0x67, 0xa7, 0xe6, 0x09, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96,
	0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xda, 0x5c, 0x02, 0x60, 0x49,
	0xe7, 0x8c, 0xd4, 0xe4, 0xec, 0xa0, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0x21, 0x71, 0x2e, 0xf6, 0xd2,
	0xe2, 0xd4, 0xa2, 0xf8, 0xcc, 0x14, 0xb0, 0x52, 0xe6, 0x20, 0x36, 0x10, 0xd7, 0x33, 0xc5, 0xc8,
	0x91, 0x8b, 0x03, 0x66, 0x87, 0x90, 0x29, 0x17, 0x1f, 0x58, 0x0f, 0xc2, 0x78, 0x5e, 0xbd, 0x82,
	0x24, 0x3d, 0x38, 0x57, 0x4a, 0x04, 0xc4, 0x45, 0x37, 0x3b, 0x89, 0x0d, 0xec, 0x36, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x86, 0x2f, 0x8e, 0xad, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserAuthClient is the client API for UserAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserAuthClient interface {
	CheckAuthToken(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*TokenCheckResult, error)
}

type userAuthClient struct {
	cc *grpc.ClientConn
}

func NewUserAuthClient(cc *grpc.ClientConn) UserAuthClient {
	return &userAuthClient{cc}
}

func (c *userAuthClient) CheckAuthToken(ctx context.Context, in *AuthToken, opts ...grpc.CallOption) (*TokenCheckResult, error) {
	out := new(TokenCheckResult)
	err := c.cc.Invoke(ctx, "/pb.UserAuth/CheckAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServer is the server API for UserAuth service.
type UserAuthServer interface {
	CheckAuthToken(context.Context, *AuthToken) (*TokenCheckResult, error)
}

// UnimplementedUserAuthServer can be embedded to have forward compatible implementations.
type UnimplementedUserAuthServer struct {
}

func (*UnimplementedUserAuthServer) CheckAuthToken(ctx context.Context, req *AuthToken) (*TokenCheckResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthToken not implemented")
}

func RegisterUserAuthServer(s *grpc.Server, srv UserAuthServer) {
	s.RegisterService(&_UserAuth_serviceDesc, srv)
}

func _UserAuth_CheckAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).CheckAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserAuth/CheckAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).CheckAuthToken(ctx, req.(*AuthToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserAuth",
	HandlerType: (*UserAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthToken",
			Handler:    _UserAuth_CheckAuthToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "UserAuth.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mysqlBind.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryUserField int32

const (
	QueryUserField_ById    QueryUserField = 0
	QueryUserField_ByEmail QueryUserField = 1
	QueryUserField_ByName  QueryUserField = 2
)

var QueryUserField_name = map[int32]string{
	0: "ById",
	1: "ByEmail",
	2: "ByName",
}

var QueryUserField_value = map[string]int32{
	"ById":    0,
	"ByEmail": 1,
	"ByName":  2,
}

func (x QueryUserField) String() string {
	return proto.EnumName(QueryUserField_name, int32(x))
}

func (QueryUserField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{0}
}

type UpdateUserField int32

const (
	UpdateUserField_NameMobileGender UpdateUserField = 0
	UpdateUserField_Password         UpdateUserField = 1
)

var UpdateUserField_name = map[int32]string{
	0: "NameMobileGender",
	1: "Password",
}

var UpdateUserField_value = map[string]int32{
	"NameMobileGender": 0,
	"Password":         1,
}

func (x UpdateUserField) String() string {
	return proto.EnumName(UpdateUserField_name, int32(x))
}

func (UpdateUserField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{1}
}

// messages for operate the user basic information
type UserBasicInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mobile               string   `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Password             string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Gender               int32    `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	CreateTime           string   `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserBasicInfo) Reset()         { *m = UserBasicInfo{} }
func (m *UserBasicInfo) String() string { return proto.CompactTextString(m) }
func (*UserBasicInfo) ProtoMessage()    {}
func (*UserBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{0}
}

func (m *UserBasicInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserBasicInfo.Unmarshal(m, b)
}
func (m *UserBasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserBasicInfo.Marshal(b, m, deterministic)
}
func (m *UserBasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBasicInfo.Merge(m, src)
}
func (m *UserBasicInfo) XXX_Size() int {
	return xxx_messageInfo_UserBasicInfo.Size(m)
}
func (m *UserBasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserBasicInfo proto.InternalMessageInfo

func (m *UserBasicInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserBasicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserBasicInfo) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserBasicInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserBasicInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserBasicInfo) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *UserBasicInfo) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

type UserBasicInfoList struct {
	Data                 []*UserBasicInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserBasicInfoList) Reset()         { *m = UserBasicInfoList{} }
func (m *UserBasicInfoList) String() string { return proto.CompactTextString(m) }
func (*UserBasicInfoList) ProtoMessage()    {}
func (*UserBasicInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{1}
}

func (m *UserBasicInfoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserBasicInfoList.Unmarshal(m, b)
}
func (m *UserBasicInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserBasicInfoList.Marshal(b, m, deterministic)
}
func (m *UserBasicInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBasicInfoList.Merge(m, src)
}
func (m *UserBasicInfoList) XXX_Size() int {
	return xxx_messageInfo_UserBasicInfoList.Size(m)
}
func (m *UserBasicInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBasicInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_UserBasicInfoList proto.InternalMessageInfo

func (m *UserBasicInfoList) GetData() []*UserBasicInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryUserParams struct {
	FilterField          QueryUserField `protobuf:"varint,1,opt,name=filter_field,json=filterField,proto3,enum=pb.QueryUserField" json:"filter_field,omitempty"`
	Id                   int64          `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Email                string         `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryUserParams) Reset()         { *m = QueryUserParams{} }
func (m *QueryUserParams) String() string { return proto.CompactTextString(m) }
func (*QueryUserParams) ProtoMessage()    {}
func (*QueryUserParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{2}
}

func (m *QueryUserParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryUserParams.Unmarshal(m, b)
}
func (m *QueryUserParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryUserParams.Marshal(b, m, deterministic)
}
func (m *QueryUserParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserParams.Merge(m, src)
}
func (m *QueryUserParams) XXX_Size() int {
	return xxx_messageInfo_QueryUserParams.Size(m)
}
func (m *QueryUserParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserParams proto.InternalMessageInfo

func (m *QueryUserParams) GetFilterField() QueryUserField {
	if m != nil {
		return m.FilterField
	}
	return QueryUserField_ById
}

func (m *QueryUserParams) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryUserParams) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *QueryUserParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateUserParams struct {
	UpdateField          UpdateUserField `protobuf:"varint,1,opt,name=update_field,json=updateField,proto3,enum=pb.UpdateUserField" json:"update_field,omitempty"`
	Id                   int64           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Email                string          `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Mobile               string          `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Password             string          `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	Gender               int32           `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateUserParams) Reset()         { *m = UpdateUserParams{} }
func (m *UpdateUserParams) String() string { return proto.CompactTextString(m) }
func (*UpdateUserParams) ProtoMessage()    {}
func (*UpdateUserParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{3}
}

func (m *UpdateUserParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateUserParams.Unmarshal(m, b)
}
func (m *UpdateUserParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateUserParams.Marshal(b, m, deterministic)
}
func (m *UpdateUserParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserParams.Merge(m, src)
}
func (m *UpdateUserParams) XXX_Size() int {
	return xxx_messageInfo_UpdateUserParams.Size(m)
}
func (m *UpdateUserParams) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserParams.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserParams proto.InternalMessageInfo

func (m *UpdateUserParams) GetUpdateField() UpdateUserField {
	if m != nil {
		return m.UpdateField
	}
	return UpdateUserField_NameMobileGender
}

func (m *UpdateUserParams) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateUserParams) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUserParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateUserParams) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UpdateUserParams) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateUserParams) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

// message for operate the user more information
type UserAvatar struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Avatar               string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAvatar) Reset()         { *m = UserAvatar{} }
func (m *UserAvatar) String() string { return proto.CompactTextString(m) }
func (*UserAvatar) ProtoMessage()    {}
func (*UserAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{4}
}

func (m *UserAvatar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAvatar.Unmarshal(m, b)
}
func (m *UserAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAvatar.Marshal(b, m, deterministic)
}
func (m *UserAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAvatar.Merge(m, src)
}
func (m *UserAvatar) XXX_Size() int {
	return xxx_messageInfo_UserAvatar.Size(m)
}
func (m *UserAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_UserAvatar proto.InternalMessageInfo

func (m *UserAvatar) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserAvatar) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type UserQRCode struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QrCode               string   `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQRCode) Reset()         { *m = UserQRCode{} }
func (m *UserQRCode) String() string { return proto.CompactTextString(m) }
func (*UserQRCode) ProtoMessage()    {}
func (*UserQRCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{5}
}

func (m *UserQRCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQRCode.Unmarshal(m, b)
}
func (m *UserQRCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQRCode.Marshal(b, m, deterministic)
}
func (m *UserQRCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQRCode.Merge(m, src)
}
func (m *UserQRCode) XXX_Size() int {
	return xxx_messageInfo_UserQRCode.Size(m)
}
func (m *UserQRCode) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQRCode.DiscardUnknown(m)
}

var xxx_messageInfo_UserQRCode proto.InternalMessageInfo

func (m *UserQRCode) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserQRCode) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

// messages for operate the user's friendship information
type Friendship struct {
	SelfId               int64    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	FriendId             int64    `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	FriendNote           string   `protobuf:"bytes,3,opt,name=friend_note,json=friendNote,proto3" json:"friend_note,omitempty"`
	IsAccept             bool     `protobuf:"varint,4,opt,name=is_accept,json=isAccept,proto3" json:"is_accept,omitempty"`
	IsBlack              bool     `protobuf:"varint,5,opt,name=is_black,json=isBlack,proto3" json:"is_black,omitempty"`
	IsDelete             bool     `protobuf:"varint,6,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Friendship) Reset()         { *m = Friendship{} }
func (m *Friendship) String() string { return proto.CompactTextString(m) }
func (*Friendship) ProtoMessage()    {}
func (*Friendship) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{6}
}

func (m *Friendship) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Friendship.Unmarshal(m, b)
}
func (m *Friendship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Friendship.Marshal(b, m, deterministic)
}
func (m *Friendship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friendship.Merge(m, src)
}
func (m *Friendship) XXX_Size() int {
	return xxx_messageInfo_Friendship.Size(m)
}
func (m *Friendship) XXX_DiscardUnknown() {
	xxx_messageInfo_Friendship.DiscardUnknown(m)
}

var xxx_messageInfo_Friendship proto.InternalMessageInfo

func (m *Friendship) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *Friendship) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *Friendship) GetFriendNote() string {
	if m != nil {
		return m.FriendNote
	}
	return ""
}

func (m *Friendship) GetIsAccept() bool {
	if m != nil {
		return m.IsAccept
	}
	return false
}

func (m *Friendship) GetIsBlack() bool {
	if m != nil {
		return m.IsBlack
	}
	return false
}

func (m *Friendship) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

type FriendshipList struct {
	Data                 []*Friendship `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FriendshipList) Reset()         { *m = FriendshipList{} }
func (m *FriendshipList) String() string { return proto.CompactTextString(m) }
func (*FriendshipList) ProtoMessage()    {}
func (*FriendshipList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{7}
}

func (m *FriendshipList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendshipList.Unmarshal(m, b)
}
func (m *FriendshipList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendshipList.Marshal(b, m, deterministic)
}
func (m *FriendshipList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendshipList.Merge(m, src)
}
func (m *FriendshipList) XXX_Size() int {
	return xxx_messageInfo_FriendshipList.Size(m)
}
func (m *FriendshipList) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendshipList.DiscardUnknown(m)
}

var xxx_messageInfo_FriendshipList proto.InternalMessageInfo

func (m *FriendshipList) GetData() []*Friendship {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryFriendsParams struct {
	SelfId               int64    `protobuf:"varint,1,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFriendsParams) Reset()         { *m = QueryFriendsParams{} }
func (m *QueryFriendsParams) String() string { return proto.CompactTextString(m) }
func (*QueryFriendsParams) ProtoMessage()    {}
func (*QueryFriendsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{8}
}

func (m *QueryFriendsParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryFriendsParams.Unmarshal(m, b)
}
func (m *QueryFriendsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryFriendsParams.Marshal(b, m, deterministic)
}
func (m *QueryFriendsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFriendsParams.Merge(m, src)
}
func (m *QueryFriendsParams) XXX_Size() int {
	return xxx_messageInfo_QueryFriendsParams.Size(m)
}
func (m *QueryFriendsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFriendsParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFriendsParams proto.InternalMessageInfo

func (m *QueryFriendsParams) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

type FriendsBasicInfo struct {
	FriendId             int64    `protobuf:"varint,1,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Gender               int32    `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Note                 string   `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	IsBlack              bool     `protobuf:"varint,6,opt,name=is_black,json=isBlack,proto3" json:"is_black,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendsBasicInfo) Reset()         { *m = FriendsBasicInfo{} }
func (m *FriendsBasicInfo) String() string { return proto.CompactTextString(m) }
func (*FriendsBasicInfo) ProtoMessage()    {}
func (*FriendsBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{9}
}

func (m *FriendsBasicInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendsBasicInfo.Unmarshal(m, b)
}
func (m *FriendsBasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendsBasicInfo.Marshal(b, m, deterministic)
}
func (m *FriendsBasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsBasicInfo.Merge(m, src)
}
func (m *FriendsBasicInfo) XXX_Size() int {
	return xxx_messageInfo_FriendsBasicInfo.Size(m)
}
func (m *FriendsBasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsBasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsBasicInfo proto.InternalMessageInfo

func (m *FriendsBasicInfo) GetFriendId() int64 {
	if m != nil {
		return m.FriendId
	}
	return 0
}

func (m *FriendsBasicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FriendsBasicInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *FriendsBasicInfo) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *FriendsBasicInfo) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *FriendsBasicInfo) GetIsBlack() bool {
	if m != nil {
		return m.IsBlack
	}
	return false
}

type FriendsBasicInfoList struct {
	Data                 []*FriendsBasicInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FriendsBasicInfoList) Reset()         { *m = FriendsBasicInfoList{} }
func (m *FriendsBasicInfoList) String() string { return proto.CompactTextString(m) }
func (*FriendsBasicInfoList) ProtoMessage()    {}
func (*FriendsBasicInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d28f1fa67868a9e4, []int{10}
}

func (m *FriendsBasicInfoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendsBasicInfoList.Unmarshal(m, b)
}
func (m *FriendsBasicInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendsBasicInfoList.Marshal(b, m, deterministic)
}
func (m *FriendsBasicInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendsBasicInfoList.Merge(m, src)
}
func (m *FriendsBasicInfoList) XXX_Size() int {
	return xxx_messageInfo_FriendsBasicInfoList.Size(m)
}
func (m *FriendsBasicInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendsBasicInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_FriendsBasicInfoList proto.InternalMessageInfo

func (m *FriendsBasicInfoList) GetData() []*FriendsBasicInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.QueryUserField", QueryUserField_name, QueryUserField_value)
	proto.RegisterEnum("pb.UpdateUserField", UpdateUserField_name, UpdateUserField_value)
	proto.RegisterType((*UserBasicInfo)(nil), "pb.UserBasicInfo")
	proto.RegisterType((*UserBasicInfoList)(nil), "pb.UserBasicInfoList")
	proto.RegisterType((*QueryUserParams)(nil), "pb.QueryUserParams")
	proto.RegisterType((*UpdateUserParams)(nil), "pb.UpdateUserParams")
	proto.RegisterType((*UserAvatar)(nil), "pb.UserAvatar")
	proto.RegisterType((*UserQRCode)(nil), "pb.UserQRCode")
	proto.RegisterType((*Friendship)(nil), "pb.Friendship")
	proto.RegisterType((*FriendshipList)(nil), "pb.FriendshipList")
	proto.RegisterType((*QueryFriendsParams)(nil), "pb.QueryFriendsParams")
	proto.RegisterType((*FriendsBasicInfo)(nil), "pb.FriendsBasicInfo")
	proto.RegisterType((*FriendsBasicInfoList)(nil), "pb.FriendsBasicInfoList")
}

func init() { proto.RegisterFile("mysqlBind.proto", fileDescriptor_d28f1fa67868a9e4) }

var fileDescriptor_d28f1fa67868a9e4 = []byte{
	// 857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdb, 0x6e, 0x23, 0x45,
	0x10, 0xdd, 0x71, 0xec, 0xf1, 0x6c, 0x39, 0xd8, 0x93, 0x8e, 0x09, 0x83, 0x79, 0x20, 0x1a, 0x09,
	0xc9, 0x5a, 0x89, 0x48, 0xeb, 0x24, 0x08, 0x01, 0x02, 0x62, 0x20, 0x91, 0xa5, 0xdd, 0xc4, 0x99,
	0x65, 0x9f, 0xad, 0xb6, 0xbb, 0x0d, 0x2d, 0xe6, 0xe2, 0xcc, 0x8c, 0x37, 0xf2, 0x2b, 0x7f, 0xc1,
	0x1b, 0x5f, 0x81, 0xf8, 0x0c, 0x3e, 0x09, 0x75, 0x75, 0x7b, 0x6e, 0xb6, 0x95, 0xb5, 0xf6, 0xcd,
	0x75, 0x39, 0x35, 0xd5, 0xa7, 0x4e, 0x95, 0x0c, 0x9d, 0x60, 0x95, 0x3c, 0xf8, 0x43, 0x11, 0xb2,
	0xb3, 0x45, 0x1c, 0xa5, 0x11, 0xa9, 0x2d, 0xa6, 0xee, 0x3f, 0x06, 0x7c, 0xf4, 0x36, 0xe1, 0xf1,
	0x90, 0x26, 0x62, 0x36, 0x0a, 0xe7, 0x11, 0x69, 0x43, 0x4d, 0x30, 0xc7, 0x38, 0x35, 0xfa, 0x07,
	0x5e, 0x4d, 0x30, 0x42, 0xa0, 0x1e, 0xd2, 0x80, 0x3b, 0xb5, 0x53, 0xa3, 0xff, 0xdc, 0xc3, 0xdf,
	0xe4, 0x04, 0xcc, 0x20, 0x9a, 0x0a, 0x9f, 0x3b, 0x07, 0xe8, 0xd5, 0x16, 0xe9, 0x42, 0x83, 0x07,
	0x54, 0xf8, 0x4e, 0x1d, 0xdd, 0xca, 0x20, 0x3d, 0xb0, 0x16, 0x34, 0x49, 0x1e, 0xa3, 0x98, 0x39,
	0x0d, 0x0c, 0x64, 0xb6, 0xac, 0xf4, 0x1b, 0x0f, 0x19, 0x8f, 0x1d, 0xf3, 0xd4, 0xe8, 0x37, 0x3c,
	0x6d, 0x91, 0xcf, 0xa1, 0x35, 0x8b, 0x39, 0x4d, 0xf9, 0x24, 0x15, 0x01, 0x77, 0x9a, 0x08, 0x03,
	0xe5, 0xfa, 0x55, 0x04, 0xdc, 0xfd, 0x06, 0x8e, 0x4a, 0x7d, 0xbf, 0x12, 0x49, 0x4a, 0xbe, 0x80,
	0x3a, 0xa3, 0x29, 0x75, 0x8c, 0xd3, 0x83, 0x7e, 0x6b, 0x70, 0x74, 0xb6, 0x98, 0x9e, 0x95, 0x92,
	0x3c, 0x0c, 0xbb, 0x7f, 0x1a, 0xd0, 0xb9, 0x5f, 0xf2, 0x78, 0x25, 0x83, 0x63, 0x1a, 0xd3, 0x20,
	0x21, 0x97, 0x70, 0x38, 0x17, 0x7e, 0xca, 0xe3, 0xc9, 0x5c, 0x70, 0x5f, 0x11, 0xd0, 0x1e, 0x10,
	0x59, 0x22, 0x4b, 0xbd, 0x96, 0x11, 0xaf, 0xa5, 0xf2, 0xd0, 0xd0, 0x6c, 0xd5, 0x32, 0xb6, 0x32,
	0x06, 0x0e, 0x8a, 0x0c, 0xac, 0x39, 0xac, 0xe7, 0x1c, 0xba, 0xff, 0x19, 0x60, 0xbf, 0x5d, 0x30,
	0x9a, 0xf2, 0x42, 0x17, 0x5f, 0xc1, 0xe1, 0x12, 0x7d, 0xa5, 0x2e, 0x8e, 0xf1, 0x21, 0x59, 0xae,
	0x6e, 0x43, 0x25, 0x7e, 0x60, 0x1b, 0x85, 0x51, 0x36, 0x4a, 0xa3, 0x2c, 0x0e, 0xcd, 0xdc, 0x39,
	0xb4, 0x66, 0x71, 0x68, 0xee, 0x05, 0x80, 0xec, 0xef, 0xea, 0x1d, 0x4d, 0x69, 0xbc, 0x21, 0xa4,
	0x13, 0x30, 0x29, 0x46, 0xb4, 0x94, 0xb4, 0xe5, 0x5e, 0x2a, 0xd4, 0xbd, 0xf7, 0x53, 0xc4, 0xf8,
	0x06, 0xea, 0x13, 0x68, 0x3e, 0xc4, 0x93, 0x59, 0xc4, 0xd6, 0x0a, 0x34, 0x1f, 0x62, 0x99, 0xe8,
	0xfe, 0x6b, 0x00, 0x5c, 0xc7, 0x82, 0x87, 0x2c, 0xf9, 0x5d, 0x2c, 0x64, 0x5e, 0xc2, 0xfd, 0xf9,
	0x24, 0x03, 0x9b, 0xd2, 0x1c, 0x31, 0xf2, 0x19, 0x3c, 0x9f, 0x63, 0xda, 0x24, 0x63, 0xc8, 0x52,
	0x8e, 0x11, 0x93, 0x32, 0xd3, 0xc1, 0x30, 0x4a, 0xd7, 0x6a, 0x06, 0xe5, 0xba, 0x8d, 0x52, 0x2e,
	0xd1, 0x22, 0x99, 0xd0, 0xd9, 0x8c, 0x2f, 0x52, 0xe4, 0xcd, 0xf2, 0x2c, 0x91, 0x5c, 0xa1, 0x4d,
	0x3e, 0x05, 0x4b, 0x24, 0x93, 0xa9, 0x4f, 0x67, 0x7f, 0x20, 0x7b, 0x96, 0xd7, 0x14, 0xc9, 0x50,
	0x9a, 0x1a, 0xc7, 0xb8, 0xcf, 0x53, 0x8e, 0xfc, 0x21, 0xee, 0x67, 0xb4, 0xdd, 0x0b, 0x68, 0xe7,
	0x9d, 0xa3, 0x70, 0xdd, 0x92, 0x70, 0xdb, 0x72, 0xde, 0x79, 0x86, 0x56, 0xed, 0x97, 0x40, 0x50,
	0x89, 0x3a, 0xa0, 0x15, 0xb3, 0xeb, 0xdd, 0xee, 0xdf, 0x06, 0xd8, 0x3a, 0x35, 0x5f, 0xee, 0x12,
	0x19, 0x46, 0x85, 0x8c, 0x6d, 0x9b, 0xbe, 0x5d, 0x48, 0xb9, 0x00, 0xea, 0xa5, 0xad, 0x95, 0x15,
	0x24, 0x8f, 0x0d, 0x5d, 0x41, 0x32, 0x58, 0x24, 0xc9, 0x2c, 0x91, 0xe4, 0xfe, 0x08, 0xdd, 0x6a,
	0x87, 0xc8, 0x46, 0xbf, 0xc4, 0x46, 0xb7, 0xc0, 0x46, 0x65, 0x93, 0x5f, 0x9c, 0x43, 0xbb, 0xbc,
	0x9d, 0xc4, 0x82, 0xfa, 0x70, 0x35, 0x62, 0xf6, 0x33, 0xd2, 0x82, 0xe6, 0x70, 0xf5, 0x8b, 0xec,
	0xd7, 0x36, 0x08, 0x80, 0x39, 0x5c, 0xdd, 0xd2, 0x80, 0xdb, 0xb5, 0x17, 0x97, 0xd0, 0xa9, 0x2c,
	0x13, 0xe9, 0x82, 0x2d, 0x83, 0xaf, 0x51, 0xfb, 0x37, 0xf8, 0x18, 0xfb, 0x19, 0x39, 0x04, 0x6b,
	0xac, 0x35, 0x6f, 0x1b, 0x83, 0xbf, 0x2c, 0xb0, 0x5f, 0xaf, 0xde, 0xdc, 0xbf, 0x92, 0x27, 0xf4,
	0x0d, 0x8f, 0xdf, 0x89, 0x19, 0x27, 0x03, 0x80, 0x5b, 0xfe, 0x78, 0x17, 0x62, 0x2d, 0xb2, 0x79,
	0x71, 0x7a, 0x9b, 0x2e, 0x72, 0x09, 0xad, 0x1b, 0x9e, 0xa2, 0x6f, 0x35, 0x62, 0xe4, 0xb8, 0x74,
	0x63, 0xd4, 0x58, 0xb7, 0xc1, 0xbe, 0x86, 0x76, 0x06, 0xc3, 0x67, 0xbd, 0x37, 0xf2, 0xbb, 0x0c,
	0x99, 0x28, 0x12, 0xb6, 0x23, 0x3f, 0xde, 0x40, 0xe2, 0x34, 0xbe, 0x05, 0x7b, 0xbc, 0x4c, 0x33,
	0x3f, 0xf6, 0xdc, 0x2d, 0x5f, 0xa4, 0xdd, 0x9f, 0xfe, 0x1e, 0x8e, 0x35, 0x78, 0xcd, 0xe4, 0x7e,
	0xf8, 0x2b, 0x38, 0xd9, 0xc0, 0xab, 0xc7, 0xbf, 0x77, 0x89, 0x73, 0x38, 0xd2, 0xaf, 0x57, 0x87,
	0x09, 0x1b, 0x68, 0xaf, 0xf3, 0x94, 0xaf, 0x57, 0xb1, 0x25, 0x48, 0x7f, 0x77, 0x3f, 0x90, 0xfe,
	0x92, 0x3a, 0x66, 0x65, 0x90, 0xf2, 0xf5, 0x2a, 0x76, 0xe1, 0x4b, 0x7b, 0x80, 0x5e, 0x42, 0xe7,
	0x8a, 0xb1, 0xbb, 0x90, 0xdf, 0xf2, 0x47, 0xb5, 0x1a, 0xa4, 0x72, 0x34, 0x7a, 0x15, 0x9b, 0x0c,
	0x70, 0x8c, 0x77, 0x21, 0xbf, 0xce, 0xaf, 0xdb, 0x53, 0x98, 0x0b, 0x20, 0xea, 0xd4, 0xed, 0xf5,
	0xa5, 0x0b, 0x20, 0xe3, 0x65, 0xaa, 0x1c, 0xb8, 0xe8, 0xbe, 0x94, 0xd1, 0x53, 0xa8, 0x97, 0xd0,
	0x51, 0xe7, 0x31, 0x6b, 0xf1, 0x49, 0xc8, 0x0f, 0xc8, 0x77, 0xee, 0xc0, 0x71, 0x9f, 0x64, 0xd2,
	0x2e, 0x1d, 0xca, 0x1e, 0x29, 0x83, 0x51, 0xda, 0x37, 0x70, 0x9c, 0x17, 0xc8, 0x15, 0xb3, 0xab,
	0x84, 0xb3, 0xed, 0x12, 0xc9, 0x42, 0x53, 0x13, 0xff, 0x51, 0x9d, 0xff, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0x6d, 0x8a, 0x30, 0x40, 0x64, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MySQLBindServiceClient is the client API for MySQLBindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MySQLBindServiceClient interface {
	NewOneUser(ctx context.Context, in *UserBasicInfo, opts ...grpc.CallOption) (*UserBasicInfo, error)
	GetUserById(ctx context.Context, in *QueryUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error)
	GetUserByEmail(ctx context.Context, in *QueryUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error)
	GetUsersByName(ctx context.Context, in *QueryUserParams, opts ...grpc.CallOption) (*UserBasicInfoList, error)
	PutUserBasicById(ctx context.Context, in *UpdateUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error)
	PutUserPasswordById(ctx context.Context, in *UpdateUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error)
	PutUserPasswordByEmail(ctx context.Context, in *UpdateUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error)
	GetUserAvatarById(ctx context.Context, in *UserAvatar, opts ...grpc.CallOption) (*UserAvatar, error)
	PutUserAvatarById(ctx context.Context, in *UserAvatar, opts ...grpc.CallOption) (*UserAvatar, error)
	GetUserQRCodeById(ctx context.Context, in *UserQRCode, opts ...grpc.CallOption) (*UserQRCode, error)
	PutUserQRCodeById(ctx context.Context, in *UserQRCode, opts ...grpc.CallOption) (*UserQRCode, error)
	AddOneNewFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error)
	PutOneFriendNote(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error)
	AcceptOneNewFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error)
	PutFriendBlacklist(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error)
	DeleteOneFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error)
	GetFriendshipInfo(ctx context.Context, in *QueryFriendsParams, opts ...grpc.CallOption) (*FriendshipList, error)
	GetFriendsBasicInfo(ctx context.Context, in *QueryFriendsParams, opts ...grpc.CallOption) (*FriendsBasicInfoList, error)
}

type mySQLBindServiceClient struct {
	cc *grpc.ClientConn
}

func NewMySQLBindServiceClient(cc *grpc.ClientConn) MySQLBindServiceClient {
	return &mySQLBindServiceClient{cc}
}

func (c *mySQLBindServiceClient) NewOneUser(ctx context.Context, in *UserBasicInfo, opts ...grpc.CallOption) (*UserBasicInfo, error) {
	out := new(UserBasicInfo)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/NewOneUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserById(ctx context.Context, in *QueryUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error) {
	out := new(UserBasicInfo)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserByEmail(ctx context.Context, in *QueryUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error) {
	out := new(UserBasicInfo)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUsersByName(ctx context.Context, in *QueryUserParams, opts ...grpc.CallOption) (*UserBasicInfoList, error) {
	out := new(UserBasicInfoList)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/GetUsersByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserBasicById(ctx context.Context, in *UpdateUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error) {
	out := new(UserBasicInfo)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/PutUserBasicById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserPasswordById(ctx context.Context, in *UpdateUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error) {
	out := new(UserBasicInfo)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/PutUserPasswordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserPasswordByEmail(ctx context.Context, in *UpdateUserParams, opts ...grpc.CallOption) (*UserBasicInfo, error) {
	out := new(UserBasicInfo)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/PutUserPasswordByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserAvatarById(ctx context.Context, in *UserAvatar, opts ...grpc.CallOption) (*UserAvatar, error) {
	out := new(UserAvatar)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/GetUserAvatarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserAvatarById(ctx context.Context, in *UserAvatar, opts ...grpc.CallOption) (*UserAvatar, error) {
	out := new(UserAvatar)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/PutUserAvatarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetUserQRCodeById(ctx context.Context, in *UserQRCode, opts ...grpc.CallOption) (*UserQRCode, error) {
	out := new(UserQRCode)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/GetUserQRCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutUserQRCodeById(ctx context.Context, in *UserQRCode, opts ...grpc.CallOption) (*UserQRCode, error) {
	out := new(UserQRCode)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/PutUserQRCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) AddOneNewFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error) {
	out := new(Friendship)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/AddOneNewFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutOneFriendNote(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error) {
	out := new(Friendship)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/PutOneFriendNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) AcceptOneNewFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error) {
	out := new(Friendship)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/AcceptOneNewFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) PutFriendBlacklist(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error) {
	out := new(Friendship)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/PutFriendBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) DeleteOneFriend(ctx context.Context, in *Friendship, opts ...grpc.CallOption) (*Friendship, error) {
	out := new(Friendship)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/DeleteOneFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetFriendshipInfo(ctx context.Context, in *QueryFriendsParams, opts ...grpc.CallOption) (*FriendshipList, error) {
	out := new(FriendshipList)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/GetFriendshipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLBindServiceClient) GetFriendsBasicInfo(ctx context.Context, in *QueryFriendsParams, opts ...grpc.CallOption) (*FriendsBasicInfoList, error) {
	out := new(FriendsBasicInfoList)
	err := c.cc.Invoke(ctx, "/pb.MySQLBindService/GetFriendsBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLBindServiceServer is the server API for MySQLBindService service.
type MySQLBindServiceServer interface {
	NewOneUser(context.Context, *UserBasicInfo) (*UserBasicInfo, error)
	GetUserById(context.Context, *QueryUserParams) (*UserBasicInfo, error)
	GetUserByEmail(context.Context, *QueryUserParams) (*UserBasicInfo, error)
	GetUsersByName(context.Context, *QueryUserParams) (*UserBasicInfoList, error)
	PutUserBasicById(context.Context, *UpdateUserParams) (*UserBasicInfo, error)
	PutUserPasswordById(context.Context, *UpdateUserParams) (*UserBasicInfo, error)
	PutUserPasswordByEmail(context.Context, *UpdateUserParams) (*UserBasicInfo, error)
	GetUserAvatarById(context.Context, *UserAvatar) (*UserAvatar, error)
	PutUserAvatarById(context.Context, *UserAvatar) (*UserAvatar, error)
	GetUserQRCodeById(context.Context, *UserQRCode) (*UserQRCode, error)
	PutUserQRCodeById(context.Context, *UserQRCode) (*UserQRCode, error)
	AddOneNewFriend(context.Context, *Friendship) (*Friendship, error)
	PutOneFriendNote(context.Context, *Friendship) (*Friendship, error)
	AcceptOneNewFriend(context.Context, *Friendship) (*Friendship, error)
	PutFriendBlacklist(context.Context, *Friendship) (*Friendship, error)
	DeleteOneFriend(context.Context, *Friendship) (*Friendship, error)
	GetFriendshipInfo(context.Context, *QueryFriendsParams) (*FriendshipList, error)
	GetFriendsBasicInfo(context.Context, *QueryFriendsParams) (*FriendsBasicInfoList, error)
}

// UnimplementedMySQLBindServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMySQLBindServiceServer struct {
}

func (*UnimplementedMySQLBindServiceServer) NewOneUser(ctx context.Context, req *UserBasicInfo) (*UserBasicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOneUser not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserById(ctx context.Context, req *QueryUserParams) (*UserBasicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserByEmail(ctx context.Context, req *QueryUserParams) (*UserBasicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUsersByName(ctx context.Context, req *QueryUserParams) (*UserBasicInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByName not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserBasicById(ctx context.Context, req *UpdateUserParams) (*UserBasicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserBasicById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserPasswordById(ctx context.Context, req *UpdateUserParams) (*UserBasicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserPasswordById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserPasswordByEmail(ctx context.Context, req *UpdateUserParams) (*UserBasicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserPasswordByEmail not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserAvatarById(ctx context.Context, req *UserAvatar) (*UserAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAvatarById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserAvatarById(ctx context.Context, req *UserAvatar) (*UserAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserAvatarById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetUserQRCodeById(ctx context.Context, req *UserQRCode) (*UserQRCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserQRCodeById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutUserQRCodeById(ctx context.Context, req *UserQRCode) (*UserQRCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserQRCodeById not implemented")
}
func (*UnimplementedMySQLBindServiceServer) AddOneNewFriend(ctx context.Context, req *Friendship) (*Friendship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOneNewFriend not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutOneFriendNote(ctx context.Context, req *Friendship) (*Friendship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOneFriendNote not implemented")
}
func (*UnimplementedMySQLBindServiceServer) AcceptOneNewFriend(ctx context.Context, req *Friendship) (*Friendship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOneNewFriend not implemented")
}
func (*UnimplementedMySQLBindServiceServer) PutFriendBlacklist(ctx context.Context, req *Friendship) (*Friendship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFriendBlacklist not implemented")
}
func (*UnimplementedMySQLBindServiceServer) DeleteOneFriend(ctx context.Context, req *Friendship) (*Friendship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneFriend not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetFriendshipInfo(ctx context.Context, req *QueryFriendsParams) (*FriendshipList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendshipInfo not implemented")
}
func (*UnimplementedMySQLBindServiceServer) GetFriendsBasicInfo(ctx context.Context, req *QueryFriendsParams) (*FriendsBasicInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsBasicInfo not implemented")
}

func RegisterMySQLBindServiceServer(s *grpc.Server, srv MySQLBindServiceServer) {
	s.RegisterService(&_MySQLBindService_serviceDesc, srv)
}

func _MySQLBindService_NewOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBasicInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).NewOneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/NewOneUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).NewOneUser(ctx, req.(*UserBasicInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserById(ctx, req.(*QueryUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserByEmail(ctx, req.(*QueryUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUsersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUsersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/GetUsersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUsersByName(ctx, req.(*QueryUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserBasicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserBasicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/PutUserBasicById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserBasicById(ctx, req.(*UpdateUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserPasswordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserPasswordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/PutUserPasswordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserPasswordById(ctx, req.(*UpdateUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserPasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserPasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/PutUserPasswordByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserPasswordByEmail(ctx, req.(*UpdateUserParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserAvatarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserAvatarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/GetUserAvatarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserAvatarById(ctx, req.(*UserAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserAvatarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserAvatarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/PutUserAvatarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserAvatarById(ctx, req.(*UserAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetUserQRCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQRCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetUserQRCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/GetUserQRCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetUserQRCodeById(ctx, req.(*UserQRCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutUserQRCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQRCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutUserQRCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/PutUserQRCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutUserQRCodeById(ctx, req.(*UserQRCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_AddOneNewFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).AddOneNewFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/AddOneNewFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).AddOneNewFriend(ctx, req.(*Friendship))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutOneFriendNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutOneFriendNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/PutOneFriendNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutOneFriendNote(ctx, req.(*Friendship))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_AcceptOneNewFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).AcceptOneNewFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/AcceptOneNewFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).AcceptOneNewFriend(ctx, req.(*Friendship))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_PutFriendBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).PutFriendBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/PutFriendBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).PutFriendBlacklist(ctx, req.(*Friendship))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_DeleteOneFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Friendship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).DeleteOneFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/DeleteOneFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).DeleteOneFriend(ctx, req.(*Friendship))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetFriendshipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFriendsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetFriendshipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/GetFriendshipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetFriendshipInfo(ctx, req.(*QueryFriendsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLBindService_GetFriendsBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFriendsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBindServiceServer).GetFriendsBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MySQLBindService/GetFriendsBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBindServiceServer).GetFriendsBasicInfo(ctx, req.(*QueryFriendsParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _MySQLBindService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MySQLBindService",
	HandlerType: (*MySQLBindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOneUser",
			Handler:    _MySQLBindService_NewOneUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _MySQLBindService_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _MySQLBindService_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUsersByName",
			Handler:    _MySQLBindService_GetUsersByName_Handler,
		},
		{
			MethodName: "PutUserBasicById",
			Handler:    _MySQLBindService_PutUserBasicById_Handler,
		},
		{
			MethodName: "PutUserPasswordById",
			Handler:    _MySQLBindService_PutUserPasswordById_Handler,
		},
		{
			MethodName: "PutUserPasswordByEmail",
			Handler:    _MySQLBindService_PutUserPasswordByEmail_Handler,
		},
		{
			MethodName: "GetUserAvatarById",
			Handler:    _MySQLBindService_GetUserAvatarById_Handler,
		},
		{
			MethodName: "PutUserAvatarById",
			Handler:    _MySQLBindService_PutUserAvatarById_Handler,
		},
		{
			MethodName: "GetUserQRCodeById",
			Handler:    _MySQLBindService_GetUserQRCodeById_Handler,
		},
		{
			MethodName: "PutUserQRCodeById",
			Handler:    _MySQLBindService_PutUserQRCodeById_Handler,
		},
		{
			MethodName: "AddOneNewFriend",
			Handler:    _MySQLBindService_AddOneNewFriend_Handler,
		},
		{
			MethodName: "PutOneFriendNote",
			Handler:    _MySQLBindService_PutOneFriendNote_Handler,
		},
		{
			MethodName: "AcceptOneNewFriend",
			Handler:    _MySQLBindService_AcceptOneNewFriend_Handler,
		},
		{
			MethodName: "PutFriendBlacklist",
			Handler:    _MySQLBindService_PutFriendBlacklist_Handler,
		},
		{
			MethodName: "DeleteOneFriend",
			Handler:    _MySQLBindService_DeleteOneFriend_Handler,
		},
		{
			MethodName: "GetFriendshipInfo",
			Handler:    _MySQLBindService_GetFriendshipInfo_Handler,
		},
		{
			MethodName: "GetFriendsBasicInfo",
			Handler:    _MySQLBindService_GetFriendsBasicInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mysqlBind.proto",
}
